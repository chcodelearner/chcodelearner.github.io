<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Docker 命令</title>
    <url>/2021/08/22/Docker-%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="镜像操作"><a href="#镜像操作" class="headerlink" title="镜像操作"></a>镜像操作</h1><h2 id="下载镜像"><a href="#下载镜像" class="headerlink" title="下载镜像"></a>下载镜像</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ docker pull 镜像名:tag</span><br></pre></td></tr></table></figure>

<h2 id="搜索镜像"><a href="#搜索镜像" class="headerlink" title="搜索镜像"></a>搜索镜像</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ docker search 镜像名</span><br></pre></td></tr></table></figure>

<h2 id="列出本地镜像"><a href="#列出本地镜像" class="headerlink" title="列出本地镜像"></a>列出本地镜像</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ docker images</span><br></pre></td></tr></table></figure>

<h2 id="删除镜像"><a href="#删除镜像" class="headerlink" title="删除镜像"></a>删除镜像</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ docker rmi 镜像名</span><br></pre></td></tr></table></figure>

<h2 id="创建镜像"><a href="#创建镜像" class="headerlink" title="创建镜像"></a>创建镜像</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ docker commit -m=&quot;has update&quot; -a=&quot;runoob&quot; e218edb10161 runoob/ubuntu:v2</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>-m:</strong> 提交的描述信息</li>
<li><strong>-a:</strong> 指定镜像作者</li>
<li><strong>e218edb10161：</strong>容器 ID</li>
<li><strong>runoob/ubuntu:v2:</strong> 指定要创建的目标镜像名</li>
</ul>
<h2 id="构建镜像"><a href="#构建镜像" class="headerlink" title="构建镜像"></a>构建镜像</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker build -t runoob/centos:6.7 .</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>-t</strong> ：指定要创建的目标镜像名</li>
<li><strong>.</strong> ：Dockerfile 文件所在目录，可以指定Dockerfile 的绝对路径</li>
</ul>
<h2 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h2><p><strong>(1)</strong>  <strong>定制一个 nginx 镜像（构建好的镜像内会有一个 /usr/share/nginx/html/index.html 文件）</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">FROM nginx</span><br><span class="line">RUN echo &#x27;这是一个本地构建的nginx镜像&#x27; &gt; /usr/share/nginx/html/index.html</span><br></pre></td></tr></table></figure>

<p><strong>(2)</strong>  <strong>FROM和RUN</strong></p>
<p><strong>FROM</strong>：定制的镜像都是基于 FROM 的镜像，这里的 nginx 就是定制需要的基础镜像。后续的操作都是基于 nginx。    scratch相当于object，是所有镜像依赖的最基础镜像</p>
<p><strong>RUN</strong>：用于执行后面跟着的命令行命令。</p>
<p>有以下俩种格式</p>
<p>shell 格式：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">RUN &lt;命令行命令&gt;</span><br><span class="line"><span class="meta">#</span><span class="bash"> &lt;命令行命令&gt; 等同于，在终端操作的 shell 命令。</span></span><br></pre></td></tr></table></figure>

<p>exec 格式：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">RUN [&quot;可执行文件&quot;, &quot;参数1&quot;, &quot;参数2&quot;]</span><br><span class="line"># 例如：</span><br><span class="line"># RUN [&quot;./test.php&quot;, &quot;dev&quot;, &quot;offline&quot;] 等价于 RUN ./test.php dev offline</span><br></pre></td></tr></table></figure>

<p><strong>(3)  ENV</strong>：设置环境变量</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ENV &lt;key&gt; &lt;value&gt;</span><br><span class="line">ENV &lt;key1&gt;=&lt;value1&gt; &lt;key2&gt;=&lt;value2&gt;...</span><br></pre></td></tr></table></figure>

<p><strong>(4)  CMD</strong>：运行程序</p>
<ul>
<li>CMD在docker run时运行，用于启动容器</li>
<li>RUN在docker build时运行，用于构建镜像</li>
</ul>
<p><strong>注意</strong>：如果有多个CMD指令，仅最后一个生效，CMD会被docker run 之后的参数替换</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CMD &lt;shell 命令&gt; </span><br><span class="line">CMD [&quot;&lt;可执行文件或命令&gt;&quot;,&quot;&lt;param1&gt;&quot;,&quot;&lt;param2&gt;&quot;,...] </span><br><span class="line">CMD [&quot;&lt;param1&gt;&quot;,&quot;&lt;param2&gt;&quot;,...]  # 该写法是为 ENTRYPOINT 指令指定的程序提供默认参数</span><br></pre></td></tr></table></figure>

<p><strong>(5)  EXPOSE</strong></p>
<p>声明端口</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">EXPOSE &lt;端口1&gt; [&lt;端口2&gt;...]</span><br></pre></td></tr></table></figure>

<p><strong>(6)  VOLUME</strong> </p>
<p>定义匿名数据卷。在启动容器时忘记挂载数据卷，会自动挂载到匿名卷</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">VOLUME [&quot;&lt;路径1&gt;&quot;, &quot;&lt;路径2&gt;&quot;...]</span><br><span class="line">VOLUME &lt;路径&gt;</span><br></pre></td></tr></table></figure>

<p>相当于docker run  -v  /主机目录1:/路径1   -v  /主机目录2:/路径2</p>
<p>如果没有主机目录docker会默认去配置一个，可以通过docker inspect 容器id来查看</p>
<p>在启动容器 docker run 的时候，我们可以通过 -v 参数修改挂载点。</p>
<p><strong>(7)  MAINTAINER</strong></p>
<p>镜像维护者的姓名和邮箱地址</p>
<p><strong>(8)  WORKDIR</strong></p>
<p>指定在创建容器后，终端默认登陆进来的工作目录，一个落脚点</p>
<p><strong>(9)  ADD</strong> </p>
<p>将宿主机目录下的文件拷贝进容器且ADD命令会自动处理url和解压tar压缩包</p>
<p><strong>(10)  COPY</strong></p>
<p>类似ADD，拷贝文件和目录到容器中</p>
<p><strong>(11)  ENTRYPOINT</strong></p>
<p>类似CMD命令，但不会被docker run之后的参数替换，且docker run的参数会送入ENTRYPOINT指定的程序</p>
<p>例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">FROM nginx</span><br><span class="line"></span><br><span class="line">ENTRYPOINT [&quot;nginx&quot;, &quot;-c&quot;] # 定参</span><br><span class="line">CMD [&quot;/etc/nginx/nginx.conf&quot;] # 变参 </span><br></pre></td></tr></table></figure>

<p>不传参：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run nginx:test      相当于</span><br><span class="line"></span><br><span class="line">nginx -c /etc/nginx/nginx.conf</span><br></pre></td></tr></table></figure>

<p>传参</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run nginx:test  -c  /etc/nginx/new.conf   相当于</span><br><span class="line"></span><br><span class="line">nginx -c /etc/nginx/new.conf</span><br></pre></td></tr></table></figure>

<p><strong>(12)  ONBUILD</strong></p>
<p>用于延迟构建命令的执行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ONBUILD &lt;其它指令&gt;</span><br></pre></td></tr></table></figure>

<p>当构建一个被继承的Dockerfile时运行命令，父镜像在被子继承后父镜像的onbuild被触发</p>
<p>在本次构建镜像的过程中不会执行（假设镜像为 test-build）。当有新的 Dockerfile 使用了之前构建的镜像 FROM test-build ，这是执行新镜像的 Dockerfile 构建时候，会执行 test-build 的 Dockerfile 里的 ONBUILD 指定的命令。</p>
<h1 id="容器操作"><a href="#容器操作" class="headerlink" title="容器操作"></a>容器操作</h1><h2 id="启动容器"><a href="#启动容器" class="headerlink" title="启动容器"></a>启动容器</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ docker run --name mysql -p 3306:3306 -e MYSQL_ROOT_PASSWORD=password -d mysql/mysql-server:5.6</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>-d</strong>: 后台运行。</li>
<li><strong>-e</strong>: 配置。</li>
<li><strong>-p（小写）</strong>: 端口映射。</li>
<li><strong>mysql/mysql-server:5.6</strong>: mysql 镜像。</li>
<li><strong>–name</strong>: 容器名。</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ docker run -it ubuntu /bin/bash</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>-i</strong>: 交互式操作。****</li>
<li><strong>-t</strong>: 终端。</li>
<li><strong>ubuntu</strong>: ubuntu 镜像。</li>
<li><strong>/bin/bash</strong>：放在镜像名后的是命令，这里我们希望有个交互式 Shell，因此用的是 /bin/bash。</li>
</ul>
<p><strong>–privileged=true：container内的root拥有真正的root权限</strong></p>
<h2 id="查看运行中的容器"><a href="#查看运行中的容器" class="headerlink" title="查看运行中的容器"></a>查看运行中的容器</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker ps</span><br></pre></td></tr></table></figure>

<h2 id="查看所有容器"><a href="#查看所有容器" class="headerlink" title="查看所有容器"></a>查看所有容器</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker ps -a</span><br></pre></td></tr></table></figure>

<h2 id="启动容器-1"><a href="#启动容器-1" class="headerlink" title="启动容器"></a>启动容器</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker start 容器id</span><br></pre></td></tr></table></figure>

<h2 id="停止容器"><a href="#停止容器" class="headerlink" title="停止容器"></a>停止容器</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker stop 容器id</span><br></pre></td></tr></table></figure>

<h2 id="删除容器"><a href="#删除容器" class="headerlink" title="删除容器"></a>删除容器</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker rm 容器id</span><br></pre></td></tr></table></figure>

<h2 id="进入容器"><a href="#进入容器" class="headerlink" title="进入容器"></a>进入容器</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker exec -it 容器id /bin/bash</span><br><span class="line">docker exec -it 容器名 /bin/bash</span><br><span class="line">docker attach 容器id</span><br></pre></td></tr></table></figure>

<h2 id="退出容器"><a href="#退出容器" class="headerlink" title="退出容器"></a>退出容器</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Ctrl+P+Q  正常退出不关闭容器</span><br><span class="line">exit      退出会关闭容器</span><br></pre></td></tr></table></figure>

<h2 id="docker拷贝容器文件到主机上"><a href="#docker拷贝容器文件到主机上" class="headerlink" title="docker拷贝容器文件到主机上"></a>docker拷贝容器文件到主机上</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker cp 容器ID:容器内路径  目的主机路径</span><br></pre></td></tr></table></figure>

<h2 id="查看docker容器的配置信息"><a href="#查看docker容器的配置信息" class="headerlink" title="查看docker容器的配置信息"></a>查看docker容器的配置信息</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker inspect 容器ID/容器名</span><br></pre></td></tr></table></figure>

<h2 id="查看docker容器的日志"><a href="#查看docker容器的日志" class="headerlink" title="查看docker容器的日志"></a>查看docker容器的日志</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker logs -f 容器ID/容器名</span><br></pre></td></tr></table></figure>

<h2 id="指定网络或ip启动"><a href="#指定网络或ip启动" class="headerlink" title="指定网络或ip启动"></a>指定网络或ip启动</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker network create --subnet=172.18.0.0/16 mynetwork</span><br><span class="line"></span><br><span class="line">--net mynetwork --ip 172.18.0.2</span><br></pre></td></tr></table></figure>

<h2 id="容器数据卷"><a href="#容器数据卷" class="headerlink" title="容器数据卷"></a>容器数据卷</h2><p>作用：容器持久化、容器间继承+共享</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -it -v /宿主机绝对路径目录:/容器内目录  镜像名</span><br></pre></td></tr></table></figure>

<p>两个目录会共享，没有目录会自动创建（<strong>双向同步</strong>）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -it -v /宿主机绝对路径目录:/容器内目录:ro  镜像名</span><br></pre></td></tr></table></figure>

<p>ro(read only)容器内目录只读</p>
<h2 id="volumes-from"><a href="#volumes-from" class="headerlink" title="volumes-from"></a>volumes-from</h2><p>命名得容器挂载数据卷，其它容器通过挂载这个父容器实现数据共享，挂载数据卷得容器，称为数据卷容器</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -it --name 容器名  --volumes-from 父容器名   镜像名</span><br></pre></td></tr></table></figure>

<p>父容器和子容器会共享数据</p>
<p>容器之间配置信息得传递，数据卷的生命周期一直持续到没有容器使用它为止</p>
]]></content>
      <categories>
        <category>应用框架</category>
        <category>虚拟化/容器化</category>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker 启动相关服务</title>
    <url>/2021/08/22/Docker%E5%90%AF%E5%8A%A8%E7%9B%B8%E5%85%B3%E6%9C%8D%E5%8A%A1/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="1、gitlab"><a href="#1、gitlab" class="headerlink" title="1、gitlab"></a>1、gitlab</h1><p><a href="https://juejin.cn/post/6844903924940406797">https://juejin.cn/post/6844903924940406797</a></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run --detach \</span><br><span class="line">  --publish 10443:443 --publish 1080:80 --publish 1022:22 \</span><br><span class="line">  --name gitlab \</span><br><span class="line">  --restart always \</span><br><span class="line">  --volume /mydata/gitlab/config:/etc/gitlab \</span><br><span class="line">  --volume /mydata/gitlab/logs:/var/log/gitlab \</span><br><span class="line">  --volume /mydata/gitlab/data:/var/opt/gitlab \</span><br><span class="line">  --privileged=true \</span><br><span class="line">  gitlab/gitlab-ce:latest</span><br></pre></td></tr></table></figure>

<p><strong>–privileged=true：container内的root拥有真正的root权限</strong></p>
<p><strong>docker各个服务通过容器内ip来交互</strong></p>
<h1 id="2、minio（对象存储服务）"><a href="#2、minio（对象存储服务）" class="headerlink" title="2、minio（对象存储服务）"></a>2、minio（对象存储服务）</h1><p><a href="https://juejin.cn/post/6844904035053469703">https://juejin.cn/post/6844904035053469703</a></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -p 9090:9000 --name minio \</span><br><span class="line">  -v /mydata/minio/data:/data:z \</span><br><span class="line">  -v /mydata/minio/config:/root/.minio \</span><br><span class="line">  -e MINIO_ACCESS_KEY=root \</span><br><span class="line">  -e MINIO_SECRET_KEY=password \</span><br><span class="line">  -d minio/minio server /data</span><br></pre></td></tr></table></figure>

<p>默认的账户密码都是minioadmin</p>
<h1 id="mysql"><a href="#mysql" class="headerlink" title="mysql"></a>mysql</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -p 3306:3306 --name mysql \</span><br><span class="line">--network host \</span><br><span class="line">-v /usr/local/docker/mysql/conf:/etc/mysql \</span><br><span class="line">-v /usr/local/docker/mysql/logs:/var/log/mysql \</span><br><span class="line">-v /usr/local/docker/mysql/data:/var/lib/mysql \</span><br><span class="line">-e MYSQL_ROOT_PASSWORD=sfibsdfbasfbiu~ \</span><br><span class="line">-d mysql:5.7</span><br></pre></td></tr></table></figure>

<h1 id="nginx"><a href="#nginx" class="headerlink" title="nginx"></a>nginx</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -d -p 80:80 \</span><br><span class="line">--network host \</span><br><span class="line">--name nginx \</span><br><span class="line">-v /usr/local/docker/nginx/conf/nginx.conf:/etc/nginx/nginx.conf \</span><br><span class="line">-v /usr/local/docker/nginx/logs:/var/log/nginx  \</span><br><span class="line">--restart=always \</span><br><span class="line">nginx:latest</span><br></pre></td></tr></table></figure>

<h1 id="sentinel"><a href="#sentinel" class="headerlink" title="sentinel"></a>sentinel</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run --name sentinel --network host -d -p 8858:8858 -d bladex/sentinel-dashboard</span><br></pre></td></tr></table></figure>

<p>用户密码都是sentinel</p>
<h1 id="redis"><a href="#redis" class="headerlink" title="redis"></a>redis</h1><p>配置redis.conf属性requirepass（密码）、appendonly（持久化）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -d -p 6379:6379 \</span><br><span class="line">--network host \</span><br><span class="line">--name redis \</span><br><span class="line">-v /usr/local/docker/redis/data:/data \</span><br><span class="line">-v /usr/local/docker/redis/conf/redis.conf:/etc/redis/redis.conf  \</span><br><span class="line">redis redis-server /etc/redis/redis.conf \</span><br><span class="line">--appendonly yes</span><br></pre></td></tr></table></figure>
<p>集群：<a href="https://juejin.cn/post/6844904110316060685">https://juejin.cn/post/6844904110316060685</a></p>
<h1 id="nacos"><a href="#nacos" class="headerlink" title="nacos"></a>nacos</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -d -p 8848:8848 \</span><br><span class="line">--network host \</span><br><span class="line">--name nacos \</span><br><span class="line">--env MODE=standalone \</span><br><span class="line">--env SPRING_DATASOURCE_PLATFORM=mysql \</span><br><span class="line">--env JVM_XMS=512m \</span><br><span class="line">--env JVM_XMX=512m \</span><br><span class="line">--env JVM_XMN=256m \</span><br><span class="line">-v /usr/local/docker/nacos/conf:/home/nacos/conf \</span><br><span class="line">-v /usr/local/docker/nacos/logs:/home/nacos/logs \</span><br><span class="line">nacos/nacos-server:v2.0.3</span><br></pre></td></tr></table></figure>

<p>配置JVM，不然内存经常oom而退出</p>
<table>
<thead>
<tr>
<th>Nacos</th>
<th>JVM</th>
<th>默认值</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>JVM_XMS</td>
<td>-Xms</td>
<td>1g</td>
<td>初始分配内存</td>
</tr>
<tr>
<td>JVM_XMX</td>
<td>-Xmx</td>
<td>1g</td>
<td>最大分配内存</td>
</tr>
<tr>
<td>JVM_XMN</td>
<td>-Xmn</td>
<td>512m</td>
<td>年轻代大小</td>
</tr>
<tr>
<td>JVM_MS</td>
<td>-XX:MetaspaceSize</td>
<td>128m</td>
<td>元空间初始分配内存</td>
</tr>
<tr>
<td>JVM_MMS</td>
<td>-XX:MaxMetaspaceSize</td>
<td>320m</td>
<td>元空间最大分配内存</td>
</tr>
</tbody></table>
<p>配置conf/application.properties和conf/nacos-logback.xml</p>
<p>conf/application.properties</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 开启后，springboot连接nacos需要账户密码</span></span><br><span class="line"><span class="meta">nacos.core.auth.enabled</span>=<span class="string">true</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># mysql配置</span></span><br><span class="line"><span class="meta">spring.datasource.platform</span>=<span class="string">mysql</span></span><br><span class="line"></span><br><span class="line"><span class="meta">db.num</span>=<span class="string">1</span></span><br><span class="line"><span class="meta">db.url.0</span>=<span class="string">jdbc:mysql://127.0.0.1:3306/nacos?useUnicode=true&amp;characterEncoding=UTF-8&amp;useSSL=false&amp;serverTimezone=GMT%2B8</span></span><br><span class="line"><span class="meta">db.user</span>=<span class="string">root</span></span><br><span class="line"><span class="meta">db.password</span>=<span class="string">sfibsdfbasfbiu~</span></span><br></pre></td></tr></table></figure>

<h1 id="5、若依"><a href="#5、若依" class="headerlink" title="5、若依"></a>5、若依</h1><h2 id="5-1、ruoyi-ui"><a href="#5-1、ruoyi-ui" class="headerlink" title="5.1、ruoyi-ui"></a>5.1、ruoyi-ui</h2><h3 id="5-1-1-vue项目打包"><a href="#5-1-1-vue项目打包" class="headerlink" title="5.1.1 vue项目打包"></a>5.1.1 vue项目打包</h3><p>打包ruoyi-ui上传dist文件夹到虚拟机/usr/local目录下，改名为ruoyi-ui</p>
<h3 id="5-1-2-nginx-conf和Dockerfile"><a href="#5-1-2-nginx-conf和Dockerfile" class="headerlink" title="5.1.2 nginx.conf和Dockerfile"></a>5.1.2 nginx.conf和Dockerfile</h3><p>在/usr/local新建nginx.conf，ruoyi-gateway是docker-compose.yml里网关服务的别名</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">  listen    80;</span><br><span class="line">  server_name 192.168.15.129;</span><br><span class="line">  </span><br><span class="line">  location / &#123;</span><br><span class="line">  	root  /usr/share/nginx/html;</span><br><span class="line">    index index.html index.htm;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  location /prod-api/&#123;</span><br><span class="line">    proxy_set_header Host $http_host;</span><br><span class="line">    proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">    proxy_set_header REMOTE-HOST $remote_addr;</span><br><span class="line">    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">    proxy_pass http://ruoyi-gateway:8080/;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  error_page  500 502 503 504 /50x.html;</span><br><span class="line">  location = /50x.html &#123;</span><br><span class="line">     root  html;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在/usr/local新建Dockerfile</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> nginx</span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> ruoyi-ui/ /usr/share/nginx/html/</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> nginx.conf /etc/nginx/conf.d/default.conf</span></span><br></pre></td></tr></table></figure>

<p>运行build命令构建ruoyi/ruoyi-ui:1.0镜像</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker build -t ruoyi/ruoyi-ui:1.0 .</span><br></pre></td></tr></table></figure>

<h2 id="5-2-构建后台所有服务镜像"><a href="#5-2-构建后台所有服务镜像" class="headerlink" title="5.2 构建后台所有服务镜像"></a>5.2 构建后台所有服务镜像</h2><h2 id="5-3-下载docker-compose-yml其他镜像"><a href="#5-3-下载docker-compose-yml其他镜像" class="headerlink" title="5.3 下载docker-compose.yml其他镜像"></a>5.3 下载docker-compose.yml其他镜像</h2><h2 id="5-4-构建docker-compose-yml"><a href="#5-4-构建docker-compose-yml" class="headerlink" title="5.4 构建docker-compose.yml"></a>5.4 构建docker-compose.yml</h2><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">mysql:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">mysql:5.7</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">docker-mysql</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">privileged:</span> <span class="literal">true</span>    <span class="comment">#解决下面挂载文件权限不足问题</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">MYSQL_ROOT_PASSWORD:</span> <span class="string">password</span> <span class="comment">#设置root帐号密码</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">3306</span><span class="string">:3306</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/ruoyi/mysql/data:/var/lib/mysql</span> <span class="comment">#数据文件挂载</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/ruoyi/mysql/conf:/etc/mysql</span>     <span class="comment">#配置文件挂载</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/ruoyi/mysql/log:/var/log/mysql</span>  <span class="comment">#日志文件挂载</span></span><br><span class="line">  <span class="attr">nacos:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">nacos/nacos-server:latest</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">docker-nacos</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">MODE:</span> <span class="string">standalone</span></span><br><span class="line">      <span class="attr">SPRING_DATASOURCE_PLATFORM:</span> <span class="string">mysql</span></span><br><span class="line">      <span class="attr">MYSQL_SERVICE_HOST:</span> <span class="string">db</span></span><br><span class="line">      <span class="attr">MYSQL_SERVICE_PORT:</span> <span class="number">3306</span></span><br><span class="line">      <span class="attr">MYSQL_SERVICE_DB_NAME:</span> <span class="string">ry-config</span></span><br><span class="line">      <span class="attr">MYSQL_SERVICE_USER:</span> <span class="string">root</span></span><br><span class="line">      <span class="attr">MYSQL_SERVICE_PASSWORD:</span> <span class="string">password</span></span><br><span class="line">      <span class="attr">JVM_XMS:</span> <span class="string">256m</span></span><br><span class="line">      <span class="attr">JVM_XMX:</span> <span class="string">256m</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">8848</span><span class="string">:8848</span></span><br><span class="line">    <span class="attr">external_links:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">mysql:db</span> <span class="comment">#可以用nacos这个域名访问nacos服务</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">redis:5.0.8</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">docker-redis</span></span><br><span class="line">    <span class="attr">privileged:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">6379</span><span class="string">:6379</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/ruoyi/redis/data:/data</span> <span class="comment">#数据文件挂载</span></span><br><span class="line">  <span class="attr">ruoyi-gateway:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">ruoyi-docker/ruoyi-gateway:1.0</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">docker-ruoyi-gateway</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">8080</span><span class="string">:8080</span></span><br><span class="line">    <span class="attr">external_links:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">nacos:nacos</span> <span class="comment">#可以用nacos这个域名访问nacos服务</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">redis:redis</span> <span class="comment">#可以用redis这个域名访问redis服务</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">mysql:db</span> <span class="comment">#可以用db这个域名访问mysql服务</span></span><br><span class="line">  <span class="attr">ruoyi-auth:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">ruoyi-docker/ruoyi-auth:1.0</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">docker-ruoyi-auth</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">9200</span><span class="string">:9200</span></span><br><span class="line">    <span class="attr">external_links:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">nacos:nacos</span> <span class="comment">#可以用nacos这个域名访问nacos服务</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">redis:redis</span> <span class="comment">#可以用redis这个域名访问redis服务</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">mysql:db</span> <span class="comment">#可以用db这个域名访问mysql服务</span></span><br><span class="line">  <span class="attr">ruoyi-modules-system:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">ruoyi-docker/ruoyi-modules-system:1.0</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">docker-ruoyi-modules-system</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">9201</span><span class="string">:9201</span></span><br><span class="line">    <span class="attr">external_links:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">nacos:nacos</span> <span class="comment">#可以用nacos这个域名访问nacos服务</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">redis:redis</span> <span class="comment">#可以用redis这个域名访问redis服务</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">mysql:db</span> <span class="comment">#可以用db这个域名访问mysql服务</span></span><br><span class="line">  <span class="attr">ruoyi-ui:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">ruoyi-docker/ruoyi-ui:1.0</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">docker-ruoyi-ui</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">80</span><span class="string">:80</span></span><br><span class="line">    <span class="attr">external_links:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ruoyi-gateway:ruoyi-gateway</span> <span class="comment">#可以用ruoyi-gateway这个域名访问ruoyi-gateway服务</span></span><br></pre></td></tr></table></figure>

<h2 id="5-5修改各个服务的链接地址"><a href="#5-5修改各个服务的链接地址" class="headerlink" title="5.5修改各个服务的链接地址"></a>5.5修改各个服务的链接地址</h2><h3 id="ruoyi-ui"><a href="#ruoyi-ui" class="headerlink" title="ruoyi-ui"></a>ruoyi-ui</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">proxy_pass http://ruoyi-gateway:8080/;   #改为网关域名</span><br></pre></td></tr></table></figure>

<p>各个微服务bootstrap.yml</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">spring.cloud.nacos.discovery.server-addr</span>=<span class="string">nacos:8848   #服务注册地址</span></span><br><span class="line"><span class="meta">spring.cloud.nacos.config.server-addr</span>=<span class="string">nacos:8848      #配置中心地址</span></span><br></pre></td></tr></table></figure>

<h2 id="5-6-在docker-compose-yml目录下运行docker-compose-up-d-启动所有服务"><a href="#5-6-在docker-compose-yml目录下运行docker-compose-up-d-启动所有服务" class="headerlink" title="5.6 在docker-compose.yml目录下运行docker-compose up -d 启动所有服务"></a>5.6 在docker-compose.yml目录下运行docker-compose up -d 启动所有服务</h2><h2 id="5-7修改nacos里配置文件的mysql和redis地址为db、redis"><a href="#5-7修改nacos里配置文件的mysql和redis地址为db、redis" class="headerlink" title="5.7修改nacos里配置文件的mysql和redis地址为db、redis"></a>5.7修改nacos里配置文件的mysql和redis地址为db、redis</h2><h1 id="6、宿主机在docker里的ip地址"><a href="#6、宿主机在docker里的ip地址" class="headerlink" title="6、宿主机在docker里的ip地址"></a>6、宿主机在docker里的ip地址</h1><p><strong>docker-compose.yml创建的服务是另外单独网络</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# ip addr show docker0</span><br><span class="line">5: docker0: &lt;NO-CARRIER,BROADCAST,MULTICAST,UP&gt; mtu 1500 qdisc noqueue state DOWN group default </span><br><span class="line">    link/ether 02:42:f7:0a:38:97 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 172.17.0.1/16 scope global docker0</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet6 fe80::42:f7ff:fe0a:3897/64 scope link </span><br><span class="line">       valid_lft forever preferred_lft forever</span><br></pre></td></tr></table></figure>



<p>docker容器可以ping通宿主机ip  192.168.15.129</p>
<p>但是容器内不能用宿主机ip+端口访问另一个容器服务</p>
<p>要么通过另一个容器ip+端口</p>
<p>要么通过docker-compose.yml文件里创建的别名，前提是两个服务都是由docker-compose.yml创建，网络互通</p>
<p>在容器内部可以ping 本地ip（无线局域网WLAN、VMnet1）、 8.8.8.8</p>
<h1 id="7、kafka"><a href="#7、kafka" class="headerlink" title="7、kafka"></a>7、kafka</h1><p>1、zookeeper</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -d --name zookeeper -p 2181:2181 -v /etc/localtime:/etc/localtime wurstmeister/zookeeper</span><br></pre></td></tr></table></figure>

<p>2、kafka</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run  -d --name kafka -p 9092:9092 -e KAFKA_BROKER_ID=0 -e KAFKA_ZOOKEEPER_CONNECT=172.17.0.3:2181 -e KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://192.168.15.129:9092 -e KAFKA_LISTENERS=PLAINTEXT://0.0.0.0:9092 -t --network host wurstmeister/kafka</span><br></pre></td></tr></table></figure>

<p>192.168.15.129是虚拟机ip，</p>
<p>172.17.0.3是zookeeper容器的ip</p>
<p>–network  host  主机网络模式，让kafka容器处在和虚拟机一样的网络</p>
<h1 id="8、Jenkins"><a href="#8、Jenkins" class="headerlink" title="8、Jenkins"></a>8、Jenkins</h1><p><a href="https://mp.weixin.qq.com/s/tQqvgSc9cHBtnqRQSbI4aw">https://mp.weixin.qq.com/s/tQqvgSc9cHBtnqRQSbI4aw</a></p>
<p><a href="https://juejin.cn/post/6844904031739969550">https://juejin.cn/post/6844904031739969550</a></p>
<p>1、docker启动</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -p 8080:8080 -p 50000:5000 --name jenkins \</span><br><span class="line">-u root \</span><br><span class="line">-v /mydata/jenkins_home:/var/jenkins_home \</span><br><span class="line">-d jenkins/jenkins:lts</span><br></pre></td></tr></table></figure>

<p>2、maven配置</p>
<p>conf配置文件目录：/mydata/jenkins_home/tools/hudson.tasks.Maven_MavenInstallation/maven-3.6.3/conf</p>
<h1 id="9、Jenkins-Gitlab上传代码自动构建项目"><a href="#9、Jenkins-Gitlab上传代码自动构建项目" class="headerlink" title="9、Jenkins+Gitlab上传代码自动构建项目"></a>9、Jenkins+Gitlab上传代码自动构建项目</h1><p><a href="https://blog.csdn.net/baidu_38432732/article/details/90512972?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-4.control&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-4.control">https://blog.csdn.net/baidu_38432732/article/details/90512972?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-4.control&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-4.control</a></p>
<p>如果没有Build when a change is pushed to GitLab，请安装以下插件：</p>
<ul>
<li>Git Plugin</li>
<li>SSH Plugin</li>
<li>URL Trigger Plugin</li>
<li>Gerrit Trigger Plugin</li>
<li>Gitlab Hook</li>
<li>Gitlab Merge Request Builder</li>
</ul>
<h1 id="10、EFLK"><a href="#10、EFLK" class="headerlink" title="10、EFLK"></a>10、EFLK</h1><h2 id="docker-compose-yml"><a href="#docker-compose-yml" class="headerlink" title="docker-compose.yml"></a>docker-compose.yml</h2><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3&quot;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">elasticsearch:</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">elasticsearch</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">elasticsearch:7.1.1</span></span><br><span class="line">    <span class="attr">privileged:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">9200</span><span class="string">:9200</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">9300</span><span class="string">:9300</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/mydata/elk-single/elasticsearch/data:/usr/share/elasticsearch/data</span> <span class="comment">#数据文件挂载</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/mydata/elk-single/elasticsearch/logs:/usr/share/elasticsearch/logs</span> <span class="comment">#日志文件挂载</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/mydata/elk-single/elasticsearch/plugins:/usr/share/elasticsearch/plugins</span> <span class="comment">#插件文件挂载</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;ES_JAVA_OPTS=-Xms512m -Xmx512m&quot;</span>  <span class="comment">#设置使用jvm内存大小</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;cluster.name=elasticsearch&quot;</span>   <span class="comment">#设置集群名称为elasticsearch</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;discovery.type=single-node&quot;</span>   <span class="comment">#以单一节点模式启动</span></span><br><span class="line">  <span class="attr">kibana:</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">kibana</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">kibana:7.1.1</span></span><br><span class="line">    <span class="attr">privileged:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">links:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">elasticsearch:es</span> <span class="comment">#可以用es这个域名访问elasticsearch服务</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">5601</span><span class="string">:5601</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">elasticsearch.hosts=http://es:9200</span> <span class="comment">#设置访问elasticsearch的地址</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">elasticsearch</span> <span class="comment">#kibana在elasticsearch启动之后再启动</span></span><br><span class="line">  <span class="attr">filebeat:</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">filebeat</span></span><br><span class="line">    <span class="comment"># 镜像</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">docker.elastic.co/beats/filebeat:7.1.1</span></span><br><span class="line">    <span class="attr">privileged:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./filebeat/conf/filebeat.yml:/usr/share/filebeat/filebeat.yml</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/mydata/elk-single/logs:/home/project/elk/logs</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/mydata/elk-single/filebeat/logs:/usr/share/filebeat/logs</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/mydata/elk-single/filebeat/data:/usr/share/filebeat/data</span></span><br><span class="line">    <span class="attr">links:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">logstash</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">kibana</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">9000</span><span class="string">:9000</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">elasticsearch</span></span><br><span class="line">  <span class="attr">logstash:</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">logstash</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">logstash:7.1.1</span></span><br><span class="line">    <span class="attr">privileged:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/mydata/elk-single/logstash/conf/logstash-filebeat.conf:/usr/share/logstash/pipeline/logstash.conf</span> <span class="comment">#挂载logstash的配置文件</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">4560</span><span class="string">:4560</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">elasticsearch</span></span><br><span class="line">    <span class="attr">links:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">elasticsearch:es</span> <span class="comment">#可以用es这个域名访问elasticsearch服务</span></span><br></pre></td></tr></table></figure>

<p>启动服务</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure>

<p>访问<a href="http://192.168.15.129:9200/%E5%92%8Chttp://192.168.15.129:5601/">http://192.168.15.129:9200/和http://192.168.15.129:5601/</a></p>
<p><a href="https://juejin.cn/post/6844903887745318920">https://juejin.cn/post/6844903887745318920</a></p>
<p><a href="https://juejin.cn/post/6844904196672585741#heading-2">https://juejin.cn/post/6844904196672585741#heading-2</a></p>
<h1 id="12、RocketMQ"><a href="#12、RocketMQ" class="headerlink" title="12、RocketMQ"></a>12、RocketMQ</h1><p>1、启动Name Server</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -d -p 9876:9876 --name rmqserver  foxiswho/rocketmq:server-4.7.0</span><br></pre></td></tr></table></figure>

<p>2、启动Broker</p>
<h1 id="13、RabbitMQ"><a href="#13、RabbitMQ" class="headerlink" title="13、RabbitMQ"></a>13、RabbitMQ</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -d --name rabbitmq -p 5672:5672 -p 15672:15672 -v /mydata/rabbitmq:/var/lib/rabbitmq --privileged=<span class="literal">true</span> rabbitmq:3-management</span><br></pre></td></tr></table></figure>

<p>访问：<a href="http://192.168.15.129:15672/">http://192.168.15.129:15672</a></p>
<p>默认账户密码</p>
<p>guest/guest</p>
]]></content>
      <categories>
        <category>应用框架</category>
        <category>虚拟化/容器化</category>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker 部署 Nacos</title>
    <url>/2021/08/22/Docker%E9%83%A8%E7%BD%B2Nacos/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>先部署好MySQL，作为nacos持久化方式</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -d -p 8848:8848 \</span><br><span class="line">--network host \</span><br><span class="line">--name nacos \</span><br><span class="line">--env MODE=standalone \</span><br><span class="line">--env SPRING_DATASOURCE_PLATFORM=mysql \</span><br><span class="line">--env JVM_XMS=512m \</span><br><span class="line">--env JVM_XMX=512m \</span><br><span class="line">--env JVM_XMN=256m \</span><br><span class="line">-v /usr/local/docker/nacos/conf:/home/nacos/conf \</span><br><span class="line">-v /usr/local/docker/nacos/logs:/home/nacos/logs \</span><br><span class="line">nacos/nacos-server:v2.0.3</span><br></pre></td></tr></table></figure>

<ul>
<li>–network host，将mysql和nacos都配置在一个网络上，不然无法访问</li>
<li>–env MODE=standalone，设置为单机模式</li>
<li>–env JVM_XMS=512m </li>
<li>–env JVM_XMX=512m </li>
<li>–env JVM_XMN=256m </li>
</ul>
<p>因为自己买的云服务器内存有限，需要配置JVM，不然内存经常oom而退出</p>
<table>
<thead>
<tr>
<th>Nacos</th>
<th>JVM</th>
<th>默认值</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>JVM_XMS</td>
<td>-Xms</td>
<td>1g</td>
<td>初始分配内存</td>
</tr>
<tr>
<td>JVM_XMX</td>
<td>-Xmx</td>
<td>1g</td>
<td>最大分配内存</td>
</tr>
<tr>
<td>JVM_XMN</td>
<td>-Xmn</td>
<td>512m</td>
<td>年轻代大小</td>
</tr>
<tr>
<td>JVM_MS</td>
<td>-XX:MetaspaceSize</td>
<td>128m</td>
<td>元空间初始分配内存</td>
</tr>
<tr>
<td>JVM_MMS</td>
<td>-XX:MaxMetaspaceSize</td>
<td>320m</td>
<td>元空间最大分配内存</td>
</tr>
</tbody></table>
<ul>
<li>-v /usr/local/docker/nacos/conf:/home/nacos/conf    挂载配置文件</li>
<li>-v /usr/local/docker/nacos/logs:/home/nacos/logs     挂载日志文件</li>
</ul>
<p>conf/application.properties和conf/nacos-logback.xml可以从nacos压缩包里获取</p>
<p>application.properties一些关键配置</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 开启后，springboot连接nacos需要账户密码</span></span><br><span class="line"><span class="meta">nacos.core.auth.enabled</span>=<span class="string">false</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># mysql配置</span></span><br><span class="line"><span class="meta">spring.datasource.platform</span>=<span class="string">mysql</span></span><br><span class="line"></span><br><span class="line"><span class="meta">db.num</span>=<span class="string">1</span></span><br><span class="line"><span class="meta">db.url.0</span>=<span class="string">jdbc:mysql://127.0.0.1:3306/nacos?useUnicode=true&amp;characterEncoding=UTF-8&amp;useSSL=false&amp;serverTimezone=GMT%2B8</span></span><br><span class="line"><span class="meta">db.user</span>=<span class="string">root</span></span><br><span class="line"><span class="meta">db.password</span>=<span class="string">xxxxxxx</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>应用框架</category>
        <category>分布式/微服务</category>
        <category>服务发现/注册</category>
        <category>Nacos</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>Nacos</tag>
      </tags>
  </entry>
  <entry>
    <title>ElasticSearch</title>
    <url>/2021/08/19/ElasticSearch/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="ElasticSearch7-2-0"><a href="#ElasticSearch7-2-0" class="headerlink" title="ElasticSearch7.2.0"></a>ElasticSearch7.2.0</h1><h1 id="正排索引与倒排索引"><a href="#正排索引与倒排索引" class="headerlink" title="正排索引与倒排索引"></a>正排索引与倒排索引</h1><h2 id="正排索引"><a href="#正排索引" class="headerlink" title="正排索引"></a>正排索引</h2><p>id    name</p>
<p>1     my name is chen hao<br>2     my name is li si</p>
<p>以id为主键，建立索引，但在查询内容是不好，比如查询Chenhao、</p>
<h2 id="倒排索引"><a href="#倒排索引" class="headerlink" title="倒排索引"></a>倒排索引</h2><p>keyword      id</p>
<p>my               1,2<br>name           1,2<br>is                  1,2<br>chen             1<br>hao              1<br>li                   2</p>
<p>先通过关键字，找到主键，再通过主键找到内容</p>
<h1 id="索引操作"><a href="#索引操作" class="headerlink" title="索引操作"></a>索引操作</h1><p>Get    <a href="http://192.168.130.144:9202/pm_perf_data_companymin">http://192.168.130.144:9202/pm_perf_data_companymin</a>   获取索引信息</p>
<p>Put    <a href="http://192.168.130.144:9202/pm_perf_data_companymin">http://192.168.130.144:9202/pm_perf_data_companymin</a>   新增索引（Put具有幂等性）</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">	<span class="attr">&quot;settings&quot;</span>: &#123;</span><br><span class="line">		<span class="attr">&quot;number_of_shards&quot;</span>: <span class="number">3</span>,   <span class="comment">//分片数，默认为5</span></span><br><span class="line">		<span class="attr">&quot;number_of_replicas&quot;</span>: <span class="number">2</span>  <span class="comment">//副本数，默认为1</span></span><br><span class="line">	&#125;,</span><br><span class="line">	<span class="attr">&quot;mapping&quot;</span>: &#123;</span><br><span class="line">		<span class="attr">&quot;_doc&quot;</span>: &#123;</span><br><span class="line">			<span class="attr">&quot;properties&quot;</span>: &#123;</span><br><span class="line">				<span class="attr">&quot;commodity_id&quot;</span>: &#123;</span><br><span class="line">					<span class="attr">&quot;type&quot;</span>: <span class="string">&quot;long&quot;</span></span><br><span class="line">				&#125;,</span><br><span class="line">				<span class="attr">&quot;commodity_name&quot;</span>: &#123;</span><br><span class="line">					<span class="attr">&quot;type&quot;</span>: <span class="string">&quot;text&quot;</span></span><br><span class="line">				&#125;,</span><br><span class="line">				<span class="attr">&quot;picture_url&quot;</span>: &#123;</span><br><span class="line">					<span class="attr">&quot;type&quot;</span>: <span class="string">&quot;keyword&quot;</span></span><br><span class="line">				&#125;,</span><br><span class="line">				<span class="attr">&quot;price&quot;</span>: &#123;</span><br><span class="line">					<span class="attr">&quot;type&quot;</span>: <span class="string">&quot;double&quot;</span></span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Delete   <a href="http://192.168.130.144:9202/pm_perf_data_companymin">http://192.168.130.144:9202/pm_perf_data_companymin</a>   删除索引</p>
<p>Get   <a href="http://192.168.130.144:9202/_cat/indices?v">http://192.168.130.144:9202/_cat/indices?v</a>   查询全部索引信息</p>
<h1 id="文档操作"><a href="#文档操作" class="headerlink" title="文档操作"></a>文档操作</h1><h2 id="新增数据"><a href="#新增数据" class="headerlink" title="新增数据"></a>新增数据</h2><p>Post    <a href="http://192.168.130.144:9202/pm_perf_data_companymin/_doc">http://192.168.130.144:9202/pm_perf_data_companymin/_doc</a></p>
<p>数据格式为Json格式</p>
<p>Post    <a href="http://192.168.130.144:9202/pm_perf_data_companymin/_doc/%7Bid%7D">http://192.168.130.144:9202/pm_perf_data_companymin/_doc/{id}</a>    指定id</p>
<p>可以把doc改为create</p>
<h2 id="主键查询"><a href="#主键查询" class="headerlink" title="主键查询"></a>主键查询</h2><p>Get    <a href="http://192.168.130.144:9202/pm_perf_data_companymin/_doc/%7Bid%7D">http://192.168.130.144:9202/pm_perf_data_companymin/_doc/{id}</a></p>
<h2 id="全查询"><a href="#全查询" class="headerlink" title="全查询"></a>全查询</h2><p>Get    <a href="http://192.168.130.144:9202/pm_perf_data_companymin/_search">http://192.168.130.144:9202/pm_perf_data_companymin/_search</a></p>
<h2 id="修改数据"><a href="#修改数据" class="headerlink" title="修改数据"></a>修改数据</h2><p>POST   <a href="http://192.168.130.144:9202/%7Bindex%7D/_update/%7Bid%7D">http://192.168.130.144:9202/{index}/_update/{id}</a></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;doc&quot;</span>: &#123;</span><br><span class="line">	     <span class="attr">&quot;k_RESID&quot;</span>: <span class="string">&quot;9b473321-093d-4274-8ad8-840db65394c5&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="query：查询条件：Json格式"><a href="#query：查询条件：Json格式" class="headerlink" title="query：查询条件：Json格式"></a>query：查询条件：Json格式</h1><h2 id="bool用来合并多个查询条件"><a href="#bool用来合并多个查询条件" class="headerlink" title="bool用来合并多个查询条件"></a>bool用来合并多个查询条件</h2><p>包含四个子句</p>
<h3 id="must：满足全部条件，并参与计算分值，and"><a href="#must：满足全部条件，并参与计算分值，and" class="headerlink" title="must：满足全部条件，并参与计算分值，and"></a>must：满足全部条件，并参与计算分值，and</h3><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;query&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;bool&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;must&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;match&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;ITEM_CODE&quot;</span>: <span class="string">&quot;MAXPDUSESSION&quot;</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;match&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;COMPANYCODE&quot;</span>: <span class="string">&quot;HA-ZZ-HNZT&quot;</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="should：至少满足一个-or"><a href="#should：至少满足一个-or" class="headerlink" title="should：至少满足一个  or"></a>should：至少满足一个  or</h3><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;query&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;bool&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;should&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;match&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;ITEM_CODE&quot;</span>: <span class="string">&quot;MAXPDUSESSION&quot;</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;match&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;ITEM_PARA&quot;</span>: <span class="string">&quot;-1&quot;</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="filter：和must一样，但不参与计算分值"><a href="#filter：和must一样，但不参与计算分值" class="headerlink" title="filter：和must一样，但不参与计算分值"></a>filter：和must一样，但不参与计算分值</h3><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;query&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;bool&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;filter&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;match&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;ITEM_CODE&quot;</span>: <span class="string">&quot;MAXPDUSESSION&quot;</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;match&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;ITEM_PARA&quot;</span>: <span class="string">&quot;-1&quot;</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="must-not：必须不满足条件"><a href="#must-not：必须不满足条件" class="headerlink" title="must_not：必须不满足条件"></a>must_not：必须不满足条件</h3><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;query&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;bool&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;must_not&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;match&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;ITEM_CODE&quot;</span>: <span class="string">&quot;MAXPDUSESSION&quot;</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;match&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;ITEM_PARA&quot;</span>: <span class="string">&quot;-1&quot;</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="单个条件语句"><a href="#单个条件语句" class="headerlink" title="单个条件语句"></a>单个条件语句</h2><ul>
<li>match_phase：会分词，但需要结果中也包含所有的分词，而且顺序要求一样</li>
<li>query_string：和match类似，但是在所有字段中搜索</li>
<li>prefix：前缀查询</li>
<li>regexp：正则查询</li>
<li>fuzzy：模糊查询<ul>
<li>fuzziness：允许的最大编辑距离，默认不开启模糊查询，相当于fuzziness=0</li>
<li>prefix_length：控制两个字符串匹配的最小相同的前缀大小，也即是前n个字符不允许编辑，必须与查询词相同</li>
<li>max_expansions</li>
<li>transpositions：将相邻位置字符互换算作一次编辑距离</li>
</ul>
</li>
</ul>
<p>GET pm_perf_data_companymin/_search</p>
<h3 id="match-all：查询全部数据"><a href="#match-all：查询全部数据" class="headerlink" title="match_all：查询全部数据"></a>match_all：查询全部数据</h3><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;query&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;match_all&quot;</span>: &#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="match：模糊查询，会分词"><a href="#match：模糊查询，会分词" class="headerlink" title="match：模糊查询，会分词"></a>match：模糊查询，会分词</h3><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;query&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;match&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;ITEM_CODE&quot;</span>: <span class="string">&quot;MAXPDUSESSION&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// fuzziness开启纠错检索，默认值是2,表示最多可以纠错两次</span></span><br><span class="line"><span class="comment">// 用户在进行搜索的时候打字错误现象，搜索引擎会自动纠正，然后尝试匹配索引库中的数据</span></span><br><span class="line"><span class="comment">// operator默认是or, and表示查询满足所有条件</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;query&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;match&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;k_RESPARA&quot;</span>:&#123;</span><br><span class="line">        <span class="attr">&quot;query&quot;</span>:<span class="string">&quot;东莞松山湖华为T园区D1-HRW&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;fuzziness&quot;</span>:<span class="string">&quot;AUTO&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;operator&quot;</span>:<span class="string">&quot;and&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="term：查询某个字段里含有某个关键词的文档，不会分词—-精确查询，"><a href="#term：查询某个字段里含有某个关键词的文档，不会分词—-精确查询，" class="headerlink" title="term：查询某个字段里含有某个关键词的文档，不会分词—-精确查询，="></a>term：查询某个字段里含有某个关键词的文档，不会分词—-精确查询，=</h3><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;query&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;term&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;ITEM_CODE&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;value&quot;</span>: <span class="string">&quot;MAXPDUSESSION&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="terms：查询某个字段里含有多个关键词的文档，不会分词—-精确查询，in"><a href="#terms：查询某个字段里含有多个关键词的文档，不会分词—-精确查询，in" class="headerlink" title="terms：查询某个字段里含有多个关键词的文档，不会分词—-精确查询，in"></a>terms：查询某个字段里含有多个关键词的文档，不会分词—-精确查询，in</h3><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;query&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;terms&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;ITEM_CODE&quot;</span>: [</span><br><span class="line">        <span class="string">&quot;MAXPDUSESSION&quot;</span>,</span><br><span class="line">        <span class="string">&quot;SMF_SESS_MAX_RATE&quot;</span></span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="range：范围查询"><a href="#range：范围查询" class="headerlink" title="range：范围查询"></a>range：范围查询</h3><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;query&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;range&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;RECORD_TIME&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;gte&quot;</span>: <span class="string">&quot;2021-06-14 00:00:00&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;lte&quot;</span>: <span class="string">&quot;2021-06-14 00:00:00&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="wildcard：通配符查询-占位符查询"><a href="#wildcard：通配符查询-占位符查询" class="headerlink" title="wildcard：通配符查询/占位符查询"></a>wildcard：通配符查询/占位符查询</h3><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;query&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;wildcard&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;ITEM_PARA&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;value&quot;</span>: <span class="string">&quot;*-1*&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="sort：排序规则：Json格式"><a href="#sort：排序规则：Json格式" class="headerlink" title="sort：排序规则：Json格式"></a>sort：排序规则：Json格式</h1><p>GET pm_perf_data_companymin/_search</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;query&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;match_all&quot;</span>: &#123;&#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;sort&quot;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;RECORD_TIME&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;order&quot;</span>: <span class="string">&quot;desc&quot;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">&quot;FRESHTIME&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;order&quot;</span>: <span class="string">&quot;asc&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="from，size：分页查询：Json格式"><a href="#from，size：分页查询：Json格式" class="headerlink" title="from，size：分页查询：Json格式"></a>from，size：分页查询：Json格式</h1><p>GET pm_perf_data_companymin/_search</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;query&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;match_all&quot;</span>: &#123;&#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;from&quot;</span>: <span class="number">0</span>, </span><br><span class="line">  <span class="attr">&quot;size&quot;</span>: <span class="number">20</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="source：指定返回结果字段：Json格式"><a href="#source：指定返回结果字段：Json格式" class="headerlink" title="_source：指定返回结果字段：Json格式"></a>_source：指定返回结果字段：Json格式</h1><p>GET pm_perf_data_companymin/_search</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;_source&quot;</span>: [<span class="string">&quot;COMPANYCODE&quot;</span>, <span class="string">&quot;VALUE&quot;</span>], </span><br><span class="line">  <span class="attr">&quot;query&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;match_all&quot;</span>: &#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="aggs：聚合规则：Json格式"><a href="#aggs：聚合规则：Json格式" class="headerlink" title="aggs：聚合规则：Json格式"></a>aggs：聚合规则：Json格式</h1><h2 id="分组"><a href="#分组" class="headerlink" title="分组"></a>分组</h2><p>GET pm_perf_data_companymin/_search</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;query&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;match_all&quot;</span>: &#123;&#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;aggs&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;companycode_group&quot;</span>: &#123;   <span class="comment">// 分组名，接收结果的时候用到，随意命名</span></span><br><span class="line">      <span class="attr">&quot;terms&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;field&quot;</span>: <span class="string">&quot;COMPANYCODE&quot;</span>   <span class="comment">// 分组字段</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;size&quot;</span>:<span class="number">0</span>  <span class="comment">//不显示原始数据，只查询分组数据</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="平均值"><a href="#平均值" class="headerlink" title="平均值"></a>平均值</h2><p>GET pm_perf_data_companymin/_search</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;query&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;match_all&quot;</span>: &#123;&#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;aggs&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;avg_value&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;avg&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;field&quot;</span>: <span class="string">&quot;VALUE&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;size&quot;</span>:<span class="number">0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="求和"><a href="#求和" class="headerlink" title="求和"></a>求和</h2><p>GET pm_perf_data_companymin/_search</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;query&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;match_all&quot;</span>: &#123;&#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;aggs&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;sum_value&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;sum&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;field&quot;</span>: <span class="string">&quot;VALUE&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;size&quot;</span>:<span class="number">0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="分组后求和"><a href="#分组后求和" class="headerlink" title="分组后求和"></a>分组后求和</h2><p>GET pm_perf_data_companymin/_search</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">GET pm_perf_data_companymin/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;query&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;match_all&quot;</span>: &#123;&#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;aggs&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;companycode_group&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;terms&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;field&quot;</span>: <span class="string">&quot;COMPANYCODE&quot;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">&quot;aggs&quot;</span>: &#123;</span><br><span class="line">           <span class="attr">&quot;sum_value&quot;</span>: &#123;</span><br><span class="line">              <span class="attr">&quot;sum&quot;</span>: &#123;</span><br><span class="line">                <span class="attr">&quot;field&quot;</span>: <span class="string">&quot;VALUE&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;size&quot;</span>:<span class="number">0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="映射关系-mapping"><a href="#映射关系-mapping" class="headerlink" title="映射关系 mapping"></a>映射关系 mapping</h1><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;mapping&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;properties&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;COMPANYCODE&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;keyword&quot;</span>  <span class="comment">// 分词是不能用的 要全匹配</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">&quot;FRESHTIME&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;date&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;format&quot;</span>: <span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">&quot;ITEM_CODE&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;text&quot;</span>     <span class="comment">//可以被分词</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">&quot;ITEM_PARA&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;keyword&quot;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">&quot;RECORD_TIME&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;date&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;format&quot;</span>: <span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">&quot;VALUE&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;double&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;index&quot;</span>:fasle  <span class="comment">// 不能作为查询条件</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>应用框架</category>
        <category>搜索引擎</category>
        <category>ElasticSearch</category>
      </categories>
      <tags>
        <tag>ElasticSearch</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker 部署 MySQL</title>
    <url>/2021/08/22/Docker%E9%83%A8%E7%BD%B2Mysql/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -p 3306:3306 --name mysql \</span><br><span class="line">--network host \</span><br><span class="line">-v /usr/<span class="built_in">local</span>/docker/mysql/conf:/etc/mysql \</span><br><span class="line">-v /usr/<span class="built_in">local</span>/docker/mysql/logs:/var/<span class="built_in">log</span>/mysql \</span><br><span class="line">-v /usr/<span class="built_in">local</span>/docker/mysql/data:/var/lib/mysql \</span><br><span class="line">-e MYSQL_ROOT_PASSWORD=sfibsdfbasfbiu~ \</span><br><span class="line">-d mysql:5.7</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>编程基础</category>
        <category>数据库/SQL</category>
        <category>安装MySQL</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>Feign性能优化</title>
    <url>/2021/08/22/Feign%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h1><p>Feign在默认情况下使用的是JDK原生URLConnection发送HTTP请求，没有连接池，每次发送请求的时候，都会创建新的HttpURLConnection 链接，使用Apache HttpClient 或者OkHttp3等基于连接池的高性能Http客户端可以解决掉这个问题</p>
<h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><h2 id="1、添加依赖"><a href="#1、添加依赖" class="headerlink" title="1、添加依赖"></a>1、添加依赖</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.github.openfeign<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>feign-okhttp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="2、配置OkHttpClient和ConnectionPool"><a href="#2、配置OkHttpClient和ConnectionPool" class="headerlink" title="2、配置OkHttpClient和ConnectionPool"></a>2、配置OkHttpClient和ConnectionPool</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* okhttp3 连接池配置</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> connectionPoolFactory 链接池配置</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> httpClientProperties httpClient配置</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean(&#123;ConnectionPool.class&#125;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ConnectionPool <span class="title">httpClientConnectionPool</span><span class="params">(FeignHttpClientProperties httpClientProperties, OkHttpClientConnectionPoolFactory connectionPoolFactory)</span> </span>&#123;</span><br><span class="line">    Integer maxTotalConnections = httpClientProperties.getMaxConnections();</span><br><span class="line">    Long timeToLive = httpClientProperties.getTimeToLive();</span><br><span class="line">    TimeUnit ttlUnit = httpClientProperties.getTimeToLiveUnit();</span><br><span class="line">    <span class="keyword">return</span> connectionPoolFactory.create(maxTotalConnections, timeToLive, ttlUnit);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 配置 OkHttpClient</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> httpClientFactory</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> connectionPool</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> httpClientProperties</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean(&#123;OkHttpClient.class&#125;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> OkHttpClient <span class="title">httpClient</span><span class="params">(OkHttpClientFactory httpClientFactory, ConnectionPool connectionPool, FeignHttpClientProperties httpClientProperties)</span> </span>&#123;</span><br><span class="line">    Boolean followRedirects = httpClientProperties.isFollowRedirects();</span><br><span class="line">    Integer connectTimeout = httpClientProperties.getConnectionTimeout();</span><br><span class="line">    <span class="keyword">return</span> httpClientFactory</span><br><span class="line">        .createBuilder(httpClientProperties.isDisableSslValidation())</span><br><span class="line">        <span class="comment">// 设置连接超时</span></span><br><span class="line">        .connectTimeout(connectTimeout, TimeUnit.MILLISECONDS)</span><br><span class="line">        <span class="comment">// 设置读超时</span></span><br><span class="line">        .writeTimeout(<span class="number">30L</span>, TimeUnit.SECONDS)</span><br><span class="line">        <span class="comment">// 设置写超时</span></span><br><span class="line">        .readTimeout(<span class="number">30L</span>, TimeUnit.SECONDS)</span><br><span class="line">        <span class="comment">// 设置是否自动重连</span></span><br><span class="line">        .retryOnConnectionFailure(<span class="keyword">true</span>)</span><br><span class="line">        <span class="comment">// 设置是否自动处理重定向</span></span><br><span class="line">        .followRedirects(followRedirects)</span><br><span class="line">        <span class="comment">// 设置连接池</span></span><br><span class="line">        .connectionPool(connectionPool)</span><br><span class="line">        <span class="comment">// 拦截器</span></span><br><span class="line">        .addInterceptor(<span class="keyword">new</span> OkHttpLogInterceptor())</span><br><span class="line">        .build();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="3、开启okhhtp"><a href="#3、开启okhhtp" class="headerlink" title="3、开启okhhtp"></a>3、开启okhhtp</h2><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">feign:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">config:</span></span><br><span class="line">      <span class="attr">default:</span></span><br><span class="line">        <span class="attr">connectTimeout:</span> <span class="number">5000</span></span><br><span class="line">        <span class="attr">readTimeout:</span> <span class="number">5000</span></span><br><span class="line">        <span class="attr">loggerLevel:</span> <span class="string">basic</span></span><br><span class="line">  <span class="attr">hystrix:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">okhttp:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">compression:</span></span><br><span class="line">    <span class="attr">request:</span></span><br><span class="line">      <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">response:</span> <span class="comment">#设置返回值后，接受参数要改一下。</span></span><br><span class="line">      <span class="attr">enabled:</span> <span class="literal">true</span> </span><br></pre></td></tr></table></figure>

<h2 id=""><a href="#" class="headerlink" title=""></a></h2>]]></content>
      <categories>
        <category>应用框架</category>
        <category>分布式/微服务</category>
        <category>服务调用/负载均衡</category>
        <category>Feign</category>
      </categories>
      <tags>
        <tag>Feign</tag>
        <tag>okhttp</tag>
      </tags>
  </entry>
  <entry>
    <title>Feign配置超时时间、日志</title>
    <url>/2021/08/22/Feign%E9%85%8D%E7%BD%AE%E8%B6%85%E6%97%B6%E6%97%B6%E9%97%B4%E3%80%81%E6%97%A5%E5%BF%97/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="超时时间"><a href="#超时时间" class="headerlink" title="超时时间"></a>超时时间</h1><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">feign:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">config:</span></span><br><span class="line">      <span class="attr">default:</span></span><br><span class="line">        <span class="comment"># 连接超时时间</span></span><br><span class="line">        <span class="attr">connectTimeout:</span> <span class="number">5000</span></span><br><span class="line">        <span class="comment"># 读超时时间</span></span><br><span class="line">        <span class="attr">readTimeout:</span> <span class="number">5000</span></span><br></pre></td></tr></table></figure>

<h1 id="日志"><a href="#日志" class="headerlink" title="日志"></a>日志</h1><h2 id="日志级别"><a href="#日志级别" class="headerlink" title="日志级别"></a>日志级别</h2><ul>
<li>NONE:不记录任何日志（默认值）</li>
<li>BASIC:仅记录请求方法，URL,相应状态码以及执行时间</li>
<li>HEADERS:记录BASIC级别的基础上，记录请求和响应的header</li>
<li>FULL:记录请求和响应的header，body和元数据</li>
</ul>
<h2 id="全局日志"><a href="#全局日志" class="headerlink" title="全局日志"></a>全局日志</h2><h3 id="配置文件方式"><a href="#配置文件方式" class="headerlink" title="配置文件方式"></a>配置文件方式</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">feign:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">config:</span></span><br><span class="line">      <span class="attr">default:</span></span><br><span class="line">        <span class="comment"># 日志级别</span></span><br><span class="line">        <span class="attr">loggerLevel:</span> <span class="string">basic</span></span><br></pre></td></tr></table></figure>

<h3 id="java代码方式"><a href="#java代码方式" class="headerlink" title="java代码方式"></a>java代码方式</h3><p>1、@EnableFeignClients注解上配置defaultConfiguration</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@EnableFeignClients(defaultConfiguration = GlobalFeignConfiguration.class)</span><br></pre></td></tr></table></figure>

<p>2、定义GlobalFeignConfiguration类，此类也不需要@Configuration注解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GlobalFeignConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    Logger.<span class="function">Level <span class="title">feignLoggerLevel</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Logger.Level.FULL;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>3、配置文件application.yml中需配置日志级别方能打印出Feign调用的日志信息</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">level:</span></span><br><span class="line">    <span class="attr">com.cfs:</span> <span class="string">debug</span></span><br></pre></td></tr></table></figure>

<h2 id="微服务日志"><a href="#微服务日志" class="headerlink" title="微服务日志"></a>微服务日志</h2><h3 id="配置文件方式-1"><a href="#配置文件方式-1" class="headerlink" title="配置文件方式"></a>配置文件方式</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">level:</span></span><br><span class="line">   <span class="comment">#com.cfs.client.api.feign.IClientClient: debug</span></span><br><span class="line">    <span class="attr">com.cfs:</span> <span class="string">debug</span></span><br><span class="line"></span><br><span class="line"><span class="attr">feign:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">config:</span></span><br><span class="line">      <span class="comment"># 要调用服务的名称</span></span><br><span class="line">      <span class="attr">cfs-user:</span></span><br><span class="line">        <span class="attr">loggerLevel:</span> <span class="string">full</span></span><br></pre></td></tr></table></figure>

<h3 id="java代码方式-1"><a href="#java代码方式-1" class="headerlink" title="java代码方式"></a>java代码方式</h3><p>1、在Feign接口注解上面配置configuration</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@FeignClient(value = &quot;user-center&quot;, configuration = UserCenterFeignConfiguration.class)</span></span><br></pre></td></tr></table></figure>

<p>2、定义configuration内容，<strong>注意</strong>：此类不需要@Configuration注解，否则会被所有的FeignClient共享，如果添加了注解，则需要将此类放到启动时扫描不到的包</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserCenterFeignConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    Logger.<span class="function">Level <span class="title">feignLoggerLevel</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">// 设置日志</span></span><br><span class="line">        <span class="keyword">return</span> Logger.Level.FULL;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>3、将Feign的全路径在application.yml中配置 </p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">level:</span></span><br><span class="line">   <span class="comment">#com.cfs.client.api.feign.IClientClient: debug</span></span><br><span class="line">    <span class="attr">com.cfs:</span> <span class="string">debug</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>应用框架</category>
        <category>分布式/微服务</category>
        <category>服务调用/负载均衡</category>
        <category>Feign</category>
      </categories>
      <tags>
        <tag>Feign</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux 命令</title>
    <url>/2021/08/22/Linux%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="防火墙放行端口"><a href="#防火墙放行端口" class="headerlink" title="防火墙放行端口"></a>防火墙放行端口</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">放行端口</span></span><br><span class="line">firewall-cmd --permanent --zone=public --add-port=3306/tcp</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">关闭放行端口</span></span><br><span class="line">firewall-cmd --permanent --zone=public --remove-port=3306/tcp</span><br><span class="line"></span><br><span class="line">firewall-cmd --reload</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看端口是否放行</span></span><br><span class="line">firewall-cmd --zone=public --query-port=3306/tcp</span><br></pre></td></tr></table></figure>

<h1 id="查看所有放行的端口号"><a href="#查看所有放行的端口号" class="headerlink" title="查看所有放行的端口号"></a>查看所有放行的端口号</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">netstat -aptn</span><br></pre></td></tr></table></figure>

<h1 id="查看jar包进程"><a href="#查看jar包进程" class="headerlink" title="查看jar包进程"></a>查看jar包进程</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ps aux|grep food-item-1.0.jar</span><br></pre></td></tr></table></figure>

<h1 id="查看端口进程"><a href="#查看端口进程" class="headerlink" title="查看端口进程"></a>查看端口进程</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">lsof -i:8080</span><br></pre></td></tr></table></figure>

<h1 id="杀死进程"><a href="#杀死进程" class="headerlink" title="杀死进程"></a>杀死进程</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kill -9 pid</span><br></pre></td></tr></table></figure>

<h1 id="jar包后台运行"><a href="#jar包后台运行" class="headerlink" title="jar包后台运行"></a>jar包后台运行</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nohup java -jar food-item-1.0.jar &amp;</span><br></pre></td></tr></table></figure>

<h1 id="实时显示系统中各个进程的资源占用状况"><a href="#实时显示系统中各个进程的资源占用状况" class="headerlink" title="实时显示系统中各个进程的资源占用状况"></a>实时显示系统中各个进程的资源占用状况</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">top</span><br></pre></td></tr></table></figure>

<h1 id="查看各个进程内存占用"><a href="#查看各个进程内存占用" class="headerlink" title="查看各个进程内存占用"></a>查看各个进程内存占用</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ps aux --sort -rss  </span><br></pre></td></tr></table></figure>

<h1 id="查看文件内容"><a href="#查看文件内容" class="headerlink" title="查看文件内容"></a>查看文件内容</h1><ul>
<li>more指令 —— 分页显示文件内容<ul>
<li>空格键（space）：查看下一屏；</li>
<li>Enter键：往下滚动一行；</li>
<li>b 键：往前查看一屏；</li>
<li>q 键：退出。</li>
</ul>
</li>
<li>less指令 —— 可以向前或向后查看文件内容</li>
<li>head指令 —— 查看文件开头的内容</li>
<li>tail指令 —— 显示文件尾部的内容</li>
<li>cat指令 —— 显示文件内容</li>
</ul>
<h1 id="排查Java-CPU过高"><a href="#排查Java-CPU过高" class="headerlink" title="排查Java CPU过高"></a>排查Java CPU过高</h1><ol>
<li>top 显示进程信息，找到占用最多的进程id：pid</li>
<li>ps -mp pid -o THREAD,tid,time，再通过pid查询占用最多的线程id：tid</li>
</ol>
<ul>
<li>-m或m 　显示所有的执行绪</li>
<li>-p 指定进程识别码，并列出该进程的状况</li>
</ul>
<ol start="3">
<li>Printf “%x\n” tid，将TID转为16进制，方便在jstack中查找</li>
<li>jstack pid | grep tid（16进制） -A  30，查看进程堆栈信息</li>
</ol>
<h1 id="ps与grep"><a href="#ps与grep" class="headerlink" title="ps与grep"></a>ps与grep</h1><ul>
<li><p>ps 显示当前进程的状态</p>
<ul>
<li><p>-e    显示所有进程</p>
</li>
<li><p>-f     全格式</p>
</li>
<li><p>-a    显示所有进程（包括其他用户的进程）</p>
</li>
<li><p>-u    用户以及其他详细信息</p>
</li>
<li><p>-x    显示没有控制终端的进程</p>
</li>
</ul>
</li>
<li><p>grep 命令用于查找文件里符合条件的字符串  </p>
</li>
<li><p>ps -ef | grep java</p>
</li>
<li><p>ps -aux | grep java</p>
</li>
</ul>
]]></content>
      <categories>
        <category>研发工具</category>
        <category>Liunx系统</category>
        <category>Linux常用命令</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Kafka 安装与命令</title>
    <url>/2021/08/22/Kafka%E5%AE%89%E8%A3%85%E4%B8%8E%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="一、安装"><a href="#一、安装" class="headerlink" title="一、安装"></a>一、安装</h1><p>1、zookeeper</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -d --name zookeeper -p 2181:2181 -v /etc/localtime:/etc/localtime wurstmeister/zookeeper</span><br></pre></td></tr></table></figure>

<p>2、kafka</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run  -d --name kafka -p 9092:9092 -e KAFKA_BROKER_ID=0 -e KAFKA_ZOOKEEPER_CONNECT=172.17.0.3:2181 -e KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://192.168.15.129:9092 -e KAFKA_LISTENERS=PLAINTEXT://0.0.0.0:9092 -t --network host wurstmeister/kafka</span><br></pre></td></tr></table></figure>

<p>192.168.15.129是虚拟机ip，</p>
<p>172.17.0.3是zookeeper容器的ip</p>
<p>–network  host  主机网络模式，让kafka容器处在和虚拟机一样的网络</p>
<h1 id="二、命令"><a href="#二、命令" class="headerlink" title="二、命令"></a>二、命令</h1><p>命令在/opt/kafka_2.13-2.6.0/bin里</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 创建topic</span></span><br><span class="line">kafka-topics.sh --zookeeper 172.17.0.3 --create --topic test2 --partitions 2 --replication-factor 1</span><br><span class="line"></span><br><span class="line">kafka-topics.sh --bootstrap-server localhost:9092 --create --topic test3 --partitions 2 --replication-factor 1</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看所有的topic</span></span><br><span class="line">kafka-topics.sh --zookeeper 172.17.0.3 --list</span><br><span class="line"></span><br><span class="line">kafka-topics.sh --bootstrap-server localhost:9092 --list</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除topic</span></span><br><span class="line">kafka-topics.sh --zookeeper 172.17.0.3 --delete --topic test3</span><br><span class="line"></span><br><span class="line">kafka-topics.sh --bootstrap-server localhost:9092 --delete --topic test3</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看topic详情</span></span><br><span class="line">kafka-topics.sh --zookeeper 172.17.0.3 --describe --topic test2</span><br><span class="line"></span><br><span class="line">kafka-topics.sh --bootstrap-server localhost:9092 --describe --topic test2</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 修改分区数</span></span><br><span class="line">kafka-topics.sh --zookeeper 172.17.0.3 --alter --topic test2 --partitions 4</span><br><span class="line"></span><br><span class="line">kafka-topics.sh --bootstrap-server localhost:9092 --alter --topic test2 --partitions 6</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 创建生产者</span></span><br><span class="line">kafka-console-producer.sh --bootstrap-server localhost:9092 --topic test2</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 创建消费者</span></span><br><span class="line">kafka-console-consumer.sh --bootstrap-server localhost:9092 --topic test2</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>应用框架</category>
        <category>中间件</category>
        <category>消息队列</category>
        <category>Kafka</category>
      </categories>
      <tags>
        <tag>Kafka</tag>
        <tag>消息队列</tag>
      </tags>
  </entry>
  <entry>
    <title>RocketMQ 安装与命令</title>
    <url>/2021/08/22/RocketMQ%E5%AE%89%E8%A3%85%E4%B8%8E%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="启动步骤"><a href="#启动步骤" class="headerlink" title="启动步骤"></a>启动步骤</h1><p>1、启动Name Server</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -d -p 9876:9876 --name rmqserver -v /mydata/rocketmq/logs:/opt/logs -v /mydata/rocketmq/store:/opt/store   foxiswho/rocketmq:server-4.6.1</span><br></pre></td></tr></table></figure>

<p>2、启动Broker</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -d -p 10911:10911 -p 10909:10909\</span><br><span class="line"> --privileged=<span class="literal">true</span>\</span><br><span class="line"> --name rmqbroker\</span><br><span class="line"> --link rmqserver:namesrv\</span><br><span class="line"> -e <span class="string">&quot;NAMESRV_ADDR=namesrv:9876&quot;</span>\</span><br><span class="line"> -e <span class="string">&quot;JAVA_OPTS=-Duser.home=/opt&quot;</span>\</span><br><span class="line"> -e <span class="string">&quot;JAVA_OPT_EXT=-server -Xms128m -Xmx128m&quot;</span>\</span><br><span class="line"> -v /mydata/rocketmq/conf/broker.conf:/etc/rocketmq/broker.conf \</span><br><span class="line"> -v /mydata/rocketmq/logs:/opt/logs \</span><br><span class="line"> -v /mydata/rocketmq/store:/opt/store \</span><br><span class="line"> foxiswho/rocketmq:broker-4.6.1</span><br></pre></td></tr></table></figure>

<p>3、启动rocketmq-console-ng</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -d --name rmqconsole -p 8080:8080 --link rmqserver:namesrv\</span><br><span class="line"> -e <span class="string">&quot;JAVA_OPTS=-Drocketmq.namesrv.addr=namesrv:9876\</span></span><br><span class="line"><span class="string"> -Dcom.rocketmq.sendMessageWithVIPChannel=false&quot;</span>\</span><br><span class="line"> styletang/rocketmq-console-ng</span><br></pre></td></tr></table></figure>

<p>再通过浏览器访问<a href="http://192.168.15.129:8080/#/">http://192.168.15.129:8080/#/</a></p>
<h1 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h1><h2 id="broker-conf"><a href="#broker-conf" class="headerlink" title="broker.conf"></a>broker.conf</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 所属集群名字</span></span><br><span class="line">brokerClusterName=DefaultCluster</span><br><span class="line"></span><br><span class="line"><span class="comment"># broker 名字，注意此处不同的配置文件填写的不一样，如果在 broker-a.properties 使用: broker-a,</span></span><br><span class="line"><span class="comment"># 在 broker-b.properties 使用: broker-b</span></span><br><span class="line">brokerName=broker-a</span><br><span class="line"></span><br><span class="line"><span class="comment"># 0 表示 Master，&gt; 0 表示 Slave</span></span><br><span class="line">brokerId=0</span><br><span class="line"></span><br><span class="line"><span class="comment"># nameServer地址，分号分割</span></span><br><span class="line"><span class="comment"># namesrvAddr=rocketmq-nameserver1:9876;rocketmq-nameserver2:9876</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动IP,如果 docker 报 com.alibaba.rocketmq.remoting.exception.RemotingConnectException: connect to &lt;192.168.0.120:10909&gt; failed</span></span><br><span class="line"><span class="comment"># 解决方式1 加上一句 producer.setVipChannelEnabled(false);，解决方式2 brokerIP1 设置宿主机IP，不要使用docker 内部IP</span></span><br><span class="line"><span class="comment"># brokerIP1=192.168.0.253</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在发送消息时，自动创建服务器不存在的topic，默认创建的队列数</span></span><br><span class="line"><span class="comment"># defaultTopicQueueNums=4</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 是否允许 Broker 自动创建 Topic，建议线下开启，线上关闭 ！！！这里仔细看是 false，false，false</span></span><br><span class="line"><span class="comment"># autoCreateTopicEnable=true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 是否允许 Broker 自动创建订阅组，建议线下开启，线上关闭</span></span><br><span class="line"><span class="comment"># autoCreateSubscriptionGroup=true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Broker 对外服务的监听端口</span></span><br><span class="line"><span class="comment"># listenPort=10911</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除文件时间点，默认凌晨4点</span></span><br><span class="line">deleteWhen=04</span><br><span class="line"></span><br><span class="line"><span class="comment"># 文件保留时间，默认48小时</span></span><br><span class="line">fileReservedTime=48</span><br><span class="line"></span><br><span class="line"><span class="comment"># commitLog 每个文件的大小默认1G</span></span><br><span class="line"><span class="comment"># mapedFileSizeCommitLog=1073741824</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ConsumeQueue 每个文件默认存 30W 条，根据业务情况调整</span></span><br><span class="line"><span class="comment"># mapedFileSizeConsumeQueue=300000</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># destroyMapedFileIntervalForcibly=120000</span></span><br><span class="line"><span class="comment"># redeleteHangedFileInterval=120000</span></span><br><span class="line"><span class="comment"># 检测物理文件磁盘空间</span></span><br><span class="line"><span class="comment"># diskMaxUsedSpaceRatio=88</span></span><br><span class="line"><span class="comment"># 存储路径</span></span><br><span class="line"><span class="comment"># storePathRootDir=/home/ztztdata/rocketmq-all-4.1.0-incubating/store</span></span><br><span class="line"><span class="comment"># commitLog 存储路径</span></span><br><span class="line"><span class="comment"># storePathCommitLog=/home/ztztdata/rocketmq-all-4.1.0-incubating/store/commitlog</span></span><br><span class="line"><span class="comment"># 消费队列存储</span></span><br><span class="line"><span class="comment"># storePathConsumeQueue=/home/ztztdata/rocketmq-all-4.1.0-incubating/store/consumequeue</span></span><br><span class="line"><span class="comment"># 消息索引存储路径</span></span><br><span class="line"><span class="comment"># storePathIndex=/home/ztztdata/rocketmq-all-4.1.0-incubating/store/index</span></span><br><span class="line"><span class="comment"># checkpoint 文件存储路径</span></span><br><span class="line"><span class="comment"># storeCheckpoint=/home/ztztdata/rocketmq-all-4.1.0-incubating/store/checkpoint</span></span><br><span class="line"><span class="comment"># abort 文件存储路径</span></span><br><span class="line"><span class="comment"># abortFile=/home/ztztdata/rocketmq-all-4.1.0-incubating/store/abort</span></span><br><span class="line"><span class="comment"># 限制的消息大小</span></span><br><span class="line"><span class="comment"># maxMessageSize=65536</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># flushCommitLogLeastPages=4</span></span><br><span class="line"><span class="comment"># flushConsumeQueueLeastPages=2</span></span><br><span class="line"><span class="comment"># flushCommitLogThoroughInterval=10000</span></span><br><span class="line"><span class="comment"># flushConsumeQueueThoroughInterval=60000</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Broker 的角色</span></span><br><span class="line"><span class="comment"># - ASYNC_MASTER 异步复制Master</span></span><br><span class="line"><span class="comment"># - SYNC_MASTER 同步双写Master</span></span><br><span class="line"><span class="comment"># - SLAVE</span></span><br><span class="line">brokerRole=ASYNC_MASTER</span><br><span class="line"></span><br><span class="line"><span class="comment"># 刷盘方式</span></span><br><span class="line"><span class="comment"># - ASYNC_FLUSH 异步刷盘</span></span><br><span class="line"><span class="comment"># - SYNC_FLUSH 同步刷盘</span></span><br><span class="line">flushDiskType=ASYNC_FLUSH</span><br><span class="line"></span><br><span class="line"><span class="comment"># 发消息线程池数量</span></span><br><span class="line"><span class="comment"># sendMessageThreadPoolNums=128</span></span><br><span class="line"><span class="comment"># 拉消息线程池数量</span></span><br><span class="line"><span class="comment"># pullMessageThreadPoolNums=128</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>应用框架</category>
        <category>中间件</category>
        <category>消息队列</category>
        <category>RocketMQ</category>
      </categories>
      <tags>
        <tag>消息队列</tag>
        <tag>RocketMQ</tag>
      </tags>
  </entry>
  <entry>
    <title>laas，PaaS，SaaS的区别</title>
    <url>/2021/08/22/laas%EF%BC%8CPaaS%EF%BC%8CSaaS%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><ul>
<li><p>IaaS（基础设施即服务）</p>
<ul>
<li>优势：灵活，自己搭建程序运行环境，除了操作系统，什么都没装，可以安装软件</li>
<li>缺点：需要自己配置</li>
<li>实现：阿里云服务器ECS</li>
</ul>
</li>
<li><p>PaaS（平台即服务）</p>
<ul>
<li>优势：不需要自己做环境配置，提供一个现成的运行时环境</li>
<li>缺点：必须使用指定的开发语言，遵循平台的开发规范</li>
<li>实现：阿里企业级分布式应用服务 EDAS</li>
</ul>
</li>
<li><p>以上两个都是云服务器</p>
</li>
<li><p>SaaS（软件即服务）：一个完整的产品了，比如Office365</p>
</li>
<li><p>SaaS也包含多租户的含义</p>
</li>
</ul>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>laas</tag>
        <tag>PaaS</tag>
        <tag>SaaS</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2021/08/19/hello-world/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo 相关操作</title>
    <url>/2021/08/21/hexo%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h1><h2 id="1、安装node-js"><a href="#1、安装node-js" class="headerlink" title="1、安装node.js"></a>1、安装node.js</h2><p>node.js官网：<a href="https://nodejs.org/zh-cn/">https://nodejs.org/zh-cn/</a></p>
<h2 id="2、全局安装cnpm"><a href="#2、全局安装cnpm" class="headerlink" title="2、全局安装cnpm"></a>2、全局安装cnpm</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g cnpm --registry=http://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>

<p>Win10 需要管理员打开 PowerShell</p>
<p>将cnpm添加到系统变量，cmd窗口输入cnpm -v 出现版本号，即安装成功</p>
<h2 id="3、安装hexo-cli"><a href="#3、安装hexo-cli" class="headerlink" title="3、安装hexo-cli"></a>3、安装hexo-cli</h2><p>Win10 需要管理员打开 PowerShell，执行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cnpm install -g hexo-cli</span><br></pre></td></tr></table></figure>

<p>如果出现cnpm : 无法加载文件D:\nodejs\node_global\cnpm.ps1,因为在此系统上禁止运行，执行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">set-ExecutionPolicy RemoteSigned</span><br></pre></td></tr></table></figure>

<p>执行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo -v</span><br></pre></td></tr></table></figure>

<p>出现版本号，即可代表安装成功</p>
<h1 id="搭建博客"><a href="#搭建博客" class="headerlink" title="搭建博客"></a>搭建博客</h1><ol>
<li>新建空文件夹hexo，如果博客搭建出错，删掉文件夹重来就是了</li>
<li>在文件夹下，执行 hexo init 命令初始化</li>
<li>执行 hexo s 启动博客</li>
<li>访问 <a href="http://localhost:4000/">http://localhost:4000/</a> 出现页面即代表成功</li>
</ol>
<h1 id="写文章"><a href="#写文章" class="headerlink" title="写文章"></a>写文章</h1><p>执行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo new <span class="string">&quot;文章名&quot;</span></span><br></pre></td></tr></table></figure>

<p>就会在hexo/source/_posts 目录下生成对应的md文件</p>
<p>再执行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo server</span><br></pre></td></tr></table></figure>

<h1 id="推送到gitee上"><a href="#推送到gitee上" class="headerlink" title="推送到gitee上"></a>推送到gitee上</h1><p>1、在gitee上新建仓库，仓库名必须是昵称.gitee.io</p>
<p>2、安装git部署工具</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cnpm install --save hexo-deployer-git</span><br></pre></td></tr></table></figure>

<p>3、编辑_config.yml文件</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">https://gitee.com/chenhaodabai/relieved.gitee.io.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure>

<p>4、执行</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure>

<p>5、访问  <a href="https://chcodelearner.github.io/">https://chcodelearner.github.io/</a>  </p>
<h1 id="切换主题"><a href="#切换主题" class="headerlink" title="切换主题"></a>切换主题</h1><p>hexo目录下，执行</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/Shen-Yu/hexo-theme-ayer.git themes/ayer</span><br></pre></td></tr></table></figure>

<p>编辑_config.yml，theme: ayer</p>
<h1 id="安装搜索插件"><a href="#安装搜索插件" class="headerlink" title="安装搜索插件"></a>安装搜索插件</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-searchdb</span><br></pre></td></tr></table></figure>

<h1 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h1><h3 id="创建一篇新博客"><a href="#创建一篇新博客" class="headerlink" title="创建一篇新博客"></a>创建一篇新博客</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="启动服务器"><a href="#启动服务器" class="headerlink" title="启动服务器"></a>启动服务器</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<h3 id="生成静态文件"><a href="#生成静态文件" class="headerlink" title="生成静态文件"></a>生成静态文件</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<h3 id="推送到远端"><a href="#推送到远端" class="headerlink" title="推送到远端"></a>推送到远端</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>微服务代理模式的区别</title>
    <url>/2021/08/22/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="模式一：传统集中式代理"><a href="#模式一：传统集中式代理" class="headerlink" title="模式一：传统集中式代理"></a>模式一：传统集中式代理</h1><p>实现：</p>
<ul>
<li>硬件负载均衡器(如F5)</li>
<li>软件负载均衡器(如Nginx)</li>
<li>F5(4层负载)+Nginx(7层负载)软硬结合</li>
</ul>
<p>服务注册(建立服务域名和IP地址之间的映射关系)一般由运维人员在代理上手工配置，服务消费方仅依赖服务域名，这个域名指向代理，</p>
<p>由代理解析目标地址并做负载均衡和调用</p>
<p>好处：集中治理，应用不侵入，语言栈无关，运维开销小</p>
<p>坏处：有单点问题和性能问题</p>
<h1 id="模式二：客户端嵌入式代理"><a href="#模式二：客户端嵌入式代理" class="headerlink" title="模式二：客户端嵌入式代理"></a>模式二：客户端嵌入式代理</h1><p>实现：</p>
<ul>
<li>Eureka+Ribbon</li>
<li>Nacos+Dubbo</li>
</ul>
<p>需要独立的服务注册中心组件配合，服务启动时自动注册到注册中心并定期报心跳，客户端代理则发现服务并做负载均衡</p>
<p>缺点：</p>
<p>1.并非完全透明：程序员们仍然需要正确理解和使用这些库，上手成本和出错概率依然很高。</p>
<p>2.限制技术选择：使用这些技术后，应用很容易就会被对应的语言和框架强绑定。</p>
<p>3.维护成本高：依赖库版本兼容问题，同时库版本升级，需要牵连应用一起重新构建和部署。</p>
<h1 id="模式三：主机独立进程代理：服务网格Service-Mesh"><a href="#模式三：主机独立进程代理：服务网格Service-Mesh" class="headerlink" title="模式三：主机独立进程代理：服务网格Service Mesh"></a>模式三：主机独立进程代理：服务网格Service Mesh</h1><p>将分布式服务的通信抽象为单独一层，在这一层中实现负载均衡、服务发现、认证授权、监控追踪、流量控制等分布式系统所需要的功能，作为一个和服务对等的代理服务，和服务部署在一起，接管服务的流量，通过代理之间的通信间接完成服务之间的通信请求</p>
<p>数据平面（负责服务发现，负载均衡，动态路由，容错限流，监控，日志）</p>
<p>控制平面（集中配置管理数据平面）</p>
<p>实现：</p>
<p>Istio组件：</p>
<ul>
<li>Envoy（数据平面核心组件）</li>
<li>Pilot（控制平面核心组件)：为Envoy提供服务发现、智能路由（A/B测试，灰度发布)、弹性管理（超时，重试，断路策略)</li>
<li>Mixer：和Envoy通讯，实时各种策略，收集各种数据（比如访问控制，限速，日志，监控，追踪）</li>
<li>Citadel：终端用户身份认证，以及服务到服务的访问控制</li>
<li>Galley：配置获取、校验、处理、分发</li>
</ul>
<p>前提条件：</p>
<p>一是要考虑如何把sidecar与应用部署在一起</p>
<p>二是考虑业务进程或sidecar进程一方需要升级重启时如何协同来保证请求的正常处理或转发，即优雅上下线的问题。</p>
<p>kubernetes容器调度平台的实施是servicemesh的前提条件</p>
<p>坏处：</p>
<p>1.以代理模式转发请求，一定程度上会降低通信系统性能，并增加系统资源开销；</p>
]]></content>
      <categories>
        <category>应用框架</category>
        <category>分布式/微服务</category>
        <category>服务调用/负载均衡</category>
        <category>其他</category>
      </categories>
      <tags>
        <tag>代理</tag>
        <tag>微服务</tag>
      </tags>
  </entry>
  <entry>
    <title>微服务授权方式区别</title>
    <url>/2021/08/22/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%8E%88%E6%9D%83%E6%96%B9%E5%BC%8F%E5%8C%BA%E5%88%AB/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><ul>
<li>网关授权<ul>
<li>实现：基于路径匹配授权</li>
<li>优点：<ul>
<li>微服务不需要再依赖权限模块</li>
<li>灵活，可以更改接口与角色的关联关系</li>
</ul>
</li>
<li>缺点：<ul>
<li>通配符匹配性能差</li>
<li>对于Restful风格的URL路径，不能精细化控制权限<ul>
<li>例如</li>
<li>GET /v1/pb/user</li>
<li>POST /v1/pb/user</li>
<li>PUT /v1/pb/user</li>
<li>网关都会放行</li>
<li>解决方式：<ul>
<li>在权限表加入method字段（数据太冗余了），在网关鉴权时，既要匹配url，也要匹配method，</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>微服务授权<ul>
<li>实现：基于SpringSecurity中的 <code>@PreAuthorize(&quot;hasAuthority(&#39;&#39;)&quot;)</code>注解授权，即关键字授权</li>
<li>优点：基于方法拦截是完全匹配，cpu消耗很少</li>
<li>缺点：<ul>
<li>需要引入权限模块</li>
<li>不够灵活，所需权限都写在代码里</li>
</ul>
</li>
</ul>
</li>
<li>建议<ul>
<li>模块不多采用网关授权模式，较多采用微服务授权模式</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>应用框架</category>
        <category>分布式/微服务</category>
        <category>认证鉴权</category>
        <category>其他</category>
      </categories>
      <tags>
        <tag>微服务</tag>
        <tag>授权</tag>
      </tags>
  </entry>
  <entry>
    <title>微服务负载均衡模式的区别</title>
    <url>/2021/08/22/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E6%A8%A1%E5%BC%8F%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="四层代理（tcp）"><a href="#四层代理（tcp）" class="headerlink" title="四层代理（tcp）"></a>四层代理（tcp）</h1><p>把client发送的报文目标地址(原来是负载均衡设备的IP地址)，根据均衡设备设置的选择web服务器的规则修改为对应的web服务器IP地址，这样client就可以直接跟此服务器建立TCP连接并发送数据</p>
<p>客户端与服务端直连，一次连接</p>
<h1 id="七层代理（http）"><a href="#七层代理（http）" class="headerlink" title="七层代理（http）"></a>七层代理（http）</h1><p>七层负载均衡服务器起了一个反向代理服务器的作用，服务器建立一次TCP连接要三次握手，而client要访问webserver要先与七层负载设备进行三次握手后建立TCP连接，把要访问的报文信息发送给七层负载均衡；然后七层负载均衡再根据设置的均衡规则（url,参数，cookie,请求头)选择特定的webserver，然后通过三次握手与此台webserver建立TCP连接，然后webserver把需要的数据发送给七层负载均衡设备，负载均衡设备再把数据发送给client；所以，七层负载均衡设备起到了代理服务器的作用</p>
<p>客户端与代理建立一次连接<br>代理再与服务点建立连接<br>两次连接</p>
<p>四层代理性能更好<br>七层代理更灵活<br>4层代理不知道请求的具体内容。 用7层代理，可以根据请求内容(url,参数，cookie,请求头)做很多事情，比如：<br>a:动态代理：不同的url转发到不同服务器。<br>b.风控：屏蔽外网IP请求某些敏感url；根据参数屏蔽某些刷单用户。<br>c.审计：在nginx层记录请求日志。</p>
]]></content>
      <categories>
        <category>应用框架</category>
        <category>分布式/微服务</category>
        <category>服务调用/负载均衡</category>
        <category>其他</category>
      </categories>
      <tags>
        <tag>微服务</tag>
        <tag>负载均衡</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis 相关操作</title>
    <url>/2021/08/19/Redis/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="基础命令"><a href="#基础命令" class="headerlink" title="基础命令"></a><strong>基础命令</strong></h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">redis-cli   #进入终端</span><br><span class="line"></span><br><span class="line">select  3   #切换到第三个数据库，默认有16个数据库，从0到15。默认为0号数据库</span><br><span class="line">dbsize      #查看当前数据库的大小</span><br><span class="line"></span><br><span class="line">flushdb   #清除当前数据库</span><br><span class="line">flushall  #清除所有数据库</span><br><span class="line"></span><br><span class="line">set  &lt;key&gt;  &lt;value&gt;   #设值</span><br><span class="line">get  &lt;key&gt;            #获值</span><br></pre></td></tr></table></figure>

<h1 id="五大基本数据类型"><a href="#五大基本数据类型" class="headerlink" title="五大基本数据类型"></a><strong>五大基本数据类型</strong></h1><h2 id="Key"><a href="#Key" class="headerlink" title="Key"></a>Key</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">keys *                #查看数据库所有key</span><br><span class="line">exists   &lt;key&gt;        #是否存在key,存在返回1，不存在返回0</span><br><span class="line">move     &lt;key&gt;   1    #移到key到数据库1</span><br><span class="line">expire   &lt;key&gt;   10   #设置key10秒钟后过期</span><br><span class="line">ttl      &lt;key&gt;        #查看key的过期时间</span><br><span class="line">type     &lt;key&gt;        #查看key属性</span><br></pre></td></tr></table></figure>

<h2 id="String"><a href="#String" class="headerlink" title="String"></a>String</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">append   &lt;key&gt;  &lt;value&gt;    #追加字符串</span><br><span class="line">strlen   &lt;key&gt;             #查看长度</span><br><span class="line"></span><br><span class="line">incr     &lt;key&gt;        #数值+1</span><br><span class="line">decr     &lt;key&gt;        #数值-1</span><br><span class="line">incrby   &lt;key&gt;   10   #数值+10</span><br><span class="line">decrby   &lt;key&gt;   10   #数值-10</span><br><span class="line"></span><br><span class="line">getrange    &lt;key&gt;   0   3   #获取下标0-3的字符，共4个</span><br><span class="line">getrange    &lt;key&gt;   0   -1  #获取全部字符串</span><br><span class="line"></span><br><span class="line">setrange    &lt;key&gt;  1  xx   #把从下标1开始的两个字符替换为xx    下标是从0开始</span><br><span class="line"></span><br><span class="line">setex  &lt;key&gt;  30  &lt;value&gt;   #设值，并设置30秒后过期</span><br><span class="line"> </span><br><span class="line">setnx  &lt;key&gt;  &lt;value&gt;   #如果不存在则创建，如果存在则创建失败（在分布式锁经常用到）</span><br><span class="line"></span><br><span class="line">mset  &lt;key1&gt;   &lt;value1&gt;   &lt;key2&gt;   &lt;value2&gt;   &lt;key3&gt;   &lt;value3&gt;   #批量set</span><br><span class="line">mget  &lt;key1&gt;   &lt;key2&gt;   &lt;key3&gt;   #批量get</span><br><span class="line"></span><br><span class="line">msetnx  &lt;key1&gt;   &lt;value1&gt;   &lt;key2&gt;   &lt;value2&gt;   &lt;key3&gt;   &lt;value3&gt;   #批量setnx，要么都成功，要么都失败（原子性操作）</span><br><span class="line"></span><br><span class="line">#对象</span><br><span class="line">set user:1 &#123;name:zhangsan,age:3&#125;      #设置user1对象，为json字符串</span><br><span class="line"></span><br><span class="line">#这里的key是 user:&#123;id&#125;:&#123;filed&#125;</span><br><span class="line"></span><br><span class="line">mset  user:1:name zhangsan   user:1:age 3</span><br><span class="line"></span><br><span class="line">getset &lt;key&gt;  &lt;value&gt;    #如果不存在，则返回nil并设值，如果存在，则返回原来的值，设置新值</span><br></pre></td></tr></table></figure>

<blockquote>
<p>String使用场景：value除了字符串还可以是数字</p>
<ul>
<li>计数器</li>
<li>统计多单位数量   mset  mget</li>
<li>粉丝量</li>
<li>对象缓存存储</li>
</ul>
</blockquote>
<h2 id="List"><a href="#List" class="headerlink" title="List"></a>List</h2><p>可以存在重复值</p>
<p>list可以变成栈、队列、阻塞队列！</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; lpush list one     #将一个或多个值插入到头部（左）</span><br><span class="line">127.0.0.1:6379&gt; lpush list two</span><br><span class="line">127.0.0.1:6379&gt; lpush list three</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; lrange list 0 -1   #获取值    -1是获取全部</span><br><span class="line">1) &quot;three&quot;</span><br><span class="line">2) &quot;two&quot;</span><br><span class="line">3) &quot;one&quot;</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; lrange list 0 1</span><br><span class="line">1) &quot;three&quot;</span><br><span class="line">2) &quot;two&quot;</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; rpush list four    #将一个或多个值插入到底部（右）</span><br><span class="line">(integer) 4</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; lrange list 0 -1</span><br><span class="line">1) &quot;three&quot;</span><br><span class="line">2) &quot;two&quot;</span><br><span class="line">3) &quot;one&quot;</span><br><span class="line">4) &quot;four&quot;</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; lpop list     #从头部（左）取出第一个元素</span><br><span class="line">&quot;three&quot;</span><br><span class="line">127.0.0.1:6379&gt; rpop list     #从底部（右）取出最后一个元素</span><br><span class="line">&quot;four&quot;</span><br><span class="line">127.0.0.1:6379&gt; lrange list 0 -1</span><br><span class="line">1) &quot;two&quot;</span><br><span class="line">2) &quot;one&quot;</span><br><span class="line"></span><br><span class="line">lindex &lt;key&gt; 1   #获取下标1的值</span><br><span class="line">llen &lt;key&gt;       #获取长度</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; lrange list 0 -1</span><br><span class="line">1) &quot;two&quot;</span><br><span class="line">2) &quot;one&quot;</span><br><span class="line">127.0.0.1:6379&gt; lpush list two</span><br><span class="line">(integer) 3</span><br><span class="line">127.0.0.1:6379&gt; lrange list 0 -1    #可以存在重复值</span><br><span class="line">1) &quot;two&quot;</span><br><span class="line">2) &quot;two&quot;</span><br><span class="line">3) &quot;one&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; lrem list 1 one     #移除1个one</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; lrange list 0 -1</span><br><span class="line">1) &quot;two&quot;</span><br><span class="line">2) &quot;two&quot;</span><br><span class="line">127.0.0.1:6379&gt; lrem list 2  two    #移除2个two</span><br><span class="line">(integer) 2</span><br><span class="line">127.0.0.1:6379&gt; lrange list 0 -1</span><br><span class="line">(empty list or set)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; lrange list 0 -1</span><br><span class="line">1) &quot;three&quot;</span><br><span class="line">2) &quot;two&quot;</span><br><span class="line">3) &quot;one&quot;</span><br><span class="line">127.0.0.1:6379&gt; ltrim list 1 2        #从头部开始保留下标1-2的值，去除其他</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; lrange list 0 -1</span><br><span class="line">1) &quot;two&quot;</span><br><span class="line">2) &quot;one&quot;</span><br><span class="line"></span><br><span class="line">rpoplpush &lt;key&gt; &lt;newkey&gt;   #移除列表最后一个元素到新的列表头部</span><br><span class="line">exists &lt;key&gt;      #判断list是否存在</span><br><span class="line">lset &lt;key&gt; 0 &lt;value&gt;    #替换下标0的值，下标不能越界</span><br><span class="line"></span><br><span class="line">linsert &lt;key&gt; before &#x27;world&#x27; &#x27;newworld&#x27;  #在world的前面插入newworld</span><br><span class="line">linsert &lt;key&gt; after  &#x27;world&#x27; &#x27;newworld&#x27;  #在world的后面插入newworld</span><br></pre></td></tr></table></figure>

<blockquote>
<ul>
<li>list实际上是一个双向链表</li>
<li>如果key不存在，则创建，如果存在，则新增内容</li>
<li>如果已处理所有值，空链表也代表不存在！</li>
<li>在两边插入或改动值，效率最高！</li>
</ul>
</blockquote>
<p>消息排队！消息队列（Lpush Rpop）、栈（Lpush Lpop）</p>
<h2 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h2><p>值不可重复</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sadd &lt;key&gt;  &lt;value&gt;    #添加值</span><br><span class="line">smembers &lt;key&gt;         #获取值</span><br><span class="line">sismember &lt;key&gt;  &lt;value&gt;    #判断值是否存在</span><br><span class="line">scard &lt;key&gt;            #查看长度</span><br><span class="line">srem  &lt;key&gt;  &lt;value&gt;   #移除指定值</span><br><span class="line">SRANDMEMBER myset      #随机取值</span><br><span class="line">SRANDMEMBER myset  2   #随机取2个值 </span><br><span class="line">spop  &lt;key&gt;            #随机移除值</span><br><span class="line">smove  &lt;key1&gt;  &lt;key2&gt;  &lt;value&gt;   #将value从key1移动到key2 </span><br><span class="line">sdiff   &lt;key1&gt;  &lt;key2&gt;   #返回key1中不是key2的值</span><br><span class="line">sinter  &lt;key1&gt;  &lt;key2&gt;   #返回key1和key2中共同的值（交集）  共同好友</span><br><span class="line">sunion  &lt;key1&gt;  &lt;key2&gt;   #返回key1和key2所有的值（并集）</span><br></pre></td></tr></table></figure>

<p>微博，B站共同关注等</p>
<h2 id="Hash-lt-key-lt-key1-value-gt-gt"><a href="#Hash-lt-key-lt-key1-value-gt-gt" class="headerlink" title="Hash(&lt;key,&lt;key1,value&gt;&gt;)"></a>Hash(&lt;key,&lt;key1,value&gt;&gt;)</h2><p>key-map（key-（key-value））</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; hset myhash field1 zhangsan    #赋值, hset  &lt;key&gt;  &lt;field&gt; &lt;value&gt;</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; hget myhash field1             #获值</span><br><span class="line">&quot;zhangsan&quot;</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; hmset myhash field1 zhangsan field2 lisi    #批量赋值</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; hmget myhash field1 field2                  #批量取值</span><br><span class="line">1) &quot;zhangsan&quot;</span><br><span class="line">2) &quot;lisi&quot;</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; hgetall myhash                              #获取所有</span><br><span class="line">1) &quot;field1&quot;</span><br><span class="line">2) &quot;zhangsan&quot;</span><br><span class="line">3) &quot;field2&quot;</span><br><span class="line">4) &quot;lisi&quot;</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; hdel myhash field1                          #删除某一个字段</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; hgetall myhash</span><br><span class="line">1) &quot;field2&quot;</span><br><span class="line">2) &quot;lisi&quot;</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; hlen myhash                                 #获取长度</span><br><span class="line">(integer) 1</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; hexists myhash field1                       #判断是否存在</span><br><span class="line">(integer) 0</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; hkeys myhash                                #只获取key</span><br><span class="line">1) &quot;field2&quot;</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; hvals myhash                                #只获取value</span><br><span class="line">1) &quot;lisi&quot; </span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; hset myhash field3 5 </span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; hincrby myhash field3 5                     #数值+5</span><br><span class="line">(integer) 10</span><br><span class="line">127.0.0.1:6379&gt; hincrby myhash field3 -5                    #数值-5</span><br><span class="line">(integer) 5</span><br><span class="line"> </span><br><span class="line">127.0.0.1:6379&gt; hsetnx myhash field3 5               #如果存在则创建失败，如果不存在则创建成功</span><br><span class="line">(integer) 0</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>hash变更的数据user name age,尤其是用户信息之类的，经常变动的信息！</p>
<p>hash更适合对象的存储，String更适合字符串的存储</p>
<h2 id="Zset"><a href="#Zset" class="headerlink" title="Zset"></a>Zset</h2><p>有序集合，在set的基础上增加了一个值，set  k1 v1    zset k1 score1 v1</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; zadd myset 1 one                     #赋值，zadd &lt;key&gt; &lt;score&gt; &lt;value&gt;</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; zadd myset 2 two 3 three</span><br><span class="line">(integer) 2</span><br><span class="line">127.0.0.1:6379&gt; zrange myset 0 -1                    #获值</span><br><span class="line">1) &quot;one&quot; </span><br><span class="line">2) &quot;two&quot;</span><br><span class="line">3) &quot;three&quot;</span><br><span class="line"></span><br><span class="line">3) &quot;three&quot;</span><br><span class="line">127.0.0.1:6379&gt; zadd salary 2500 xiaohong</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; zadd salary 5000 zhangsan</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; zadd salary 500  lisi</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; ZRANGEBYSCORE salary -inf +inf       #排序，从负无穷到正无穷，从小到大</span><br><span class="line">1) &quot;lisi&quot;</span><br><span class="line">2) &quot;xiaohong&quot;</span><br><span class="line">3) &quot;zhangsan&quot;</span><br><span class="line">127.0.0.1:6379&gt; ZRANGEBYSCORE salary -inf +inf withscores  #排序，从负无穷到正无穷，从小到大，并输出socre</span><br><span class="line">1) &quot;lisi&quot;</span><br><span class="line">2) &quot;500&quot;</span><br><span class="line">3) &quot;xiaohong&quot;</span><br><span class="line">4) &quot;2500&quot;</span><br><span class="line">5) &quot;zhangsan&quot;</span><br><span class="line">6) &quot;5000&quot;</span><br><span class="line">127.0.0.1:6379&gt; ZRANGEBYSCORE salary -inf 2500 withscores  #排序，从负无穷到2500，从小到大，并输出socre</span><br><span class="line">1) &quot;lisi&quot;</span><br><span class="line">2) &quot;500&quot;</span><br><span class="line">3) &quot;xiaohong&quot;</span><br><span class="line">4) &quot;2500&quot;</span><br><span class="line">127.0.0.1:6379&gt; ZREVRANGEBYSCORE salary +inf -inf    #从大到小</span><br><span class="line">1) &quot;zhangsan&quot;</span><br><span class="line">2) &quot;xiaohong&quot;</span><br><span class="line">3) &quot;lisi&quot;</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; zrange salary 0 -1</span><br><span class="line">1) &quot;lisi&quot;</span><br><span class="line">2) &quot;xiaohong&quot;</span><br><span class="line">3) &quot;zhangsan&quot;</span><br><span class="line">127.0.0.1:6379&gt; zrem salary xiaohong                 #移除元素</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; zrange salary 0 -1</span><br><span class="line">1) &quot;lisi&quot;</span><br><span class="line">2) &quot;zhangsan&quot; </span><br><span class="line">127.0.0.1:6379&gt; zcard salary                         #查看长度</span><br><span class="line">(integer) 2</span><br><span class="line">127.0.0.1:6379&gt; ZREVRANGE salary 0 -1                #从大到小</span><br><span class="line">1) &quot;zhangsan&quot;</span><br><span class="line">2) &quot;lisi&quot;</span><br><span class="line">127.0.0.1:6379&gt; zadd myset 1 hello</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; zadd myset 2 world</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; zadd myset 3 zhangsan</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; zcount myset 1 3                     #1-3之前有几个值</span><br><span class="line">(integer) 3</span><br><span class="line">127.0.0.1:6379&gt; zcount myset 1 2</span><br><span class="line">(integer) 2</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>Zset  排序，存储班级成绩表，工资表排序</p>
<p>普通消息，重要消息，带权重排序</p>
<p>排行榜</p>
</blockquote>
<h1 id="三种特殊数据类型"><a href="#三种特殊数据类型" class="headerlink" title="三种特殊数据类型"></a>三种特殊数据类型</h1><h2 id="Geospatial"><a href="#Geospatial" class="headerlink" title="Geospatial"></a>Geospatial</h2><p>地理位置</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">GEOADD Sicily 13.361389 38.115556 &quot;Palermo&quot; 15.087269 37.502669 &quot;Catania&quot;  #添加</span><br><span class="line">(integer) 2</span><br><span class="line">GEODIST Sicily Palermo Catania   #返回两个给定位置之间的距离</span><br><span class="line">&quot;166274.15156960039&quot;</span><br><span class="line">GEORADIUS Sicily 15 37 100 km    #以给定的经纬度为中心，返回键包含的位置元素当中，与中心的距离不超过给定最大距离的所有位置元素。</span><br><span class="line">&quot;Catania&quot;</span><br><span class="line">GEORADIUS Sicily 15 37 200 km</span><br><span class="line">1) &quot;Palermo&quot;</span><br><span class="line">2) &quot;Catania&quot;</span><br><span class="line">GEOPOS Sicily Palermo Catania NonExisting  #从key里返回所有给定位置元素的位置（经度和纬度）</span><br><span class="line">1) 1) &quot;13.361389338970184&quot;</span><br><span class="line">   2) &quot;38.115556395496299&quot;</span><br><span class="line">2) 1) &quot;15.087267458438873&quot;</span><br><span class="line">   2) &quot;37.50266842333162&quot;</span><br><span class="line">GEORADIUSBYMEMBER Sicily Agrigento 100 km  #和 GEORADIUS 命令一样， 都可以找出位于指定范围内的元素， 但是 GEORADIUSBYMEMBER 的中心点是由给定的位置元素决定的， 而不是像 GEORADIUS 那样， 使用输入的经度和纬度来决定中心点</span><br></pre></td></tr></table></figure>

<h2 id="Bitmap"><a href="#Bitmap" class="headerlink" title="Bitmap"></a>Bitmap</h2><p>位存储0 1 </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">setbit &lt;key&gt;  &lt;offset&gt;  &lt;value&gt;   #赋值</span><br><span class="line">getbit &lt;key&gt;  &lt;offset&gt;            #获值</span><br><span class="line">bitcount &lt;key&gt;                    #统计value之和</span><br></pre></td></tr></table></figure>

<p>快速筛选 </p>
<p>统计用户信息，活跃与不活跃，登录与未登录，打卡与未打卡、疫情，感染了为1，没感染为0</p>
<p>两个状态的都可以使用Bitmap</p>
<h2 id="Hyperloglog"><a href="#Hyperloglog" class="headerlink" title="Hyperloglog"></a>Hyperloglog</h2><p>基数（不重复的元素），可以接受误差！</p>
<p>A{1，3，5，7，9} =5</p>
<p>B{2，4，6，8} =4</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">redis&gt;</span><span class="bash"> PFADD hll a b c d e f g   <span class="comment">#添加</span></span></span><br><span class="line">(integer) 1</span><br><span class="line"><span class="meta">redis&gt;</span><span class="bash"> PFCOUNT hll</span></span><br><span class="line">(integer) 7</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; PFADD h11 1 2 3</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; PFADD h12 1 2 4</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; pfcount h11 h12  #统计基数</span><br><span class="line">(integer) 4</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">redis&gt;</span><span class="bash"> PFADD hll1 foo bar zap a</span></span><br><span class="line">(integer) 1</span><br><span class="line"><span class="meta">redis&gt;</span><span class="bash"> PFADD hll2 a b c foo</span></span><br><span class="line">(integer) 1</span><br><span class="line"><span class="meta">redis&gt;</span><span class="bash"> PFMERGE hll3 hll1 hll2     <span class="comment">#合并</span></span></span><br><span class="line">OK</span><br><span class="line"><span class="meta">redis&gt;</span><span class="bash"> PFCOUNT hll3</span></span><br><span class="line">(integer) 6</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>优点：占用的内存是固定的，2^64不同的元素基数，只需要费12kb的内存！如果要从内存角度来比较，Hyperloglog是首选！</p>
<p>网页的UV（一个人访问一个网站多次，还是一个人）</p>
<p>传统的方式，set保存用户的id，然后就可以统计set中的元素数量</p>
<p>如果保存大量的用户id就会比较麻烦（占用内存）。我们的目的是计数，不是保存用户的id</p>
</blockquote>
<p>0.81%的错误率，统计UV任务可以忽略不计！</p>
<p>如果允许容错，那么一定可以使用Hyperloglog</p>
<p>如果不允许容错，就使用set或者自己的数据类型即可！</p>
<h1 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h1><p>要么同时成功，要么同时失败，原子性！</p>
<p>Redis单条命令保持原子性，但是事务不保证原子性</p>
<p>事务本质：一组命令的集合！</p>
<p>一个事务中的所有命令都会被序列化，在事务执行过程中，会按照顺序执行</p>
<p>一次性、顺序性、排他性执行一些列命令</p>
<p>Redis的事务没有隔离级别的概念</p>
<p>所有的命令在事务中，并没有直接被执行！只有发起执行命令的时候才会执行！</p>
<p>Redis的事务</p>
<ul>
<li><p>开启事务（MULTI）</p>
</li>
<li><p>命令入队</p>
</li>
<li><p>执行事务（EXEC）</p>
</li>
</ul>
<blockquote>
<p>正常执行事务</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; MULTI    #开启事务</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; set k1 v1   #命令入队</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; set k2 v2</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; get k1 </span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; EXEC     #执行事务</span><br><span class="line">1) OK</span><br><span class="line">2) OK</span><br><span class="line">3) &quot;v1&quot;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>放弃事务</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; MULTI         #开启事务</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; set k1 v1</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; set k2 v2      #命令都不会被执行</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; DISCARD        #取消事务</span><br><span class="line">OK</span><br></pre></td></tr></table></figure>

<blockquote>
<p>编译型异常（代码有问题），事务中所有的命令都不会被执行！</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; MULTI</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; set k1 v1</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; set k2 v2</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; getset k2     #错误的命令</span><br><span class="line">(error) ERR wrong number of arguments for &#x27;getset&#x27; command</span><br><span class="line">127.0.0.1:6379&gt; EXEC</span><br><span class="line">(error) EXECABORT Transaction discarded because of previous errors.</span><br></pre></td></tr></table></figure>

<blockquote>
<p>运行时异常，如果事务队列中存在语法性错误，那么执行命令时，正确的命令可以执行，错误的命令抛出异常</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; set kv v1</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; MULTI</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; incr k1                      #错误的命令抛出异常</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; set k2 v2                    #正确的命令依旧执行</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; EXEC</span><br><span class="line">1) (error) ERR value is not an integer or out of range   #虽然第一条命令报错，但其他命令可以执行</span><br><span class="line">2) OK</span><br><span class="line">127.0.0.1:6379&gt; get k2</span><br><span class="line">&quot;v2&quot;</span><br></pre></td></tr></table></figure>

<p>编译型异常：买一辆车，一买来就是坏的，肯定可以去换</p>
<p>运行时异常：买一辆车，如果在开了很久才坏，就不能去换了</p>
<blockquote>
<p>监控！Watch（面试常问）</p>
</blockquote>
<p><strong>悲观锁</strong>：</p>
<ul>
<li>认为什么时候都会出问题，无论做什么都会加锁</li>
</ul>
<p><strong>乐观锁</strong>：</p>
<ul>
<li>认为什么时候都不会出问题，所以不会上锁！更新数据的时候去判断一下，在此期间是否有人改动过数据，加一个version字段</li>
<li>获取version</li>
<li>更新的时候比较version</li>
</ul>
<blockquote>
<p>Redis测监视测试</p>
</blockquote>
<p><strong>使用watch可以当作redis的乐观锁操作！</strong></p>
<p>正常执行成功！</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; set money 100</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; set out 0</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; WATCH money     #监视money对象</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; MULTI           #事务正常结束，数据期间没有发生变动</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; DECRBY money 20</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; INCRBY out 20</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; exec</span><br><span class="line">1) (integer) 80</span><br></pre></td></tr></table></figure>



<p>客户端1</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; watch money     </span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; MULTI</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; DECRBY money 10</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; INCRBY out 10</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; exec      #在还未执行exec时，客户端2已经改变了money的值，所以执行失败</span><br><span class="line">(nil)</span><br></pre></td></tr></table></figure>

<p>客户端2</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; get money</span><br><span class="line">&quot;80&quot;</span><br><span class="line">127.0.0.1:6379&gt; set money 1000</span><br><span class="line">OK</span><br></pre></td></tr></table></figure>



<p>如何让正确执行？先解锁（unwatch），在加锁(watch)</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; UNWATCH              #如果发现事务执行失败，就先解锁</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; watch money          #再获取锁</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; MULTI</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; DECRBY money 10</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; INCRBY money 10</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; EXEC                 #比对监视的值是否发生了变化，如果没有变化就执行成功</span><br><span class="line">1) (integer) 990</span><br><span class="line">2) (integer) 1000</span><br></pre></td></tr></table></figure>

<h1 id="Springboot"><a href="#Springboot" class="headerlink" title="Springboot"></a>Springboot</h1><p>说明：在spring boot2.x之后，原来使用的jedis被替换为了lettuce</p>
<p>jedis：采用的是直连，多个线程操作的话是不安全的，如果想要避免不安全的话，要使用jedis pool连接池！更像BIO模式</p>
<p>lettuce：采用netty，实例可以在多个线程中共享，不存在线程不安全的情况！可以减少线程数量！更像NIO模式</p>
<p>源码分析：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBeaname</span> = &#123;<span class="string">&quot;redisTemplate&quot;</span>&#125;)   <span class="comment">// 如果不存在这个bean，这个类就生效</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> RedisTemplate&lt;Object, Object&gt; <span class="title">redisTemplate</span><span class="params">(RedisConnectionFactory redisConnectionFactory)</span> </span></span><br><span class="line"><span class="function">    <span class="keyword">throws</span> UnknownHostException </span>&#123;</span><br><span class="line">    <span class="comment">// 默认的RedisTemplate，没有过多的设置，redis对象都是需要序列化的</span></span><br><span class="line">    <span class="comment">// 两个泛型都是Object，Object的类型，使用需要强制转换&lt;String, Object&gt;</span></span><br><span class="line">    RedisTemplate&lt;Object, Object&gt; template = <span class="keyword">new</span> RedisTemplate();</span><br><span class="line">    template.setConnectionFactory(redisConnectionFactory);</span><br><span class="line">    <span class="keyword">return</span> template;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean</span>   <span class="comment">//由于String是redis中最常使用的类型，所以单独提出一个Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> StringRedisTemplate <span class="title">stringRedisTemplate</span><span class="params">(RedisConnectionFactory redisConnectionFactory)</span> </span></span><br><span class="line"><span class="function">    <span class="keyword">throws</span> UnknownHostException </span>&#123;</span><br><span class="line">    StringRedisTemplate template = <span class="keyword">new</span> StringRedisTemplate();</span><br><span class="line">    template.setConnectionFactory(redisConnectionFactory);</span><br><span class="line">    <span class="keyword">return</span> template;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>默认序列化方式为jdk序列化</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (defaultSerializer == <span class="keyword">null</span>) &#123;</span><br><span class="line">   defaultSerializer = <span class="keyword">new</span> JdkSerializationRedisSerializer(</span><br><span class="line">         classLoader != <span class="keyword">null</span> ? classLoader : <span class="keyword">this</span>.getClass().getClassLoader());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>1、导入依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>2、配置连接</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">spring.redis.host</span>=<span class="string">192.168.249.131</span></span><br><span class="line"><span class="meta">spring.redis.port</span>=<span class="string">6379</span></span><br></pre></td></tr></table></figure>

<p>3、测试</p>
<p>正式开发一般使用json来传递对象</p>
<p>直接传输对象会报序列化的错误，所有的对象需要序列化，继承Serializable接口</p>
<p>自定义RedisTemplate</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@SuppressWarnings(&quot;all&quot;)</span>    <span class="comment">//告诉编译器忽略指定的警告，不用在编译完成后出现警告信息</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> RedisTemplate&lt;String, Object&gt; <span class="title">redisTemplate</span><span class="params">(RedisConnectionFactory redisConnectionFactory)</span> <span class="keyword">throws</span> UnknownHostException </span>&#123;</span><br><span class="line">    RedisTemplate&lt;String, Object&gt; redisTemplate = <span class="keyword">new</span> RedisTemplate();</span><br><span class="line">    redisTemplate.setConnectionFactory(redisConnectionFactory);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//序列化配置</span></span><br><span class="line">    Jackson2JsonRedisSerializer jackson2JsonRedisSerializer = <span class="keyword">new</span> Jackson2JsonRedisSerializer(Object.class);</span><br><span class="line">    ObjectMapper om = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">    om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);</span><br><span class="line">    om.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);</span><br><span class="line">    jackson2JsonRedisSerializer.setObjectMapper(om);</span><br><span class="line">    StringRedisSerializer stringRedisSerializer = <span class="keyword">new</span> StringRedisSerializer();</span><br><span class="line">    <span class="comment">//设置序列化方式，默认为jdk序列</span></span><br><span class="line">    <span class="comment">// key采用String的序列化方式</span></span><br><span class="line">    redisTemplate.setKeySerializer(stringRedisSerializer);</span><br><span class="line">    <span class="comment">// hash的key也采用String的序列化方式</span></span><br><span class="line">    redisTemplate.setHashKeySerializer(stringRedisSerializer);</span><br><span class="line">    <span class="comment">// value序列化方式采用jackson</span></span><br><span class="line">    redisTemplate.setValueSerializer(jackson2JsonRedisSerializer);</span><br><span class="line">    <span class="comment">// hash的value序列化方式采用jackson</span></span><br><span class="line">    redisTemplate.setHashValueSerializer(jackson2JsonRedisSerializer);</span><br><span class="line">    redisTemplate.afterPropertiesSet();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> redisTemplate;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> RedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//在企业开发中，基本不会用这种原生方式   RedisUtils</span></span><br><span class="line">    <span class="comment">//opsForValue 操作 String</span></span><br><span class="line">    <span class="comment">//opsForList  操作 List</span></span><br><span class="line">    <span class="comment">//opsForHash  操作 Hash</span></span><br><span class="line">    <span class="comment">//opsForSet   操作 Set</span></span><br><span class="line">    <span class="comment">//opsForZSet  操作 ZSet</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//除了基本操作，常用的方法都可以直接通过redisTemplate来操作，比如事务和基本的CRUD</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取redis的连接对象</span></span><br><span class="line">    <span class="comment">//RedisConnection connection = redisTemplate.getConnectionFactory().getConnection();</span></span><br><span class="line">    <span class="comment">//connection.flushDb();</span></span><br><span class="line">    <span class="comment">//connection.flushAll();</span></span><br><span class="line"></span><br><span class="line">    redisTemplate.opsForValue().set(<span class="string">&quot;mykey&quot;</span>,<span class="string">&quot;中文&quot;</span>);</span><br><span class="line">    System.out.println(redisTemplate.opsForValue().get(<span class="string">&quot;mykey&quot;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="Redis-conf"><a href="#Redis-conf" class="headerlink" title="Redis.conf"></a>Redis.conf</h1><p>docker默认redis无配置文件启动，必须创建容器时添加映射</p>
<p>启动的时候就通过配置文件来启动</p>
<blockquote>
<p>单位、配置文件unit单位对大小写不敏感</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Redis configuration file example.</span><br><span class="line">#</span><br><span class="line"># Note that in order to read the configuration file, Redis must be</span><br><span class="line"># started with the file path as first argument:</span><br><span class="line">#</span><br><span class="line"># ./redis-server /path/to/redis.conf</span><br><span class="line"></span><br><span class="line"># Note on units: when memory size is needed, it is possible to specify</span><br><span class="line"># it in the usual form of 1k 5GB 4M and so forth:</span><br><span class="line">#</span><br><span class="line"># 1k =&gt; 1000 bytes</span><br><span class="line"># 1kb =&gt; 1024 bytes</span><br><span class="line"># 1m =&gt; 1000000 bytes</span><br><span class="line"># 1mb =&gt; 1024*1024 bytes</span><br><span class="line"># 1g =&gt; 1000000000 bytes</span><br><span class="line"># 1gb =&gt; 1024*1024*1024 bytes</span><br><span class="line">#</span><br><span class="line"># units are case insensitive so 1GB 1Gb 1gB are all the same.</span><br></pre></td></tr></table></figure>

<blockquote>
<p>包含，指定包含其他的配置文件，可以在同一主机上多个Redis实例之间使用同一份配置文件，而同时各实例又拥有自己的特定配置文件</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">################################## INCLUDES ###################################</span><br><span class="line"></span><br><span class="line"># Include one or more other config files here.  This is useful if you</span><br><span class="line"># have a standard template that goes to all Redis servers but also need</span><br><span class="line"># to customize a few per-server settings.  Include files can include</span><br><span class="line"># other files, so use this wisely.</span><br><span class="line">#</span><br><span class="line"># Notice option &quot;include&quot; won&#x27;t be rewritten by command &quot;CONFIG REWRITE&quot;</span><br><span class="line"># from admin or Redis Sentinel. Since Redis always uses the last processed</span><br><span class="line"># line as value of a configuration directive, you&#x27;d better put includes</span><br><span class="line"># at the beginning of this file to avoid overwriting config change at runtime.</span><br><span class="line">#</span><br><span class="line"># If instead you are interested in using includes to override configuration</span><br><span class="line"># options, it is better to use include as the last line.</span><br><span class="line">#</span><br><span class="line"># include /path/to/local.conf</span><br><span class="line"># include /path/to/other.conf</span><br></pre></td></tr></table></figure>

<blockquote>
<p>网络</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">bind</span> 127.0.0.1       <span class="comment">#绑定的ip  </span></span><br><span class="line">protected-mode yes   <span class="comment">#保护模式</span></span><br><span class="line">port 6379            <span class="comment">#端口设置</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>通用配置</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">daemonize no                        <span class="comment">#以守护进程（后台运行）方式运行，默认是no</span></span><br><span class="line">pidfile /var/run/redis_6379.pid     <span class="comment">#如果以守护进程运行，则需要指定一个pid文件</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># debug (a lot of information, useful for development/testing)       开发或测试</span></span><br><span class="line"><span class="comment"># verbose (many rarely useful info, but not a mess like the debug level)</span></span><br><span class="line"><span class="comment"># notice (moderately verbose, what you want in production probably)  生产</span></span><br><span class="line"><span class="comment"># warning (only very important / critical messages are logged)       </span></span><br><span class="line">loglevel notice                     <span class="comment">#日志级别</span></span><br><span class="line">logfile <span class="string">&quot;&quot;</span>                          <span class="comment">#日志的文件位置名</span></span><br><span class="line">databases 16                        <span class="comment">#数据库个数，默认为16</span></span><br><span class="line">always-show-logo yes                <span class="comment">#是否显示logo，默认为开启</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>快照（Redis 持久化）</p>
</blockquote>
<p>持久化，在规定的时间内执行了多少次操作则会持久化到文件.rdb  .aof</p>
<p>redis是内存数据库，如果没有持久化，那么数据断电即失</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">save 900 1        <span class="comment">#如果900秒内，至少有1个key进行了修改，那么就持久化操作</span></span><br><span class="line">save 300 10       <span class="comment">#如果300秒内，至少有10个key进行了修改，那么就持久化操作</span></span><br><span class="line">save 60 10000     <span class="comment">#如果60秒内，至少有10000个key进行了修改，那么就持久化操作</span></span><br><span class="line"></span><br><span class="line">stop-writes-on-bgsave-error yes   <span class="comment">#持久化出错了，是否还继续工作</span></span><br><span class="line">rdbcompression yes                <span class="comment">#是否压缩rdb文件，需要消耗cpu资源</span></span><br><span class="line">rdbchecksum yes                   <span class="comment">#保存rdb文件时，是否进行错误校验检查</span></span><br><span class="line">dir ./                            <span class="comment">#rdb文件保存的目录</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>复制  REPLICATION，主从复制</p>
</blockquote>
<blockquote>
<p>安全  SECURITY，可以设置密码，默认是没有密码</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">config get requirepass             #获取redis的密码</span><br><span class="line">config set requirepass &#x27;123456&#x27;    #设置密码为123456</span><br><span class="line">auth  123456                       #使用密码登录</span><br></pre></td></tr></table></figure>

<blockquote>
<p>客户端限制  CLIENTS</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">maxclients 10000                   <span class="comment">#连接redis的最大客户端的数量</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>内存管理  MEMORY MANAGEMENT</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">maxmemory &lt;bytes&gt;                  <span class="comment">#最大内存</span></span><br><span class="line">maxmemory-policy noeviction        <span class="comment">#内存达到上限后的处理策略</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在设置了过期时间的键中采用lru算法删除键，直到腾出足够内存为止。</span></span><br><span class="line"><span class="comment"># volatile-lru -&gt; Evict using approximated LRU, only keys with an expire set.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在所有键中采用lru算法删除键，直到腾出足够内存为止。</span></span><br><span class="line"><span class="comment"># allkeys-lru -&gt; Evict any key using approximated LRU.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在设置了过期时间的键中采用lfu算法删除键，直到腾出足够内存为止。</span></span><br><span class="line"><span class="comment"># volatile-lfu -&gt; Evict using approximated LFU, only keys with an expire set.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在所有键中采用lfu算法删除键，直到腾出足够内存为止。</span></span><br><span class="line"><span class="comment"># allkeys-lfu -&gt; Evict any key using approximated LFU.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在设置了过期时间的键中随机删除键，直到腾出足够内存为止。</span></span><br><span class="line"><span class="comment"># volatile-random -&gt; Remove a random key having an expire set.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在所有键中采用随机删除键，直到腾出足够内存为止。</span></span><br><span class="line"><span class="comment"># allkeys-random -&gt; Remove a random key, any key.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在设置了过期时间的键空间中，具有更早过期时间的key优先移除。</span></span><br><span class="line"><span class="comment"># volatile-ttl -&gt; Remove the key with the nearest expire time (minor TTL)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 当内存使用达到阈值的时候，所有引起申请内存的命令会报错</span></span><br><span class="line"><span class="comment"># noeviction -&gt; Don&#x27;t evict anything, just return an error on write operations.</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>APPEND  ONLY  MODE  (APPEND  ONLY模式)  aof配置</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">appendonly no                     <span class="comment">#默认不开启，默认是使用RDB方式持久化，在大部分情况下，RDB完全够用</span></span><br><span class="line">appendfilename <span class="string">&quot;appendonly.aof&quot;</span>   <span class="comment">#持久化文件名</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># appendfsync always              #每次修改都会同步，消耗性能</span></span><br><span class="line">appendfsync everysec              <span class="comment">#默认每秒执行一次，可能会丢失这一秒数据</span></span><br><span class="line"><span class="comment"># appendfsync no                  #不执行同步，这个时候操作系统自己同步，速度最快！</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 重写规则</span></span><br><span class="line">no-appendfsync-on-rewrite no</span><br><span class="line">auto-aof-rewrite-percentage 100   <span class="comment">#aof文件增长比例</span></span><br><span class="line">auto-aof-rewrite-min-size 64mb    <span class="comment">#如果aof文件大于64mb，就会fork新进程来重写文件</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="Redis主从复制"><a href="#Redis主从复制" class="headerlink" title="Redis主从复制"></a>Redis主从复制</h1><p><strong>环境配置</strong></p>
<p>只配置从库，<font color="red">Redis默认自己就是一个主库</font>。</p>
<p>docker  redis集群配置：<a href="https://www.cnblogs.com/Tu9oh0st/p/11205281.html">https://www.cnblogs.com/Tu9oh0st/p/11205281.html</a></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">启动三个容器</span></span><br><span class="line">docker run --name redis-6379 -p 6379:6379 -d redis:5.0.8</span><br><span class="line">docker run --name redis-6380 -p 6380:6379 -d redis:5.0.8</span><br><span class="line">docker run --name redis-6381 -p 6381:6379 -d redis:5.0.8</span><br><span class="line"></span><br><span class="line">docker inspect 容器id   #查看主节点redis内网ip</span><br><span class="line"></span><br><span class="line">docker exec -ti 容器ID /bin/bash #进入两个从节点容器</span><br><span class="line">redis-cli                       #进入容器后，连接redis服务端</span><br><span class="line">info replication                #查看当前机器的角色，未配置前，三台redis均为 master主机</span><br><span class="line"></span><br><span class="line">SLAVEOF 172.17.0.2 6379         #在两台从节点容器中配置主节点的ip和port</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; info replication   #在主节点中查看主从关系</span><br><span class="line"><span class="meta">#</span><span class="bash"> Replication</span></span><br><span class="line">role:master</span><br><span class="line">connected_slaves:2</span><br><span class="line">slave0:ip=172.17.0.4,port=6379,state=online,offset=1778,lag=0</span><br><span class="line">slave1:ip=172.17.0.3,port=6379,state=online,offset=1778,lag=0</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="哨兵模式（自动选取主节点）"><a href="#哨兵模式（自动选取主节点）" class="headerlink" title="哨兵模式（自动选取主节点）"></a>哨兵模式（自动选取主节点）</h1><p>docker  哨兵：<a href="https://www.cnblogs.com/Tu9oh0st/p/11205281.html">https://www.cnblogs.com/Tu9oh0st/p/11205281.html</a></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">sentinel.conf</span></span><br><span class="line"><span class="meta">#</span><span class="bash">sentinel monitor  主机名   主机ip   主机port   1</span> </span><br><span class="line">sentinel monitor host6379 172.17.0.2 6379 1     #最后的1代表主机挂了哨兵会投票选举新的主机</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">redis-sentinel /sentinel.conf    #启动哨兵模式</span><br></pre></td></tr></table></figure>



<h1 id="分布式锁"><a href="#分布式锁" class="headerlink" title="分布式锁"></a>分布式锁</h1><p>代码：</p>
<p>在SpringBoot-Redis项目里</p>
<p>问题：如果加锁成功，但主节点失效，从节点还未同步怎么办</p>
<p>1、只需要高性能的分布式锁并且不要求多高的正确性，选用redis，想要保证正确性，选择Zookeeper</p>
<p>2、更高级的分布式锁实现方式Redlock</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">RLock lock1 = redisson.getLock(<span class="string">&quot;lock1&quot;</span>);</span><br><span class="line">RLock lock2 = redisson.getLock(<span class="string">&quot;lock2&quot;</span>);</span><br><span class="line">RLock lock3 = redisson.getLock(<span class="string">&quot;lock3&quot;</span>);</span><br><span class="line"><span class="comment">//同时加锁，在大部分节点上加锁成功就算成功</span></span><br><span class="line">RedissonRedLock lock = <span class="keyword">new</span> RedissonRedLock(lock1, lock2, lock3);</span><br></pre></td></tr></table></figure>

<h1 id="以注解-Cacheable、-CachePut、-CacheEvict-形式使用redis缓存"><a href="#以注解-Cacheable、-CachePut、-CacheEvict-形式使用redis缓存" class="headerlink" title="以注解(@Cacheable、@CachePut、@CacheEvict)形式使用redis缓存"></a>以注解(@Cacheable、@CachePut、@CacheEvict)形式使用redis缓存</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableCaching</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisConfig</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">	<span class="meta">@SuppressWarnings(&#123; &quot;rawtypes&quot;, &quot;unchecked&quot; &#125;)</span></span><br><span class="line">	<span class="meta">@Bean</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> RedisTemplate <span class="title">redisTemplate</span><span class="params">(RedisConnectionFactory connectionFactory)</span> </span>&#123;</span><br><span class="line">		RedisTemplate redisTemplate = <span class="keyword">new</span> RedisTemplate&lt;&gt;();</span><br><span class="line">		redisTemplate.setConnectionFactory(connectionFactory);</span><br><span class="line"> </span><br><span class="line">		GenericJackson2JsonRedisSerializer genericJackson2JsonRedisSerializer = <span class="keyword">new</span> GenericJackson2JsonRedisSerializer();</span><br><span class="line">		StringRedisSerializer stringRedisSerializer = <span class="keyword">new</span> StringRedisSerializer();</span><br><span class="line">		redisTemplate.setKeySerializer(stringRedisSerializer);</span><br><span class="line">		redisTemplate.setValueSerializer(genericJackson2JsonRedisSerializer);</span><br><span class="line">		redisTemplate.setHashKeySerializer(stringRedisSerializer);</span><br><span class="line">		redisTemplate.setHashValueSerializer(genericJackson2JsonRedisSerializer);</span><br><span class="line">		<span class="keyword">return</span> redisTemplate;</span><br><span class="line">	&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">	<span class="comment">//2. 配置缓存使用redis</span></span><br><span class="line">	<span class="meta">@SuppressWarnings(&quot;rawtypes&quot;)</span></span><br><span class="line">	<span class="meta">@Bean</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> CacheManager <span class="title">cacheManager</span><span class="params">(RedisTemplate redisTemplate)</span> </span>&#123;</span><br><span class="line">		RedisCacheManager redisCacheManager = <span class="keyword">new</span> RedisCacheManager(redisTemplate);</span><br><span class="line">		redisCacheManager.setDefaultExpiration(<span class="number">10</span> * <span class="number">60</span>); <span class="comment">//设置缓存失效时间</span></span><br><span class="line">		<span class="keyword">return</span> redisCacheManager;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="不配置序列化的结果"><a href="#不配置序列化的结果" class="headerlink" title="不配置序列化的结果"></a>不配置序列化的结果</h1><h2 id="redisTemplate"><a href="#redisTemplate" class="headerlink" title="redisTemplate"></a>redisTemplate</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//redis存储实体类</span></span><br><span class="line">redisTemplate.opsForValue().set(<span class="string">&quot;book&quot;</span>, book);</span><br></pre></td></tr></table></figure>

<ul>
<li><p>实体类不实现Serializable接口，redis配置没配置序列化，未调用JSON.toJSONString方法：报错，实体类需要实现Serializable接口</p>
</li>
<li><p>实体类实现Serializable接口</p>
<ul>
<li><p>未配置序列化，未调用JSON.toJSONString方法：key和value，redis图形软件都看不懂，返回的是Object（即存储的value是Object），可以转为Book类</p>
</li>
<li><p>配置序列化，未调用JSON.toJSONString方法：key和value，redis都看得懂内容，内容为json格式，多了一个类型信息（com.chenhao.redis.entity.Book），返回的是Object</p>
</li>
<li><p>配置序列化，调用JSON.toJSONString方法：key和value，redis都看得懂内容，内容为String字符串（也是json格式，但压缩了），返回的是String字符串（即存储的value是String）</p>
</li>
<li><p>未配置序列化，调用JSON.toJSONString方法：key和value，redis图形软件都看不懂，返回的是String字符串</p>
<p><strong>总结：必须配置序列化，redis图形软件才可以看懂内容，JSON.toJSONString只是压缩内容，redisTemplate默认配置序列化方式的是JdkSerializationRedisSerializer（jdk序列化）</strong></p>
</li>
</ul>
</li>
</ul>
<h2 id="stringRedisTemplate"><a href="#stringRedisTemplate" class="headerlink" title="stringRedisTemplate"></a>stringRedisTemplate</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//stringRedisTemplate存的value只能是String，默认配置了序列化，</span></span><br><span class="line"><span class="comment">//this.setKeySerializer(RedisSerializer.string());</span></span><br><span class="line"><span class="comment">//this.setValueSerializer(RedisSerializer.string());</span></span><br><span class="line">String bookStr  = JSON.toJSONString(book);</span><br><span class="line">stringRedisTemplate.opsForValue().set(<span class="string">&quot;book&quot;</span>, <span class="string">&quot;哈哈&quot;</span>);</span><br></pre></td></tr></table></figure>

<ul>
<li><p>调用JSON.toJSONString方法</p>
<ul>
<li><p>实体类未实现Serializable接口，没有在redis配置里配置序列化：key和value，redis都看得懂内容，内容为String字符串（也是json格式，未压缩了，没有类型信息），返回的是String字符串（即存储的value是String）</p>
</li>
<li><p>实体类未实现Serializable接口，在redis配置里配置序列化：与上面一致</p>
<p><strong>总结：不需要配置序列化，也不需要调用JSON.toJSONString方法，redis图形软件可以看懂内容，stringRedisTemplate已经默认配置了序列化了</strong></p>
</li>
</ul>
</li>
</ul>
<h1 id="RedisSerializer"><a href="#RedisSerializer" class="headerlink" title="RedisSerializer"></a>RedisSerializer</h1><ul>
<li>Jackson2JsonRedisSerializer（看得懂）<ul>
<li>优点：速度快，序列化后的字符串短小精悍，不需要实现Serializable接口</li>
<li>缺点：多了类型信息（com.chenhao.redis.entity.Book，反序列化时需要</li>
</ul>
</li>
<li>StringRedisSerializer（看得懂）<ul>
<li>注意点：直接使用 RedisSerializer.string()，相当于使用了 UTF_8 编码的 StringRedisSerializer，需要注意字符集问题）</li>
</ul>
</li>
<li>FastJsonRedisSerializer（看得懂）</li>
<li>GenericJackson2JsonRedisSerializer<ul>
<li>缺点：多了类型信息（com.chenhao.redis.entity.Book，反序列化时需要</li>
</ul>
</li>
<li>JdkSerializationRedisSerializer（乱码）<ul>
<li>优点：反序列化时不需要提供类型信息(class)</li>
<li>缺点：需要实现Serializable接口，还有序列化后的结果非常庞大，是JSON格式的5倍左右，这样就会消耗redis服务器的大量内存</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>应用框架</category>
        <category>中间件</category>
        <category>缓存</category>
        <category>Redis</category>
      </categories>
      <tags>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>SQL 语句书写</title>
    <url>/2021/08/19/SQL%E8%AF%AD%E5%8F%A5%E4%B9%A6%E5%86%99/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="DDL：操作数据库、表"><a href="#DDL：操作数据库、表" class="headerlink" title="DDL：操作数据库、表"></a>DDL：操作数据库、表</h1><h2 id="操作数据库：CURD"><a href="#操作数据库：CURD" class="headerlink" title="操作数据库：CURD"></a>操作数据库：CURD</h2><p>C（Create）：创建</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> database 数据库名称;</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> database if <span class="keyword">not</span> <span class="keyword">exists</span> 数据库名称;  <span class="comment">--判断是否存在，不存在在创建</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> database 数据库名 <span class="type">character</span> <span class="keyword">set</span> 字符集名;  <span class="comment">--创建数据库并指定字符集名</span></span><br></pre></td></tr></table></figure>

<p>R（Retrieve）：查询</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> database;   <span class="comment">--查询所有数据库</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">show</span> <span class="keyword">create</span> database 数据库名;  <span class="comment">--查询某个数据库的创建语句</span></span><br></pre></td></tr></table></figure>

<p>U（Update）：修改</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> database 数据库名 <span class="type">character</span> <span class="keyword">set</span> 字符集名;  <span class="comment">--修改数据库字符集</span></span><br></pre></td></tr></table></figure>

<p>D（Delete）：删除</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">drop</span> database 数据库名;</span><br></pre></td></tr></table></figure>

<p>使用数据库</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> database();  <span class="comment">--查询正在使用的数据库</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">user</span> 数据库名;  <span class="comment">--使用数据库</span></span><br></pre></td></tr></table></figure>

<h2 id="操作表：CURD"><a href="#操作表：CURD" class="headerlink" title="操作表：CURD"></a>操作表：CURD</h2><p>C（Create）：创建</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> 表名(</span><br><span class="line">    列名  数据类型,</span><br><span class="line">    ...</span><br><span class="line">    列名  数据类型</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p>R（Retrieve）：查询</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> tables;   <span class="comment">--查询数据库中的所有表</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">desc</span> 表名;      <span class="comment">--查询表结构</span></span><br></pre></td></tr></table></figure>

<p>U（Update）：修改</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 rename <span class="keyword">to</span> 新表名;        <span class="comment">--修改表名</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="type">character</span> <span class="keyword">set</span> 字符集名;   <span class="comment">--修改表的字符集</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">add</span> 列名 数据类型;        <span class="comment">--添加一列</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 change 列名 新列名 新数据类型;<span class="comment">--修改列名称 类型</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 modify 列名 新数据类型;<span class="comment">--修改列数据类型</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">drop</span> 列名;<span class="comment">--删除列</span></span><br></pre></td></tr></table></figure>

<p>D（Delete）：删除</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> 表名;</span><br><span class="line"></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> if <span class="keyword">exists</span> 表名; </span><br></pre></td></tr></table></figure>

<h1 id="DML：增删改表中数据"><a href="#DML：增删改表中数据" class="headerlink" title="DML：增删改表中数据"></a>DML：增删改表中数据</h1><p>添加数据</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> 表名(列名,...,里面) <span class="keyword">values</span>(值,...,值);</span><br></pre></td></tr></table></figure>

<p>删除数据</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> 表名 [<span class="keyword">where</span> 条件];  <span class="comment">--不加条件，删除所有表中数据，不推荐使用，有多少记录就会执行多少次删除操作</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">truncate</span> <span class="keyword">table</span> 表名;   <span class="comment">--先删除表，再创建一张一样的表，如果要删除表里全部数据，推荐使用</span></span><br></pre></td></tr></table></figure>

<p>修改数据</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">update 表名 <span class="keyword">set</span> 列名 <span class="operator">=</span> 值 [<span class="keyword">where</span> 条件];</span><br></pre></td></tr></table></figure>

<h1 id="DQL：查询表中数据"><a href="#DQL：查询表中数据" class="headerlink" title="DQL：查询表中数据"></a>DQL：查询表中数据</h1><h2 id="基础查询"><a href="#基础查询" class="headerlink" title="基础查询"></a>基础查询</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">distinct</span> name <span class="keyword">from</span> student;   <span class="comment">--去重</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> english <span class="operator">+</span> math <span class="keyword">from</span> student;   <span class="comment">--计算之和，如果其中一个未null，则结果也为null</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> IFNULL(english,<span class="number">0</span>) <span class="operator">+</span> IFNULL(math,<span class="number">0</span>) <span class="keyword">from</span> student;  <span class="comment">--如果为null，则为0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> IFNULL(english,<span class="number">0</span>) <span class="operator">+</span> IFNULL(math,<span class="number">0</span>) <span class="keyword">AS</span> 总分 <span class="keyword">from</span> student;  <span class="comment">--起别名</span></span><br><span class="line"><span class="keyword">select</span> IFNULL(english,<span class="number">0</span>) <span class="operator">+</span> IFNULL(math,<span class="number">0</span>) 总分 <span class="keyword">from</span> student;     <span class="comment">--起别名</span></span><br></pre></td></tr></table></figure>

<h2 id="条件查询"><a href="#条件查询" class="headerlink" title="条件查询"></a>条件查询</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> student <span class="keyword">where</span> age <span class="operator">!=</span> <span class="number">20</span>;   <span class="comment">--年龄不等于20</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> student <span class="keyword">where</span> age <span class="operator">&lt;&gt;</span> <span class="number">20</span>;   <span class="comment">--年龄不等于20</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> student <span class="keyword">where</span> age <span class="operator">&gt;=</span> <span class="number">20</span> <span class="operator">&amp;&amp;</span> age <span class="operator">&lt;=</span> <span class="number">30</span>;   <span class="comment">--年龄大于等于20且小于等于30</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> student <span class="keyword">where</span> age <span class="operator">&gt;=</span> <span class="number">20</span> <span class="keyword">AND</span> age <span class="operator">&lt;=</span> <span class="number">30</span>;  <span class="comment">--年龄大于等于20且小于等于30</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> student <span class="keyword">where</span> age <span class="keyword">BETWEEN</span> <span class="number">20</span> <span class="keyword">AND</span> <span class="number">30</span>;    <span class="comment">--年龄大于等于20且小于等于30</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> student <span class="keyword">where</span> age <span class="operator">=</span> <span class="number">20</span> <span class="keyword">or</span> age <span class="operator">=</span> <span class="number">30</span>;  <span class="comment">--年龄等于20或30</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> student <span class="keyword">where</span> age <span class="keyword">in</span> (<span class="number">20</span>,<span class="number">30</span>);        <span class="comment">--年龄等于20或30</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> student <span class="keyword">where</span> age <span class="keyword">is</span> <span class="keyword">null</span>;           <span class="comment">--年龄为null</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> student <span class="keyword">where</span> age <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">null</span>;       <span class="comment">--年龄不为null</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">like</span>  _:单个任意字符  <span class="operator">%</span>:多个任意字符</span><br></pre></td></tr></table></figure>

<h2 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> 字段 [ASE<span class="operator">/</span><span class="keyword">DESC</span>];  <span class="comment">--ASC升序，默认；DESC降序</span></span><br></pre></td></tr></table></figure>

<h2 id="聚合函数：将一列数据作为一个整体，进行纵向的计算"><a href="#聚合函数：将一列数据作为一个整体，进行纵向的计算" class="headerlink" title="聚合函数：将一列数据作为一个整体，进行纵向的计算"></a>聚合函数：将一列数据作为一个整体，进行纵向的计算</h2><ul>
<li><p>count：计算个数</p>
</li>
<li><p>max：计算最大值</p>
</li>
<li><p>min：计算最小值</p>
</li>
<li><p>sum：计算和</p>
</li>
<li><p>avg：计算平均值</p>
<p><strong>聚合函数计算会排除null值</strong></p>
<p>解决方法：</p>
<ol>
<li>选择不包含非空的列计算：主键</li>
<li>IFNULL函数</li>
</ol>
</li>
</ul>
<h2 id="分组查询"><a href="#分组查询" class="headerlink" title="分组查询"></a>分组查询</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">group by 字段名;</span><br></pre></td></tr></table></figure>

<p>where和having的区别：</p>
<ol>
<li>where是在分组前进行限定，如果不满足条件，则不参与分组；</li>
<li>having是在分组后进行限定，如果不满足条件，则不会被查询出来；</li>
<li>where后不可以跟聚合函数，having可以进行聚合函数的判断</li>
</ol>
<h2 id="分页查询"><a href="#分页查询" class="headerlink" title="分页查询"></a>分页查询</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">limit <span class="number">0</span>,<span class="number">3</span>;  <span class="comment">--从第0条记录开始查3条记录，1，2，3</span></span><br><span class="line">limit <span class="number">3</span>,<span class="number">3</span>;  <span class="comment">--从第3条记录开始查3条记录，4，5，6</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--（当前页码-1）*每页显示条数，每页显示条数</span></span><br></pre></td></tr></table></figure>

<h2 id="多表查询"><a href="#多表查询" class="headerlink" title="多表查询"></a>多表查询</h2><h3 id="内连接"><a href="#内连接" class="headerlink" title="内连接"></a>内连接</h3><p>隐式内连接</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp,dept <span class="keyword">where</span> emp.dept_id <span class="operator">=</span> dept.id;</span><br></pre></td></tr></table></figure>

<p>显式内连接</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp [<span class="keyword">inner</span>] <span class="keyword">join</span> dept <span class="keyword">on</span> emp.dept_id <span class="operator">=</span> dept.id;</span><br></pre></td></tr></table></figure>

<h3 id="外连接"><a href="#外连接" class="headerlink" title="外连接"></a>外连接</h3><p>左外连接</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">left</span> [<span class="keyword">outer</span>] <span class="keyword">join</span> dept <span class="keyword">on</span> emp.dept_id <span class="operator">=</span> dept.id;</span><br></pre></td></tr></table></figure>

<p>右外连接</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">right</span> [<span class="keyword">outer</span>] <span class="keyword">join</span> dept <span class="keyword">on</span> emp.dept_id <span class="operator">=</span> dept.id;</span><br></pre></td></tr></table></figure>

<h3 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h3><p><strong>子查询结果为单行单列，使用运算符去判断</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">where</span> salary <span class="operator">=</span> (slect <span class="built_in">max</span>(salary) <span class="keyword">from</span> emp);  <span class="comment">--查询部门中工资最高的人</span></span><br></pre></td></tr></table></figure>

<p>子查询结果为多行单列，使用<code>in</code></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">where</span> dep_id <span class="keyword">in</span> (slect id <span class="keyword">from</span> dept <span class="keyword">where</span> name <span class="operator">=</span> <span class="string">&#x27;财务部&#x27;</span> <span class="keyword">or</span> name <span class="operator">=</span> <span class="string">&#x27;市场部&#x27;</span>);  <span class="comment">--查询部门是财务部和市场部的人</span></span><br></pre></td></tr></table></figure>

<p>子查询结果为多行多列，子查询可以作为一张虚拟表参与查询</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> dept t1,(<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">where</span> join_date <span class="operator">&gt;</span> <span class="string">&#x27;2011-11-11&#x27;</span>) t2 <span class="keyword">where</span> t1.id <span class="operator">=</span> t2.dept_id;</span><br></pre></td></tr></table></figure>



<h1 id="约束"><a href="#约束" class="headerlink" title="约束"></a>约束</h1><p>对表中的数据进行限定，保证数据的正确性、有效性和完整性</p>
<p>分类：</p>
<ul>
<li>主键约束：primary key</li>
<li>非空约束：not null</li>
<li>唯一约束：unique</li>
<li>外键约束：foreign key</li>
</ul>
<h2 id="非空约束"><a href="#非空约束" class="headerlink" title="非空约束"></a>非空约束</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> 表名(</span><br><span class="line">    列名  数据类型  <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 modify 列名 数据类型 <span class="keyword">not</span> <span class="keyword">null</span>;  <span class="comment">--添加非空约束</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 modify 列名 数据类型;   <span class="comment">--删除非空约束</span></span><br></pre></td></tr></table></figure>

<h2 id="唯一约束"><a href="#唯一约束" class="headerlink" title="唯一约束"></a>唯一约束</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> 表名(</span><br><span class="line">    列名  数据类型 <span class="keyword">unique</span>,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 modify 列名 数据类型 <span class="keyword">unique</span>;  <span class="comment">--添加唯一约束</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">drop</span> index 列名;   <span class="comment">--删除唯一约束</span></span><br></pre></td></tr></table></figure>

<h2 id="主键约束"><a href="#主键约束" class="headerlink" title="主键约束"></a>主键约束</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> 表名(</span><br><span class="line">    列名  数据类型  <span class="keyword">primary</span> key,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">altertable 表名 modify 列名 数据类型 <span class="keyword">primary</span> key;  <span class="comment">--添加主键约束</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">drop</span> <span class="keyword">primary</span> key;   <span class="comment">--删除主键约束</span></span><br></pre></td></tr></table></figure>

<h2 id="隔离级别"><a href="#隔离级别" class="headerlink" title="隔离级别"></a>隔离级别</h2><p><strong>隔离级别从上到下安全性越来越高，但效率越来越低</strong></p>
<p>数据库设置隔离级别</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> @<span class="variable">@tx</span>_isolation;   <span class="comment">--查询隔离级别</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> transaction isolation level 级别字符串;   <span class="comment">--设置全局隔离级别</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span> transaction isolation level 级别字符串;   <span class="comment">--设置当前MySQL连接的隔离级别</span></span><br></pre></td></tr></table></figure>



<h1 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h1><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="operator">/</span><span class="operator">/</span> 创建单列索引</span><br><span class="line"><span class="keyword">CREATE</span> INDEX indexName <span class="keyword">ON</span> table_name (column_name);</span><br><span class="line"></span><br><span class="line"><span class="operator">/</span><span class="operator">/</span> 组合索引</span><br><span class="line"><span class="keyword">CREATE</span> INDEX indexName <span class="keyword">ON</span> table_name (column_name1, column_name2, ...);</span><br><span class="line"></span><br><span class="line"><span class="operator">/</span><span class="operator">/</span> 添加索引</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">table</span> tableName <span class="keyword">ADD</span> INDEX indexName(columnName);</span><br><span class="line"></span><br><span class="line"><span class="operator">/</span><span class="operator">/</span> 或者建表时就指定索引</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> mytable(  </span><br><span class="line">	ID <span class="type">INT</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>,   </span><br><span class="line">	username <span class="type">VARCHAR</span>(<span class="number">16</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,  </span><br><span class="line">	INDEX [indexName] (username(length))  </span><br><span class="line">);  </span><br><span class="line"></span><br><span class="line"><span class="operator">/</span><span class="operator">/</span> 唯一索引</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">UNIQUE</span> INDEX indexName <span class="keyword">ON</span> mytable(username(length)) ;</span><br><span class="line"></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">table</span> mytable <span class="keyword">ADD</span> <span class="keyword">UNIQUE</span> [indexName] (username(length));</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> mytable(  </span><br><span class="line">	ID <span class="type">INT</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>,   </span><br><span class="line">	username <span class="type">VARCHAR</span>(<span class="number">16</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,  </span><br><span class="line">	<span class="keyword">UNIQUE</span> [indexName] (username(length))</span><br><span class="line">);  </span><br></pre></td></tr></table></figure>

<h1 id="DCL：管理用户，权限"><a href="#DCL：管理用户，权限" class="headerlink" title="DCL：管理用户，权限"></a>DCL：管理用户，权限</h1><h2 id="管理用户"><a href="#管理用户" class="headerlink" title="管理用户"></a>管理用户</h2><p>添加用户</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">user</span> <span class="string">&#x27;用户名&#x27;</span>@<span class="string">&#x27;主机名&#x27;</span> identified <span class="keyword">by</span> <span class="string">&#x27;密码&#x27;</span>;  <span class="comment">--主机名是%表示任意主机</span></span><br></pre></td></tr></table></figure>

<p>删除用户</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">user</span> <span class="string">&#x27;用户名&#x27;</span>@<span class="string">&#x27;主机名&#x27;</span>;                        <span class="comment">--主机名是%表示任意主机</span></span><br></pre></td></tr></table></figure>

<p>修改用户密码</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">set</span> password <span class="keyword">for</span> <span class="string">&#x27;用户名&#x27;</span>@<span class="string">&#x27;主机名&#x27;</span> <span class="operator">=</span> password(<span class="string">&#x27;新密码&#x27;</span>);        <span class="comment">--主机名是%表示任意主机</span></span><br></pre></td></tr></table></figure>

<p>查询用户</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">user</span>;    <span class="comment">--在mysql数据库</span></span><br></pre></td></tr></table></figure>



<h2 id="管理权限"><a href="#管理权限" class="headerlink" title="管理权限"></a>管理权限</h2><p>查询权限</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> grants <span class="keyword">for</span> <span class="string">&#x27;用户名&#x27;</span>@<span class="string">&#x27;主机名&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>授予权限</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">grant</span> 权限列表 <span class="keyword">on</span> 数据库名.表名 <span class="keyword">to</span> <span class="string">&#x27;用户名&#x27;</span>@<span class="string">&#x27;主机名&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">all</span> <span class="keyword">on</span> <span class="operator">*</span>.<span class="operator">*</span> <span class="keyword">to</span> <span class="string">&#x27;用户名&#x27;</span>@<span class="string">&#x27;主机名&#x27;</span>;  <span class="comment">--授予全部全部权限在任意数据库任意表上</span></span><br></pre></td></tr></table></figure>

<p>撤销权限</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">revoke</span> 权限列表 <span class="keyword">on</span> 数据库名.表名 <span class="keyword">from</span> <span class="string">&#x27;用户名&#x27;</span>@<span class="string">&#x27;主机名&#x27;</span>;</span><br></pre></td></tr></table></figure>

<h1 id="JDBC"><a href="#JDBC" class="headerlink" title="JDBC"></a>JDBC</h1><h2 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h2><ol>
<li>导入驱动jar包  mysql-connector-java-5.1.49-bin.jar<ul>
<li>复制mysql-connector-java-5.1.49-bin.jar到项目得libs文件夹下</li>
<li>右键libs文件夹—&gt; add  as  library </li>
</ul>
</li>
<li>注册驱动</li>
<li>获取数据库连接对象 Connection</li>
<li>定义sql</li>
<li>获取执行sql语句得对象 Statement</li>
<li>执行sql，接受返回结果</li>
<li>处理结果</li>
<li>释放资源</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JdbcDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Connection connection = <span class="keyword">null</span>;</span><br><span class="line">        Statement statement = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//1、导入驱动jar包  mysql-connector-java-5.1.49-bin.jar</span></span><br><span class="line">            <span class="comment">//2、注册驱动</span></span><br><span class="line">            Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">            <span class="comment">//3、获取数据得连接对象</span></span><br><span class="line">            connection = DriverManager.getConnection(<span class="string">&quot;jdbc:mysql://localhost:3306/mybatis_plus&quot;</span>,<span class="string">&quot;root&quot;</span>,<span class="string">&quot;password&quot;</span>);</span><br><span class="line">            <span class="comment">//4、定义sql</span></span><br><span class="line">            String sql = <span class="string">&quot;insert into user(id,name) values (&#x27;6&#x27;,&#x27;test&#x27;)&quot;</span>;</span><br><span class="line">            <span class="comment">//5、获取执行sql的对象 Statement</span></span><br><span class="line">            statement = connection.createStatement();</span><br><span class="line">            <span class="comment">//6、执行sql</span></span><br><span class="line">            <span class="keyword">int</span> count = statement.executeUpdate(sql);</span><br><span class="line">            <span class="comment">//7、处理结果</span></span><br><span class="line">            System.out.println(count);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//8、释放资源</span></span><br><span class="line">            <span class="keyword">if</span> (statement != <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    statement.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (connection != <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    connection.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="详解各个对象"><a href="#详解各个对象" class="headerlink" title="详解各个对象"></a>详解各个对象</h2><ul>
<li><p>DriverManager：驱动管理对象</p>
<ul>
<li><p>功能：</p>
<ol>
<li><p>注册驱动：告诉程序该使用哪一个数据库jar包</p>
<p>void registerDriver(java.sql.Driver driver)</p>
<p>写代码使用：Class.forName(“com.mysql.jdbc.Driver”)   在Driver类中有静态代码块</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        java.sql.DriverManager.registerDriver(<span class="keyword">new</span> Driver());</span><br><span class="line">    &#125; <span class="keyword">catch</span> (SQLException E) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;Can&#x27;t register driver!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>获取数据库连接：Connection getConnection(String url,String user, String password)</p>
<p>url：jdbc://mysql://{ip}:{port}/{数据库名}</p>
</li>
</ol>
</li>
</ul>
</li>
<li><p>Connection：数据库连接对象</p>
<ul>
<li><p>功能：</p>
<ol>
<li><p>获取执行sql的对象</p>
<p>Statement createStatement()</p>
<p>PreparedStatement prepareStatement(String sql)</p>
</li>
<li><p>管理事务</p>
<p>void setAutoCommit(boolean autoCommit)：开启事务，参数为fasle就开启事务</p>
<p>void rollback()：回滚事务</p>
<p>void commit()：提交事务</p>
</li>
</ol>
</li>
</ul>
</li>
<li><p>Statement：执行静态sql对象</p>
<ul>
<li>功能：<ol>
<li>int executeUpdate(String sql)：执行DML（增删改）语句、DDL（数据库、表）语句，<strong>返回影响的行数</strong>，返回值&gt;0，则执行成功</li>
<li>ResultSet executeQuery(String sql)：执行DQL（查询）语句，返回ResultSet结果集对象</li>
<li>boolean execute(String sql)</li>
</ol>
</li>
</ul>
</li>
<li><p>ResultSet：结果集对象，封装查询结果对象，<strong>也需要释放资源</strong></p>
<ul>
<li><p>功能：</p>
<ol>
<li><p>boolean next() ：游标向下移动一行</p>
</li>
<li><p>getXxx(int columnIndex)：获取数据，Xxx代表数据类型，参数为列编号，从1开始</p>
</li>
<li><p>getXxx(String columnLabel)：获取数据，Xxx代表数据类型，参数为列名称</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ResultSet rs = statement.executeQuery(sql);</span><br><span class="line"><span class="keyword">while</span> (rs.next())&#123;</span><br><span class="line">    System.out.println(rs.getInt(<span class="number">1</span>)+<span class="string">&quot;-&quot;</span>+rs.getString(<span class="number">2</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
</ul>
</li>
<li><p>PreparedStatement：执行动态sql的对象，<strong>防止SQL注入</strong></p>
<ul>
<li><p>SQL注入问题：在拼接sql时，有一些sql的特殊关键字参与字符串的拼接，会产生安全问题。</p>
<p>登录</p>
<p>用户名：asfaf</p>
<p>密码：’a’ or ‘a’ = ‘a’</p>
<p>sql：select * from user where username = ‘asfaf’ and password =  ‘a’ or ‘a’ = ‘a’;</p>
</li>
<li><p>预编译SQL：参数使用？作为占位符</p>
<p>方法：setXnn(参数1，参数2); </p>
<p>参数1：？的位置编号，从1开始</p>
<p>参数2：？的值</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">PreparedStatement ps = connection.prepareStatement(<span class="string">&quot;select * from user where name = ?&quot;</span>);</span><br><span class="line">ps.setString(<span class="number">1</span>,<span class="string">&quot;test&quot;</span>);</span><br><span class="line">rs = ps.executeQuery();</span><br><span class="line"><span class="keyword">while</span> (rs.next())&#123;</span><br><span class="line">    System.out.println(rs.getInt(<span class="number">1</span>)+<span class="string">&quot;-&quot;</span>+rs.getString(<span class="number">2</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h2 id="JDBC工具类：JDBCUtils"><a href="#JDBC工具类：JDBCUtils" class="headerlink" title="JDBC工具类：JDBCUtils"></a>JDBC工具类：JDBCUtils</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JDBCUtils</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String url;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String user;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String password;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String driver;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 读取资源文件，获取值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Properties pro = <span class="keyword">new</span> Properties();</span><br><span class="line">            <span class="comment">//1.2 加载配置文件，转换为一个集合</span></span><br><span class="line">            <span class="comment">//1.2.1 获取class目录下的配置文件</span></span><br><span class="line">            ClassLoader classLoader = JDBCUtils.class.getClassLoader();</span><br><span class="line">            InputStream resourceAsStream = classLoader.getResourceAsStream(<span class="string">&quot;jdbc.properties&quot;</span>);</span><br><span class="line"></span><br><span class="line">            pro.load(resourceAsStream);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//2. 获取配置文件中定义的数据</span></span><br><span class="line">            url = pro.getProperty(<span class="string">&quot;url&quot;</span>);</span><br><span class="line">            user = pro.getProperty(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">            password = pro.getProperty(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">            driver = pro.getProperty(<span class="string">&quot;driver&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//3、注册驱动</span></span><br><span class="line">            Class.forName(driver);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取连接对象</span></span><br><span class="line"><span class="comment">     * 不想传递参数，还得保证工具类的通用性</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> SQLException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> DriverManager.getConnection(url, user, password);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//释放资源</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">(Connection connection,Statement statement)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (statement != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                statement.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (connection != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                connection.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//释放资源</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">(Connection connection, Statement statement, ResultSet resultSet)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (resultSet != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                resultSet.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (statement != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                statement.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (connection != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                connection.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="JDBC事务"><a href="#JDBC事务" class="headerlink" title="JDBC事务"></a>JDBC事务</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JdbcDemo3</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Connection connection = <span class="keyword">null</span>;</span><br><span class="line">        Statement statement = <span class="keyword">null</span>;</span><br><span class="line">        ResultSet rs = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            connection = JDBCUtils.getConnection();</span><br><span class="line">            <span class="comment">//1、开启事务</span></span><br><span class="line">            connection.setAutoCommit(<span class="keyword">false</span>);</span><br><span class="line">            PreparedStatement ps = connection.prepareStatement(<span class="string">&quot;select * from user where name = ?&quot;</span>);</span><br><span class="line">            ps.setString(<span class="number">1</span>,<span class="string">&quot;test&quot;</span>);</span><br><span class="line">            rs = ps.executeQuery();</span><br><span class="line">            <span class="keyword">while</span> (rs.next())&#123;</span><br><span class="line">                System.out.println(rs.getInt(<span class="number">1</span>)+<span class="string">&quot;-&quot;</span>+rs.getString(<span class="number">2</span>));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//2、提交事务</span></span><br><span class="line">            connection.commit();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="comment">//3、出现异常回滚事务</span></span><br><span class="line">            <span class="keyword">if</span> (connection != <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    connection.rollback();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (SQLException ex) &#123;</span><br><span class="line">                    ex.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            JDBCUtils.close(connection,statement,rs);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="连接池"><a href="#连接池" class="headerlink" title="连接池"></a>连接池</h2><p>javax.sql.DataSource</p>
<p>获取连接   Connection getConnection()</p>
<p>归还连接：如果连接对象Connection是从连接池中获取的，那么close方法就不是释放资源，而是归还连接</p>
<h3 id="C3P0"><a href="#C3P0" class="headerlink" title="C3P0"></a>C3P0</h3><p>1、导入jar包    c3p0-0.9.5.5.jar和mchange-commons-java-0.2.19.jar，不用忘记导入mysql的包</p>
<p>2、定义配置文件，名称：c3p0.properties或者c3p0-config.xml，放在src目录下，<strong>自动加载</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">c3p0-config</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 使用默认的配置读取连接池对象 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">default-config</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 连接参数 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClass&quot;</span>&gt;</span>com.mysql.jdbc.Driver<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;jdbcUrl&quot;</span>&gt;</span>jdbc:mysql://localhost:3306/mybatis_plus<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;user&quot;</span>&gt;</span>root<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span>password<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 连接池参数 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 初始化申请的连接数量 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;initialPoolSize&quot;</span>&gt;</span>10<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 连接池最大数量 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxPoolSize&quot;</span>&gt;</span>100<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 超时时间 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;checkoutTimeout&quot;</span>&gt;</span>30000<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">default-config</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">named-config</span> <span class="attr">name</span>=<span class="string">&quot;otherc3p0&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 连接参数 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClass&quot;</span>&gt;</span>com.mysql.jdbc.Driver<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;jdbcUrl&quot;</span>&gt;</span>jdbc:mysql://localhost:3306/mybatis_plus<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;user&quot;</span>&gt;</span>root<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span>password<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 连接池参数 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;initialPoolSize&quot;</span>&gt;</span>10<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxPoolSize&quot;</span>&gt;</span>100<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;checkoutTimeout&quot;</span>&gt;</span>30000<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">named-config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">c3p0-config</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>3、创建核心对象  数据库连接池对象  ComboPooledDataSource</p>
<p>4、获取连接：Connection getConnection()</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">C3P0Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        <span class="comment">//1、创建数据库连接对象，参数无使用默认连接</span></span><br><span class="line">        DataSource dataSource = <span class="keyword">new</span> ComboPooledDataSource();</span><br><span class="line">        <span class="comment">//参数为xml配置文件中的&lt;named-config name=&quot;otherc3p0&quot;&gt;</span></span><br><span class="line">        <span class="comment">//DataSource dataSource = new ComboPooledDataSource(&quot;otherc3p0&quot;);</span></span><br><span class="line">        <span class="comment">//2、获取连接对象</span></span><br><span class="line">        Connection connection = dataSource.getConnection();</span><br><span class="line">        System.out.println(connection);</span><br><span class="line">        <span class="comment">//3、归还连接</span></span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Druid"><a href="#Druid" class="headerlink" title="Druid"></a>Druid</h3><p>1、导入jar包   druid-1.1.23.jar，不用忘记导入mysql的包</p>
<p>2、定义配置文件  druid.properties，可以在任意名称，放在任意目录，需要<strong>手动加载</strong>了</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">driverClassName</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="attr">url</span>=<span class="string">jdbc:mysql://localhost:3306/mybatis_plus</span></span><br><span class="line"><span class="attr">username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">password</span>=<span class="string">password</span></span><br><span class="line"><span class="comment"># 初始化连接数量</span></span><br><span class="line"><span class="attr">initialSize</span>=<span class="string">5</span></span><br><span class="line"><span class="comment"># 最大连接数</span></span><br><span class="line"><span class="attr">maxActive</span>=<span class="string">10</span></span><br><span class="line"><span class="comment"># 最大超时时间</span></span><br><span class="line"><span class="attr">maxWait</span>=<span class="string">3000</span></span><br></pre></td></tr></table></figure>

<p>3、获取数据库连接池对象：通过工厂类来获取   DruidDataSourceFactory</p>
<p>4、获取连接：Connection getConnection()</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DruidTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//1、加载配置文件</span></span><br><span class="line">        Properties pro = <span class="keyword">new</span> Properties();</span><br><span class="line">        <span class="comment">//1.2 加载配置文件，转换为一个集合</span></span><br><span class="line">        <span class="comment">//1.2.1 获取class目录下的配置文件</span></span><br><span class="line">        ClassLoader classLoader = DruidTest.class.getClassLoader();</span><br><span class="line">        InputStream resourceAsStream = classLoader.getResourceAsStream(<span class="string">&quot;druid.properties&quot;</span>);</span><br><span class="line">        pro.load(resourceAsStream);</span><br><span class="line">        <span class="comment">//2、获取数据库连接池对象</span></span><br><span class="line">        DataSource dataSource = DruidDataSourceFactory.createDataSource(pro);</span><br><span class="line">        <span class="comment">//3、获取连接对象</span></span><br><span class="line">        Connection connection = dataSource.getConnection();</span><br><span class="line">        System.out.println(connection);</span><br><span class="line">        <span class="comment">//4、归还连接</span></span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="Druid工具类：DruidUtils"><a href="#Druid工具类：DruidUtils" class="headerlink" title="Druid工具类：DruidUtils"></a>Druid工具类：DruidUtils</h4><p>提供方法：</p>
<ul>
<li>获取连接：通过数据库连接池获取连接</li>
<li>释放资源</li>
<li>获取连接池</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DruidUtils</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> DataSource dataSource;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//1、加载配置文件</span></span><br><span class="line">            Properties pro = <span class="keyword">new</span> Properties();</span><br><span class="line">            <span class="comment">//1.2 加载配置文件，转换为一个集合</span></span><br><span class="line">            <span class="comment">//1.2.1 获取class目录下的配置文件</span></span><br><span class="line">            ClassLoader classLoader = DruidUtils.class.getClassLoader();</span><br><span class="line">            InputStream resourceAsStream = classLoader.getResourceAsStream(<span class="string">&quot;druid.properties&quot;</span>);</span><br><span class="line">            pro.load(resourceAsStream);</span><br><span class="line">            <span class="comment">//2、获取数据库连接池对象</span></span><br><span class="line">            dataSource = DruidDataSourceFactory.createDataSource(pro);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取连接池</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> DataSource <span class="title">getDataSource</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> dataSource;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取连接</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> dataSource.getConnection();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//释放资源</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">(Connection connection, Statement statement)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (statement != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                statement.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (connection != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                connection.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//释放资源</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">(Connection connection, Statement statement, ResultSet resultSet)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (resultSet != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                resultSet.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (statement != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                statement.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (connection != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                connection.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>编程基础</category>
        <category>数据库/SQL</category>
        <category>SQL 语句书写</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
        <tag>SQL</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring IOC源码分析</title>
    <url>/2021/08/19/Spring%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="当前版本：5-2-9"><a href="#当前版本：5-2-9" class="headerlink" title="当前版本：5.2.9"></a>当前版本：5.2.9</h1><p><a href="https://blog.csdn.net/nuomizhende45/article/details/81158383">https://blog.csdn.net/nuomizhende45/article/details/81158383</a></p>
<h1 id="启动过程分析"><a href="#启动过程分析" class="headerlink" title="启动过程分析"></a>启动过程分析</h1><ul>
<li><p><strong>开始启动</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ApplicationContext ioc = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;beans.xml&quot;</span>);</span><br><span class="line"><span class="comment">//Person person = (Person)ioc.getBean(&quot;person&quot;);</span></span><br><span class="line">Person person = ioc.getBean(<span class="string">&quot;person&quot;</span>,Person.class);</span><br><span class="line">System.out.println(person.toString());</span><br></pre></td></tr></table></figure></li>
<li><p><strong>ClassPathXmlApplicationContext的构造方法</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ClassPathXmlApplicationContext</span><span class="params">(String[] configLocations, <span class="keyword">boolean</span> refresh, <span class="meta">@Nullable</span> ApplicationContext parent)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>(parent);</span><br><span class="line">    setConfigLocations(configLocations);</span><br><span class="line">    <span class="keyword">if</span> (refresh) &#123;</span><br><span class="line">   <span class="comment">//可以调用refresh()方法重建，会将原来的ApplicationContext销毁，然后再重新执行一次初始化操作</span></span><br><span class="line">        refresh();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p><strong>refresh()方法解析</strong>：AbstractApplicationContext类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">refresh</span><span class="params">()</span> <span class="keyword">throws</span> BeansException, IllegalStateException </span>&#123;</span><br><span class="line">    <span class="comment">//加个锁，不然refresh()还没结束，你又来个启动或销毁容器的操作，那不就乱套了</span></span><br><span class="line">    <span class="keyword">synchronized</span>(<span class="keyword">this</span>.startupShutdownMonitor) &#123;</span><br><span class="line">        <span class="comment">//创建Bean容器前的准备工作，记录下容器的启动时间、标记“已启动”状态、处理配置文件中的占位符</span></span><br><span class="line">        <span class="comment">//跳转到 创建Bean容器前的准备工作 章节</span></span><br><span class="line">        prepareRefresh();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 这步比较关键，这步完成后，配置文件就会解析成一个个 Bean 定义，注册到 BeanFactory 中</span></span><br><span class="line">        <span class="comment">// 此时，Bean还没有初始化，只是配置信息都提取出来了</span></span><br><span class="line">        <span class="comment">// 注册也只是将这些信息都保存到了注册中心(核心一个 beanName-&gt; beanDefinition 的 map)</span></span><br><span class="line">        <span class="comment">// 跳转到 创建Bean容器，加载并注册Bean 章节</span></span><br><span class="line">        ConfigurableListableBeanFactory beanFactory = obtainFreshBeanFactory();</span><br><span class="line">        <span class="comment">//设置 BeanFactory 的类加载器，添加几个BeanPostProcessor，手动注册几个特殊的 bean：environment、systemProperties、systemEnvironment</span></span><br><span class="line">        <span class="comment">// 跳转到 准备Bean容器 章节</span></span><br><span class="line">        prepareBeanFactory(beanFactory);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//BeanFactory准备工作完成后进行的后置工作，由自定义子类实现</span></span><br><span class="line">            <span class="comment">//到这里，BeanFactory的创建及准备工作已完成，</span></span><br><span class="line">            <span class="comment">//bean都加载、注册完成了，但是都还没有初始化</span></span><br><span class="line">            postProcessBeanFactory(beanFactory);</span><br><span class="line">           <span class="comment">//调用BeanFactoryPostProcessor实现类的postProcessBeanFactory方法</span></span><br><span class="line">            invokeBeanFactoryPostProcessors(beanFactory);</span><br><span class="line">            <span class="comment">//注册BeanPostProcessor的实现类</span></span><br><span class="line">            <span class="comment">//此接口两个方法: postProcessBeforeInitialization 和 postProcessAfterInitialization</span></span><br><span class="line">            <span class="comment">// 两个方法分别在Bean初始化之前和初始化之后得到执行。注意，到这里 Bean 还没初始化</span></span><br><span class="line">            registerBeanPostProcessors(beanFactory);</span><br><span class="line">            <span class="comment">// 初始化MessageSource组件（国际化、消息绑定、消息解析）</span></span><br><span class="line">            <span class="comment">// 将MessageSource注册到BeanFactory容器中</span></span><br><span class="line">            initMessageSource();</span><br><span class="line">            <span class="comment">// 初始化事件广播器</span></span><br><span class="line">            <span class="comment">// 将SimpleApplicationEventMulticaster注册到BeanFactory容器中</span></span><br><span class="line">            initApplicationEventMulticaster();</span><br><span class="line">            <span class="comment">// 由自定义子类实现</span></span><br><span class="line">            <span class="comment">// 可以在这里初始化一些特殊的 Bean（在初始化 singleton beans 之前）</span></span><br><span class="line">            onRefresh();</span><br><span class="line">            <span class="comment">// 注册事件监听器，监听器需要实现 ApplicationListener 接口</span></span><br><span class="line">            registerListeners();</span><br><span class="line">            <span class="comment">// 重点，重点，重点</span></span><br><span class="line">            <span class="comment">// 初始化所有的 singleton beans</span></span><br><span class="line">            <span class="comment">//（lazy-init 的除外）</span></span><br><span class="line">            finishBeanFactoryInitialization(beanFactory);</span><br><span class="line">            <span class="comment">// 广播事件，ApplicationContext 初始化完成</span></span><br><span class="line">            finishRefresh();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (BeansException ex) &#123;</span><br><span class="line">            <span class="keyword">if</span> (logger.isWarnEnabled()) &#123;</span><br><span class="line">                logger.warn(<span class="string">&quot;Exception encountered during context initialization - cancelling refresh attempt: &quot;</span> + ex);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 销毁已经初始化的 singleton 的 Beans，以免有些 bean 会一直占用资源</span></span><br><span class="line">            destroyBeans();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 重置 &#x27;active&#x27; 标志.</span></span><br><span class="line">            cancelRefresh(var9);</span><br><span class="line">            <span class="comment">// 抛出异常</span></span><br><span class="line">            <span class="keyword">throw</span> ex;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// Reset common introspection caches in Spring&#x27;s core, since we</span></span><br><span class="line">            <span class="comment">// might not ever need metadata for singleton beans anymore...</span></span><br><span class="line">            resetCommonCaches();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="创建Bean容器前的准备工作：prepareRefresh-方法"><a href="#创建Bean容器前的准备工作：prepareRefresh-方法" class="headerlink" title="创建Bean容器前的准备工作：prepareRefresh()方法"></a>创建Bean容器前的准备工作：prepareRefresh()方法</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">prepareRefresh</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 记录启动时间，</span></span><br><span class="line">    <span class="comment">// 将 active 属性设置为 true，closed 属性设置为 false，它们都是 AtomicBoolean 类型</span></span><br><span class="line">    <span class="keyword">this</span>.startupDate = System.currentTimeMillis();</span><br><span class="line">    <span class="keyword">this</span>.closed.set(<span class="keyword">false</span>);</span><br><span class="line">    <span class="keyword">this</span>.active.set(<span class="keyword">true</span>);</span><br><span class="line">    <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">        <span class="keyword">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class="line">            logger.trace(<span class="string">&quot;Refreshing &quot;</span> + <span class="keyword">this</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            logger.debug(<span class="string">&quot;Refreshing &quot;</span> + getDisplayName());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 初始化上下文环境中的任何占位符属性源</span></span><br><span class="line">    initPropertySources();</span><br><span class="line">    <span class="comment">// 校验xml配置文件</span></span><br><span class="line">    getEnvironment().validateRequiredProperties();</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.earlyApplicationListeners == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.earlyApplicationListeners = <span class="keyword">new</span> LinkedHashSet(<span class="keyword">this</span>.applicationListeners);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.applicationListeners.clear();</span><br><span class="line">        <span class="keyword">this</span>.applicationListeners.addAll(<span class="keyword">this</span>.earlyApplicationListeners);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.earlyApplicationEvents = <span class="keyword">new</span> LinkedHashSet();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="创建Bean容器，加载并注册Bean：obtainFreshBeanFactory-方法（重要）"><a href="#创建Bean容器，加载并注册Bean：obtainFreshBeanFactory-方法（重要）" class="headerlink" title="创建Bean容器，加载并注册Bean：obtainFreshBeanFactory()方法（重要）"></a>创建Bean容器，加载并注册Bean：obtainFreshBeanFactory()方法（重要）</h2><p><strong>将会初始化 BeanFactory、加载 Bean、注册 Bean 等等，这步结束后，Bean 并没有完成初始化</strong></p>
<ul>
<li><p><strong>obtainFreshBeanFactory()方法解析</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> ConfigurableListableBeanFactory <span class="title">obtainFreshBeanFactory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 关闭旧的 BeanFactory (如果有)，创建新的 BeanFactory，加载 Bean 定义、注册 Bean 等等</span></span><br><span class="line">    refreshBeanFactory();</span><br><span class="line">    <span class="comment">// 返回刚刚创建的 BeanFactory</span></span><br><span class="line">    <span class="keyword">return</span> getBeanFactory();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p><strong>refreshBeanFactory()方法解析</strong>：AbstractRefreshableApplicationContext类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">refreshBeanFactory</span><span class="params">()</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">    <span class="comment">//如果已有 BeanFactory ，销毁所有 Bean，关闭 BeanFactory</span></span><br><span class="line">    <span class="comment">//注意，应用中BeanFactory本来就是可以多个的，这里可不是说应用全局是否有BeanFactory，而是当前ApplicationContext 是否有 BeanFactory</span></span><br><span class="line">    <span class="keyword">if</span> (hasBeanFactory()) &#123;</span><br><span class="line">        destroyBeans();</span><br><span class="line">        closeBeanFactory();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 初始化一个 DefaultListableBeanFactory</span></span><br><span class="line">        <span class="comment">//ApplicationContext继承自BeanFactory，但是它不应该被理解为BeanFactory的实现类，而是说其内部持有一个实例化的BeanFactory（DefaultListableBeanFactory）。以后所有的BeanFactory相关的操作其实是给这个实例来处理的，DefaultListableBeanFactory可以看类/接口说明</span></span><br><span class="line">        DefaultListableBeanFactory beanFactory = createBeanFactory();</span><br><span class="line">        <span class="comment">// 用于 BeanFactory 的序列化</span></span><br><span class="line">        beanFactory.setSerializationId(getId());</span><br><span class="line">        <span class="comment">// 设置 BeanFactory 的两个配置属性：是否允许 Bean 覆盖、是否允许循环引用</span></span><br><span class="line">        customizeBeanFactory(beanFactory);</span><br><span class="line">        <span class="comment">// 加载 Bean 到 BeanFactory 中</span></span><br><span class="line">        loadBeanDefinitions(beanFactory);</span><br><span class="line">        <span class="keyword">this</span>.beanFactory = beanFactory;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException ex) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ApplicationContextException(<span class="string">&quot;I/O error parsing bean definition source for &quot;</span> + <span class="keyword">this</span>.getDisplayName(), ex);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="customizeBeanFactory-方法"><a href="#customizeBeanFactory-方法" class="headerlink" title="customizeBeanFactory()方法"></a>customizeBeanFactory()方法</h3><p>配置是否允许 BeanDefinition 覆盖、是否允许循环引用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">customizeBeanFactory</span><span class="params">(DefaultListableBeanFactory beanFactory)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.allowBeanDefinitionOverriding != <span class="keyword">null</span>) &#123;</span><br><span class="line">       <span class="comment">// 是否允许 Bean 定义覆盖</span></span><br><span class="line">      beanFactory.setAllowBeanDefinitionOverriding(<span class="keyword">this</span>.allowBeanDefinitionOverriding);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.allowCircularReferences != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 是否允许 Bean 间的循环依赖</span></span><br><span class="line">        beanFactory.setAllowCircularReferences(<span class="keyword">this</span>.allowCircularReferences);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="加载Bean：loadBeanDefinitions-方法"><a href="#加载Bean：loadBeanDefinitions-方法" class="headerlink" title="加载Bean：loadBeanDefinitions() 方法"></a>加载Bean：loadBeanDefinitions() 方法</h3><p>根据配置，加载各个Bean，然后放到 BeanFactory 中</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">loadBeanDefinitions</span><span class="params">(DefaultListableBeanFactory beanFactory)</span> <span class="keyword">throws</span> BeansException, IOException </span>&#123;</span><br><span class="line">    <span class="comment">// 给这个 BeanFactory 实例化一个 XmlBeanDefinitionReader，负责加载配置、解析XML</span></span><br><span class="line">    XmlBeanDefinitionReader beanDefinitionReader = <span class="keyword">new</span> XmlBeanDefinitionReader(beanFactory);</span><br><span class="line">    <span class="comment">// 设置环境</span></span><br><span class="line">    beanDefinitionReader.setEnvironment(<span class="keyword">this</span>.getEnvironment());</span><br><span class="line">    <span class="comment">// 设置ResourceLoader</span></span><br><span class="line">    beanDefinitionReader.setResourceLoader(<span class="keyword">this</span>);</span><br><span class="line">    beanDefinitionReader.setEntityResolver(<span class="keyword">new</span> ResourceEntityResolver(<span class="keyword">this</span>));</span><br><span class="line">    <span class="comment">// 初始化 BeanDefinitionReader，提供给子类覆写的</span></span><br><span class="line">    initBeanDefinitionReader(beanDefinitionReader);</span><br><span class="line">   	</span><br><span class="line">    loadBeanDefinitions(beanDefinitionReader);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">loadBeanDefinitions</span><span class="params">(XmlBeanDefinitionReader reader)</span> <span class="keyword">throws</span> BeansException, IOException </span>&#123;</span><br><span class="line">    Resource[] configResources = getConfigResources();</span><br><span class="line">    <span class="keyword">if</span> (configResources != <span class="keyword">null</span>) &#123;</span><br><span class="line">        reader.loadBeanDefinitions(configResources);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    String[] configLocations = getConfigLocations();</span><br><span class="line">    <span class="keyword">if</span> (configLocations != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 此方法也会进入上面loadBeanDefinitions中</span></span><br><span class="line">        reader.loadBeanDefinitions(configLocations);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">loadBeanDefinitions</span><span class="params">(Resource... resources)</span> <span class="keyword">throws</span> BeanDefinitionStoreException </span>&#123;</span><br><span class="line">    Assert.notNull(resources, <span class="string">&quot;Resource array must not be null&quot;</span>);</span><br><span class="line">    <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 每个文件是一个 resource</span></span><br><span class="line">    <span class="keyword">for</span> (Resource resource : resources) &#123;</span><br><span class="line">        count += loadBeanDefinitions(resource);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// XmlBeanDefinitionReader类中</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">loadBeanDefinitions</span><span class="params">(Resource resource)</span> <span class="keyword">throws</span> BeanDefinitionStoreException </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> loadBeanDefinitions(<span class="keyword">new</span> EncodedResource(resource));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// XmlBeanDefinitionReader类中</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">loadBeanDefinitions</span><span class="params">(EncodedResource encodedResource)</span> <span class="keyword">throws</span> BeanDefinitionStoreException </span>&#123;</span><br><span class="line">    Assert.notNull(encodedResource, <span class="string">&quot;EncodedResource must not be null&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class="line">        logger.trace(<span class="string">&quot;Loading XML bean definitions from &quot;</span> + encodedResource);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 用一个 ThreadLocal 来存放所有的配置文件资源</span></span><br><span class="line">    Set&lt;EncodedResource&gt; currentResources = <span class="keyword">this</span>.resourcesCurrentlyBeingLoaded.get();</span><br><span class="line">    <span class="keyword">if</span> (!currentResources.add(encodedResource)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> BeanDefinitionStoreException(<span class="string">&quot;Detected cyclic loading of &quot;</span> + encodedResource + <span class="string">&quot; - check your import definitions!&quot;</span>);</span><br><span class="line">    &#125; </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">try</span> (InputStream inputStream = encodedResource.getResource().getInputStream()) &#123;</span><br><span class="line">        InputSource inputSource = <span class="keyword">new</span> InputSource(inputStream);</span><br><span class="line">        <span class="keyword">if</span> (encodedResource.getEncoding() != <span class="keyword">null</span>) &#123;</span><br><span class="line">            inputSource.setEncoding(encodedResource.getEncoding());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 核心部分</span></span><br><span class="line">        <span class="keyword">return</span> doLoadBeanDefinitions(inputSource, encodedResource.getResource());</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException ex) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> BeanDefinitionStoreException(</span><br><span class="line">            <span class="string">&quot;IOException parsing XML document from &quot;</span> + encodedResource.getResource(), ex);</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        currentResources.remove(encodedResource);</span><br><span class="line">        <span class="keyword">if</span> (currentResources.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">this</span>.resourcesCurrentlyBeingLoaded.remove();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// XmlBeanDefinitionReader类中</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">int</span> <span class="title">doLoadBeanDefinitions</span><span class="params">(InputSource inputSource, Resource resource)</span> <span class="keyword">throws</span> BeanDefinitionStoreException </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Document doc = doLoadDocument(inputSource, resource);</span><br><span class="line">        <span class="comment">// 进入</span></span><br><span class="line">        <span class="keyword">int</span> count = registerBeanDefinitions(doc, resource);</span><br><span class="line">        <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">            logger.debug(<span class="string">&quot;Loaded &quot;</span> + count + <span class="string">&quot; bean definitions from &quot;</span> + resource);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (BeanDefinitionStoreException ex) &#123;</span><br><span class="line">        <span class="keyword">throw</span> ex;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (SAXParseException ex) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> XmlBeanDefinitionStoreException(resource.getDescription(), <span class="string">&quot;Line &quot;</span> + var6.getLineNumber() + <span class="string">&quot; in XML document from &quot;</span> + resource + <span class="string">&quot; is invalid&quot;</span>, ex);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (SAXException ex) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> XmlBeanDefinitionStoreException(resource.getDescription(), <span class="string">&quot;XML document from &quot;</span> + resource + <span class="string">&quot; is invalid&quot;</span>, ex);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (ParserConfigurationException ex) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> BeanDefinitionStoreException(resource.getDescription(), <span class="string">&quot;Parser configuration exception parsing XML from &quot;</span> + resource, ex);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException ex) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> BeanDefinitionStoreException(resource.getDescription(), <span class="string">&quot;IOException parsing XML document from &quot;</span> + resource, ex);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> BeanDefinitionStoreException(resource.getDescription(), <span class="string">&quot;Unexpected exception parsing XML document from &quot;</span> + resource, ex);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// XmlBeanDefinitionReader类中</span></span><br><span class="line"><span class="comment">// 返回从当前配置文件加载了多少数量的 Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">registerBeanDefinitions</span><span class="params">(Document doc, Resource resource)</span> <span class="keyword">throws</span> BeanDefinitionStoreException </span>&#123;</span><br><span class="line">    BeanDefinitionDocumentReader documentReader = createBeanDefinitionDocumentReader();</span><br><span class="line">    <span class="keyword">int</span> countBefore = getRegistry().getBeanDefinitionCount();</span><br><span class="line">    documentReader.registerBeanDefinitions(doc, createReaderContext(resource));</span><br><span class="line">    <span class="keyword">return</span> getRegistry().getBeanDefinitionCount() - countBefore;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// DefaultBeanDefinitionDocumentReader</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerBeanDefinitions</span><span class="params">(Document doc, XmlReaderContext readerContext)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.readerContext = readerContext;</span><br><span class="line">    <span class="keyword">this</span>.doRegisterBeanDefinitions(doc.getDocumentElement());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>一个配置文件终于转换为一颗 DOM 树了，注意，这里指的是其中一个配置文件，不是所有的，上面有个 for 循环的</p>
<p>下面从根节点开始解析</p>
<h4 id="根节点解析：doRegisterBeanDefinitions-方法"><a href="#根节点解析：doRegisterBeanDefinitions-方法" class="headerlink" title="根节点解析：doRegisterBeanDefinitions() 方法"></a>根节点解析：doRegisterBeanDefinitions() 方法</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doRegisterBeanDefinitions</span><span class="params">(Element root)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// BeanDefinitionParserDelegate 负责解析 Bean 定义，</span></span><br><span class="line">    BeanDefinitionParserDelegate parent = <span class="keyword">this</span>.delegate;</span><br><span class="line">    <span class="keyword">this</span>.delegate = createDelegate(getReaderContext(), root, parent);</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.delegate.isDefaultNamespace(root)) &#123;</span><br><span class="line">        <span class="comment">//这块说的是根节点 &lt;beans ... profile=&quot;dev&quot; /&gt; 中的 profile 是否是当前环境需要的，</span></span><br><span class="line">        <span class="comment">//如果当前环境配置的 profile不包含此 profile，那就直接 return 了，不对此 &lt;beans /&gt; 解析</span></span><br><span class="line">        <span class="comment">// PROFILE_ATTRIBUTE = &quot;profile&quot;</span></span><br><span class="line">        String profileSpec = root.getAttribute(PROFILE_ATTRIBUTE);</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.hasText(profileSpec)) &#123;</span><br><span class="line">            <span class="comment">// MULTI_VALUE_ATTRIBUTE_DELIMITERS = &quot;,; &quot;</span></span><br><span class="line">            String[] specifiedProfiles = StringUtils.tokenizeToStringArray(</span><br><span class="line">						profileSpec, BeanDefinitionParserDelegate.MULTI_VALUE_ATTRIBUTE_DELIMITERS);</span><br><span class="line">            <span class="keyword">if</span> (!getReaderContext().getEnvironment().acceptsProfiles(specifiedProfiles)) &#123;</span><br><span class="line">                <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">                    logger.debug(<span class="string">&quot;Skipped XML bean definition file due to specified profiles [&quot;</span> + profileSpec +</span><br><span class="line">                                 <span class="string">&quot;] not matching: &quot;</span> + getReaderContext().getResource());</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    preProcessXml(root);  <span class="comment">// 给子类用的钩子方法，没有被使用到，跳过</span></span><br><span class="line">    parseBeanDefinitions(root, <span class="keyword">this</span>.delegate);</span><br><span class="line">    postProcessXml(root);</span><br><span class="line">    <span class="keyword">this</span>.delegate = parent;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 解析的节点是 &lt;import /&gt;、&lt;alias /&gt;、&lt;bean /&gt;、&lt;beans /&gt; 这几个</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">parseBeanDefinitions</span><span class="params">(Element root, BeanDefinitionParserDelegate delegate)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// default namespace 涉及到的就四个标签 &lt;import /&gt;、&lt;alias /&gt;、&lt;bean /&gt; 和 &lt;beans /&gt;</span></span><br><span class="line">    <span class="keyword">if</span> (delegate.isDefaultNamespace(root)) &#123;</span><br><span class="line">        NodeList nl = root.getChildNodes();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nl.getLength(); i++) &#123;</span><br><span class="line">            Node node = nl.item(i);</span><br><span class="line">            <span class="keyword">if</span> (node <span class="keyword">instanceof</span> Element) &#123;</span><br><span class="line">                Element ele = (Element)node;</span><br><span class="line">                <span class="keyword">if</span> (delegate.isDefaultNamespace(ele)) &#123;</span><br><span class="line">                    parseDefaultElement(ele, delegate);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    delegate.parseCustomElement(ele);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//其他标签属于 custom 的</span></span><br><span class="line">        delegate.parseCustomElement(root);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//处理四种标签</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">parseDefaultElement</span><span class="params">(Element ele, BeanDefinitionParserDelegate delegate)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (delegate.nodeNameEquals(ele, IMPORT_ELEMENT)) &#123;</span><br><span class="line">        importBeanDefinitionResource(ele);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (delegate.nodeNameEquals(ele, ALIAS_ELEMENT)) &#123;</span><br><span class="line">        processAliasRegistration(ele);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// BEAN_ELEMENT = &quot;bean&quot;</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (delegate.nodeNameEquals(ele, BEAN_ELEMENT)) &#123;</span><br><span class="line">        processBeanDefinition(ele, delegate);   <span class="comment">//进入</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (delegate.nodeNameEquals(ele, NESTED_BEANS_ELEMENT)) &#123;</span><br><span class="line">        <span class="comment">// recurse</span></span><br><span class="line">        doRegisterBeanDefinitions(ele);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="processBeanDefinition"><a href="#processBeanDefinition" class="headerlink" title="processBeanDefinition"></a>processBeanDefinition</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">processBeanDefinition</span><span class="params">(Element ele, BeanDefinitionParserDelegate delegate)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 将 &lt;bean /&gt; 节点中的信息提取出来，然后封装到一个 BeanDefinitionHolder中</span></span><br><span class="line">    <span class="comment">// 跳到parseBeanDefinitionElement() 方法章节</span></span><br><span class="line">    BeanDefinitionHolder bdHolder = delegate.parseBeanDefinitionElement(ele);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (bdHolder != <span class="keyword">null</span>) &#123;</span><br><span class="line">        bdHolder = delegate.decorateBeanDefinitionIfRequired(ele, bdHolder);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// BeanDefinitionHolder 包含BeanDefinition、beanName、aliases</span></span><br><span class="line">            <span class="comment">// 注册Bean</span></span><br><span class="line">            <span class="comment">// 跳到注册Bean章节</span></span><br><span class="line">            BeanDefinitionReaderUtils.registerBeanDefinition(bdHolder, getReaderContext().getRegistry());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (BeanDefinitionStoreException ex) &#123;</span><br><span class="line">            <span class="keyword">this</span>.getReaderContext().error(<span class="string">&quot;Failed to register bean definition with name &#x27;&quot;</span> + bdHolder.getBeanName() + <span class="string">&quot;&#x27;&quot;</span>, ele, ex);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 注册完成后，发送事件</span></span><br><span class="line">        getReaderContext().fireComponentRegistered(<span class="keyword">new</span> BeanComponentDefinition(bdHolder));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="parseBeanDefinitionElement-方法"><a href="#parseBeanDefinitionElement-方法" class="headerlink" title="parseBeanDefinitionElement() 方法"></a>parseBeanDefinitionElement() 方法</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// BeanDefinitionParserDelegate类中</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> BeanDefinitionHolder <span class="title">parseBeanDefinitionElement</span><span class="params">(Element ele)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> parseBeanDefinitionElement(ele, <span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> BeanDefinitionHolder <span class="title">parseBeanDefinitionElement</span><span class="params">(Element ele, <span class="meta">@Nullable</span> BeanDefinition containingBean)</span> </span>&#123;</span><br><span class="line">    String id = ele.getAttribute(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">    String nameAttr = ele.getAttribute(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">    List&lt;String&gt; aliases = <span class="keyword">new</span> ArrayList();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 将 name 属性的定义按照 ”逗号、分号、空格“ 切分，形成一个别名列表数组，</span></span><br><span class="line">    <span class="keyword">if</span> (StringUtils.hasLength(nameAttr)) &#123;</span><br><span class="line">        String[] nameArr = StringUtils.tokenizeToStringArray(nameAttr, <span class="string">&quot;,; &quot;</span>);</span><br><span class="line">        aliases.addAll(Arrays.asList(nameArr));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    String beanName = id;</span><br><span class="line">    <span class="comment">// 如果没有指定id, 那么用别名列表的第一个名字作为beanName</span></span><br><span class="line">    <span class="keyword">if</span> (!StringUtils.hasText(id) &amp;&amp; !aliases.isEmpty()) &#123;</span><br><span class="line">        beanName = aliases.remove(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class="line">            logger.trace(<span class="string">&quot;No XML &#x27;id&#x27; specified - using &#x27;&quot;</span> + beanName + <span class="string">&quot;&#x27; as bean name and &quot;</span> + aliases + <span class="string">&quot; as aliases&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (containingBean == <span class="keyword">null</span>) &#123;</span><br><span class="line">        checkNameUniqueness(beanName, aliases, ele);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 根据&lt;bean&gt;标签中的配置创建 BeanDefinition实例，然后把配置中的信息都设置到实例中</span></span><br><span class="line">    AbstractBeanDefinition beanDefinition = parseBeanDefinitionElement(ele, beanName, containingBean);</span><br><span class="line">    <span class="comment">// 到这里，整个 &lt;bean /&gt; 标签就算解析结束了，一个 BeanDefinition 就形成了</span></span><br><span class="line">    <span class="keyword">if</span> (beanDefinition != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 如果都没有设置 id 和 name，那么此时的 beanName 就会为 null，进入下面这块代码产生</span></span><br><span class="line">        <span class="keyword">if</span> (!StringUtils.hasText(beanName)) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (containingBean != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    beanName = BeanDefinitionReaderUtils.generateBeanName(beanDefinition, <span class="keyword">this</span>.readerContext.getRegistry(), <span class="keyword">true</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    beanName = <span class="keyword">this</span>.readerContext.generateBeanName(beanDefinition);</span><br><span class="line">                    String beanClassName = beanDefinition.getBeanClassName();</span><br><span class="line">                    <span class="keyword">if</span> (beanClassName != <span class="keyword">null</span> &amp;&amp; beanName.startsWith(beanClassName) &amp;&amp; beanName.length() &gt; beanClassName.length() &amp;&amp; !<span class="keyword">this</span>.readerContext.getRegistry().isBeanNameInUse(beanClassName)) &#123;</span><br><span class="line">                        aliases.add(beanClassName);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class="line">                    logger.trace(<span class="string">&quot;Neither XML &#x27;id&#x27; nor &#x27;name&#x27; specified - using generated bean name [&quot;</span> + beanName + <span class="string">&quot;]&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">                <span class="keyword">this</span>.error(ex.getMessage(), ele);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        String[] aliasesArray = StringUtils.toStringArray(aliases);</span><br><span class="line">        <span class="comment">// 封装并返回 BeanDefinitionHolder</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> BeanDefinitionHolder(beanDefinition, beanName, aliasesArray);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建BeanDefinition</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> AbstractBeanDefinition <span class="title">parseBeanDefinitionElement</span><span class="params">(Element ele, String beanName, <span class="meta">@Nullable</span> BeanDefinition containingBean)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.parseState.push(<span class="keyword">new</span> BeanEntry(beanName));</span><br><span class="line">    String className = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (ele.hasAttribute(<span class="string">&quot;class&quot;</span>)) &#123;</span><br><span class="line">        className = ele.getAttribute(<span class="string">&quot;class&quot;</span>).trim();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    String parent = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (ele.hasAttribute(<span class="string">&quot;parent&quot;</span>)) &#123;</span><br><span class="line">        parent = ele.getAttribute(<span class="string">&quot;parent&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 创建 BeanDefinition，然后设置类信息</span></span><br><span class="line">        AbstractBeanDefinition bd = createBeanDefinition(className, parent);</span><br><span class="line">        <span class="comment">// 设置 BeanDefinition 的一堆属性，这些属性定义在 AbstractBeanDefinition 中</span></span><br><span class="line">        <span class="keyword">this</span>.parseBeanDefinitionAttributes(ele, beanName, containingBean, bd);</span><br><span class="line">        bd.setDescription(DomUtils.getChildElementValueByTagName(ele, <span class="string">&quot;description&quot;</span>));</span><br><span class="line">        </span><br><span class="line">       <span class="comment">/**</span></span><br><span class="line"><span class="comment">       	* 下面的一堆是解析 &lt;bean&gt;......&lt;/bean&gt; 内部的子元素，</span></span><br><span class="line"><span class="comment">        * 解析出来以后的信息都放到 bd 的属性中</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="comment">// 解析 &lt;meta /&gt;</span></span><br><span class="line">        parseMetaElements(ele, bd);</span><br><span class="line">        <span class="comment">// 解析 &lt;lookup-method /&gt;</span></span><br><span class="line">        parseLookupOverrideSubElements(ele, bd.getMethodOverrides());</span><br><span class="line">        <span class="comment">// 解析 &lt;replaced-method /&gt;</span></span><br><span class="line">        parseReplacedMethodSubElements(ele, bd.getMethodOverrides());</span><br><span class="line">        <span class="comment">// 解析 &lt;constructor-arg /&gt;</span></span><br><span class="line">        parseConstructorArgElements(ele, bd);</span><br><span class="line">        <span class="comment">// 解析 &lt;property /&gt;</span></span><br><span class="line">        parsePropertyElements(ele, bd);</span><br><span class="line">        <span class="comment">// 解析 &lt;qualifier /&gt;</span></span><br><span class="line">        parseQualifierElements(ele, bd);</span><br><span class="line">        </span><br><span class="line">        bd.setResource(<span class="keyword">this</span>.readerContext.getResource());</span><br><span class="line">        bd.setSource(extractSource(ele));</span><br><span class="line">        <span class="comment">//返回</span></span><br><span class="line">        <span class="keyword">return</span> bd;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (ClassNotFoundException ex) &#123;</span><br><span class="line">        <span class="keyword">this</span>.error(<span class="string">&quot;Bean class [&quot;</span> + className + <span class="string">&quot;] not found&quot;</span>, ele, ex);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (NoClassDefFoundError ex) &#123;</span><br><span class="line">        <span class="keyword">this</span>.error(<span class="string">&quot;Class that bean class [&quot;</span> + className + <span class="string">&quot;] depends on not found&quot;</span>, ele, ex);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">        <span class="keyword">this</span>.error(<span class="string">&quot;Unexpected failure during bean definition parsing&quot;</span>, ele, ex);</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.parseState.pop();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>到这里，我们已经完成了根据 <code>&lt;bean /&gt;</code> 配置创建了一个 BeanDefinitionHolder 实例。注意，是一个</p>
<h4 id="注册-BeanDefinition：registerBeanDefinition-方法"><a href="#注册-BeanDefinition：registerBeanDefinition-方法" class="headerlink" title="注册 BeanDefinition：registerBeanDefinition() 方法"></a>注册 BeanDefinition：registerBeanDefinition() 方法</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// BeanDefinitionReaderUtils类中</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">registerBeanDefinition</span><span class="params">(BeanDefinitionHolder definitionHolder, BeanDefinitionRegistry registry)</span> <span class="keyword">throws</span> BeanDefinitionStoreException </span>&#123;</span><br><span class="line">    String beanName = definitionHolder.getBeanName();</span><br><span class="line">    <span class="comment">// 注册这个 Bean</span></span><br><span class="line">    registry.registerBeanDefinition(beanName, definitionHolder.getBeanDefinition());</span><br><span class="line">    <span class="comment">// 如果还有别名的话，也要根据别名统统注册一遍</span></span><br><span class="line">    String[] aliases = definitionHolder.getAliases();</span><br><span class="line">    <span class="keyword">if</span> (aliases != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">// alias -&gt; beanName 保存它们的别名信息，这个很简单，用一个 map 保存一下就可以了，</span></span><br><span class="line">        <span class="comment">// 获取的时候，会先将 alias 转换为 beanName，然后再查找</span></span><br><span class="line">        <span class="keyword">for</span> (String alias : aliases) &#123;</span><br><span class="line">            registry.registerAlias(beanName, alias);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// DefaultListableBeanFactory 类中</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerBeanDefinition</span><span class="params">(String beanName, BeanDefinition beanDefinition)</span> <span class="keyword">throws</span> BeanDefinitionStoreException </span>&#123;</span><br><span class="line">    Assert.hasText(beanName, <span class="string">&quot;Bean name must not be empty&quot;</span>);</span><br><span class="line">    Assert.notNull(beanDefinition, <span class="string">&quot;BeanDefinition must not be null&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (beanDefinition <span class="keyword">instanceof</span> AbstractBeanDefinition) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ((AbstractBeanDefinition)beanDefinition).validate();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (BeanDefinitionValidationException ex) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> BeanDefinitionStoreException(beanDefinition.getResourceDescription(), beanName, <span class="string">&quot;Validation of bean definition failed&quot;</span>, ex);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// existing? 还记得 “允许 bean 覆盖” 这个配置吗？allowBeanDefinitionOverriding</span></span><br><span class="line">    <span class="comment">// 之后会看到，所有的 Bean 注册后会放入这个 beanDefinitionMap 中</span></span><br><span class="line">    BeanDefinition existingDefinition = <span class="keyword">this</span>.beanDefinitionMap.get(beanName);</span><br><span class="line">    <span class="comment">// 处理重复名称的 Bean 定义的情况</span></span><br><span class="line">    <span class="keyword">if</span> (existingDefinition != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!isAllowBeanDefinitionOverriding()) &#123;</span><br><span class="line">            <span class="comment">// 如果不允许覆盖的话，抛异常</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> BeanDefinitionOverrideException(beanName, beanDefinition, existingDefinition);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (existingDefinition.getRole() &lt; beanDefinition.getRole()) &#123;</span><br><span class="line">            <span class="comment">// log...用框架定义的 Bean 覆盖用户自定义的 Bean</span></span><br><span class="line">            <span class="keyword">if</span> (logger.isInfoEnabled()) &#123;</span><br><span class="line">                logger.info(<span class="string">&quot;Overriding user-defined bean definition for bean &#x27;&quot;</span> + beanName +</span><br><span class="line">                            <span class="string">&quot;&#x27; with a framework-generated bean definition: replacing [&quot;</span> +</span><br><span class="line">                            existingDefinition + <span class="string">&quot;] with [&quot;</span> + beanDefinition + <span class="string">&quot;]&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (!beanDefinition.equals(existingDefinition)) &#123;</span><br><span class="line">            <span class="comment">// log...用新的 Bean 覆盖旧的 Bean</span></span><br><span class="line">            <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">                logger.debug(<span class="string">&quot;Overriding bean definition for bean &#x27;&quot;</span> + beanName +</span><br><span class="line">                             <span class="string">&quot;&#x27; with a different definition: replacing [&quot;</span> + existingDefinition +</span><br><span class="line">                             <span class="string">&quot;] with [&quot;</span> + beanDefinition + <span class="string">&quot;]&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// log...用同等的 Bean 覆盖旧的 Bean，这里指的是 equals 方法返回 true 的 Bean</span></span><br><span class="line">            <span class="keyword">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class="line">                logger.trace(<span class="string">&quot;Overriding bean definition for bean &#x27;&quot;</span> + beanName +</span><br><span class="line">                             <span class="string">&quot;&#x27; with an equivalent definition: replacing [&quot;</span> + existingDefinition +</span><br><span class="line">                             <span class="string">&quot;] with [&quot;</span> + beanDefinition + <span class="string">&quot;]&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 覆盖</span></span><br><span class="line">        <span class="keyword">this</span>.beanDefinitionMap.put(beanName, beanDefinition);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 判断是否已经有其他的 Bean 开始初始化了.</span></span><br><span class="line">        <span class="comment">// 注意，&quot;注册Bean&quot; 这个动作结束，Bean 依然还没有初始化，</span></span><br><span class="line">        <span class="comment">// 在 Spring 容器启动的最后，会 预初始化 所有的 singleton beans</span></span><br><span class="line">        <span class="keyword">if</span> (hasBeanCreationStarted()) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (<span class="keyword">this</span>.beanDefinitionMap) &#123;</span><br><span class="line">                <span class="keyword">this</span>.beanDefinitionMap.put(beanName, beanDefinition);</span><br><span class="line">                List&lt;String&gt; updatedDefinitions = <span class="keyword">new</span> ArrayList&lt;&gt;(<span class="keyword">this</span>.beanDefinitionNames.size() + <span class="number">1</span>);</span><br><span class="line">                updatedDefinitions.addAll(<span class="keyword">this</span>.beanDefinitionNames);</span><br><span class="line">                updatedDefinitions.add(beanName);</span><br><span class="line">                <span class="keyword">this</span>.beanDefinitionNames = updatedDefinitions;</span><br><span class="line">                removeManualSingletonName(beanName);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 最正常的应该是进到这里。</span></span><br><span class="line"> </span><br><span class="line">            <span class="comment">// 将BeanDefinition放到beanDefinitionMap中</span></span><br><span class="line">            <span class="keyword">this</span>.beanDefinitionMap.put(beanName, beanDefinition);</span><br><span class="line">            <span class="comment">//这是个ArrayList，所以会按照 bean 配置的顺序保存每一个注册的 Bean 的名字</span></span><br><span class="line">            <span class="keyword">this</span>.beanDefinitionNames.add(beanName);</span><br><span class="line">            <span class="comment">// 这是个 LinkedHashSet，代表的是手动注册的 singleton bean，</span></span><br><span class="line">            <span class="comment">// 注意这里是 remove 方法，到这里的 Bean 当然不是手动注册的</span></span><br><span class="line">            <span class="comment">// 手动指的是通过调用以下方法注册的 bean：</span></span><br><span class="line">            <span class="comment">// registerSingleton(String beanName, Object singletonObject)</span></span><br><span class="line">            <span class="comment">//Spring 会在后面&quot;手动&quot;注册一些 Bean，如&quot;environment&quot;、&quot;systemProperties&quot;等 bean</span></span><br><span class="line">            removeManualSingletonName(beanName);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 在预初始化的时候会用到</span></span><br><span class="line">        <span class="keyword">this</span>.frozenBeanDefinitionNames = <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (existingDefinition != <span class="keyword">null</span> || containsSingleton(beanName)) &#123;</span><br><span class="line">        resetBeanDefinition(beanName);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (isConfigurationFrozen()) &#123;</span><br><span class="line">        clearByTypeCache();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>到这里已经初始化了 Bean 容器，<code>&lt;bean /&gt;</code> 配置也相应的转换为了一个个 BeanDefinition，然后注册了各个 BeanDefinition 到注册中心，并且发送了注册事件</p>
<h2 id="准备-Bean-容器-prepareBeanFactory-方法"><a href="#准备-Bean-容器-prepareBeanFactory-方法" class="headerlink" title="准备 Bean 容器: prepareBeanFactory() 方法"></a>准备 Bean 容器: prepareBeanFactory() 方法</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">prepareBeanFactory</span><span class="params">(ConfigurableListableBeanFactory beanFactory)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 设置 BeanFactory 的类加载器，设置为当前 ApplicationContext 的类加载器</span></span><br><span class="line">    beanFactory.setBeanClassLoader(getClassLoader());</span><br><span class="line">    <span class="comment">// 设置 BeanExpressionResolver</span></span><br><span class="line">    beanFactory.setBeanExpressionResolver(<span class="keyword">new</span> StandardBeanExpressionResolver(beanFactory.getBeanClassLoader()));</span><br><span class="line">    beanFactory.addPropertyEditorRegistrar(<span class="keyword">new</span> ResourceEditorRegistrar(<span class="keyword">this</span>, getEnvironment()));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 添加一个 BeanPostProcessor，这个 processor 比较简单，</span></span><br><span class="line">    <span class="comment">// 实现了 Aware 接口的几个特殊的 beans 在初始化的时候，这个 processor 负责回调</span></span><br><span class="line">    beanFactory.addBeanPostProcessor(<span class="keyword">new</span> ApplicationContextAwareProcessor(<span class="keyword">this</span>));</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 如果某个 bean 依赖于以下几个接口的实现类，在自动装配的时候忽略它们，</span></span><br><span class="line">    <span class="comment">// Spring 会通过其他方式来处理这些依赖</span></span><br><span class="line">    beanFactory.ignoreDependencyInterface(EnvironmentAware.class);</span><br><span class="line">    beanFactory.ignoreDependencyInterface(EmbeddedValueResolverAware.class);</span><br><span class="line">    beanFactory.ignoreDependencyInterface(ResourceLoaderAware.class);</span><br><span class="line">    beanFactory.ignoreDependencyInterface(ApplicationEventPublisherAware.class);</span><br><span class="line">    beanFactory.ignoreDependencyInterface(MessageSourceAware.class);</span><br><span class="line">    beanFactory.ignoreDependencyInterface(ApplicationContextAware.class);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 下面几行就是为特殊的几个 bean 赋值，如果有 bean 依赖了以下几个，会注入这边相应的值，</span></span><br><span class="line"><span class="comment">    * 之前我们说过，&quot;当前 ApplicationContext 持有一个 BeanFactory&quot;，这里解释了第一行</span></span><br><span class="line"><span class="comment">    * ApplicationContext 继承了 ResourceLoader、ApplicationEventPublisher、MessageSource</span></span><br><span class="line"><span class="comment">    * 所以对于这几个，可以赋值为 this，注意 this 是一个 ApplicationContext</span></span><br><span class="line"><span class="comment">    * 那这里怎么没看到为 MessageSource 赋值呢？那是因为 MessageSource 被注册成为了一个普通的 bean</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    beanFactory.registerResolvableDependency(BeanFactory.class, beanFactory);</span><br><span class="line">    beanFactory.registerResolvableDependency(ResourceLoader.class, <span class="keyword">this</span>);</span><br><span class="line">    beanFactory.registerResolvableDependency(ApplicationEventPublisher.class, <span class="keyword">this</span>);</span><br><span class="line">    beanFactory.registerResolvableDependency(ApplicationContext.class, <span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 这个 BeanPostProcessor 也很简单，在 bean 实例化后，如果是 ApplicationListener 的子类，</span></span><br><span class="line">    <span class="comment">// 那么将其添加到 listener 列表中，可以理解成：注册事件监听器</span></span><br><span class="line">    beanFactory.addBeanPostProcessor(<span class="keyword">new</span> ApplicationListenerDetector(<span class="keyword">this</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 这里涉及到特殊的 bean，名为：loadTimeWeaver</span></span><br><span class="line">    <span class="keyword">if</span> (beanFactory.containsBean(LOAD_TIME_WEAVER_BEAN_NAME)) &#123;</span><br><span class="line">        beanFactory.addBeanPostProcessor(<span class="keyword">new</span> LoadTimeWeaverAwareProcessor(beanFactory));</span><br><span class="line">        <span class="comment">// Set a temporary ClassLoader for type matching.</span></span><br><span class="line">        beanFactory.setTempClassLoader(<span class="keyword">new</span> ContextTypeMatchClassLoader(beanFactory.getBeanClassLoader()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 从下面几行代码我们可以知道，Spring 往往很 &quot;智能&quot; 就是因为它会帮我们默认注册一些有用的 bean，</span></span><br><span class="line"><span class="comment">    * 我们也可以选择覆盖</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 如果没有定义 &quot;environment&quot; 这个 bean，那么 Spring 会 &quot;手动&quot; 注册一个</span></span><br><span class="line">    <span class="keyword">if</span> (!beanFactory.containsLocalBean(ENVIRONMENT_BEAN_NAME)) &#123;</span><br><span class="line">        beanFactory.registerSingleton(ENVIRONMENT_BEAN_NAME, getEnvironment());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 如果没有定义 &quot;systemProperties&quot; 这个 bean，那么 Spring 会 &quot;手动&quot; 注册一个</span></span><br><span class="line">    <span class="keyword">if</span> (!beanFactory.containsLocalBean(SYSTEM_PROPERTIES_BEAN_NAME)) &#123;</span><br><span class="line">        beanFactory.registerSingleton(SYSTEM_PROPERTIES_BEAN_NAME, getEnvironment().getSystemProperties());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 如果没有定义 &quot;systemEnvironment&quot; 这个 bean，那么 Spring 会 &quot;手动&quot; 注册一个</span></span><br><span class="line">    <span class="keyword">if</span> (!beanFactory.containsLocalBean(SYSTEM_ENVIRONMENT_BEAN_NAME)) &#123;</span><br><span class="line">        beanFactory.registerSingleton(SYSTEM_ENVIRONMENT_BEAN_NAME, getEnvironment().getSystemEnvironment());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="初始化所有的-singleton-beans：finishBeanFactoryInitialization-方法"><a href="#初始化所有的-singleton-beans：finishBeanFactoryInitialization-方法" class="headerlink" title="初始化所有的 singleton beans：finishBeanFactoryInitialization() 方法"></a>初始化所有的 singleton beans：finishBeanFactoryInitialization() 方法</h2><p>到目前为止，应该说 BeanFactory 已经创建完成，并且所有的实现了 BeanFactoryPostProcessor 接口的 Bean 都已经初始化并且其中的 postProcessBeanFactory(factory) 方法已经得到执行了。所有实现了 BeanPostProcessor 接口的 Bean 也都完成了初始化</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 初始化剩余的 singleton beans</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">finishBeanFactoryInitialization</span><span class="params">(ConfigurableListableBeanFactory beanFactory)</span> </span>&#123;</span><br><span class="line">   <span class="comment">// 首先，初始化名字为 conversionService 的 Bean。</span></span><br><span class="line">   <span class="comment">// 它用来将前端传过来的参数和后端的 controller 方法上的参数进行绑定的时候用</span></span><br><span class="line">   <span class="keyword">if</span> (beanFactory.containsBean(CONVERSION_SERVICE_BEAN_NAME) &amp;&amp;</span><br><span class="line">         beanFactory.isTypeMatch(CONVERSION_SERVICE_BEAN_NAME, ConversionService.class)) &#123;</span><br><span class="line">      beanFactory.setConversionService(</span><br><span class="line">            beanFactory.getBean(CONVERSION_SERVICE_BEAN_NAME, ConversionService.class));</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> (!beanFactory.hasEmbeddedValueResolver()) &#123;</span><br><span class="line">      beanFactory.addEmbeddedValueResolver(strVal -&gt; getEnvironment().resolvePlaceholders(strVal));</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 先初始化 LoadTimeWeaverAware 类型的 Bean</span></span><br><span class="line">   <span class="comment">// 一般用于织入第三方模块，在 class 文件载入 JVM 的时候动态织入</span></span><br><span class="line">   String[] weaverAwareNames = beanFactory.getBeanNamesForType(LoadTimeWeaverAware.class, <span class="keyword">false</span>, <span class="keyword">false</span>);</span><br><span class="line">   <span class="keyword">for</span> (String weaverAwareName : weaverAwareNames) &#123;</span><br><span class="line">      getBean(weaverAwareName);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   beanFactory.setTempClassLoader(<span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 没什么别的目的，因为到这一步的时候，Spring 已经开始预初始化 singleton beans 了，</span></span><br><span class="line">   <span class="comment">// 肯定不希望这个时候还出现 bean 定义解析、加载、注册。</span></span><br><span class="line">   beanFactory.freezeConfiguration();</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 开始初始化剩下的</span></span><br><span class="line">   beanFactory.preInstantiateSingletons();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="preInstantiateSingletons"><a href="#preInstantiateSingletons" class="headerlink" title="preInstantiateSingletons"></a>preInstantiateSingletons</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">preInstantiateSingletons</span><span class="params">()</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">   <span class="keyword">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class="line">      logger.trace(<span class="string">&quot;Pre-instantiating singletons in &quot;</span> + <span class="keyword">this</span>);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// Iterate over a copy to allow for init methods which in turn register new bean definitions.</span></span><br><span class="line">   <span class="comment">// While this may not be part of the regular factory bootstrap, it does otherwise work fine.</span></span><br><span class="line">   List&lt;String&gt; beanNames = <span class="keyword">new</span> ArrayList&lt;&gt;(<span class="keyword">this</span>.beanDefinitionNames);</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 触发所有的非懒加载的 singleton beans 的初始化操作</span></span><br><span class="line">   <span class="keyword">for</span> (String beanName : beanNames) &#123;</span><br><span class="line">      <span class="comment">// 合并父Bean中的配置，注意 &lt;bean id=&quot;&quot; class=&quot;&quot; parent=&quot;&quot; /&gt; 中的 parent，用的不多吧，</span></span><br><span class="line">      RootBeanDefinition bd = getMergedLocalBeanDefinition(beanName);</span><br><span class="line">      <span class="comment">// 非抽象、非懒加载的singletons。如果配置了 &#x27;abstract = true&#x27;，那是不需要初始化的</span></span><br><span class="line">      <span class="keyword">if</span> (!bd.isAbstract() &amp;&amp; bd.isSingleton() &amp;&amp; !bd.isLazyInit()) &#123;</span><br><span class="line">         <span class="comment">// 处理 FactoryBean，附录有介绍</span></span><br><span class="line">         <span class="keyword">if</span> (isFactoryBean(beanName)) &#123;</span><br><span class="line">            <span class="comment">// FactoryBean 的话，在beanName前面加上 ‘&amp;’ 符号。再调用 getBean</span></span><br><span class="line">            Object bean = getBean(FACTORY_BEAN_PREFIX + beanName);</span><br><span class="line">            </span><br><span class="line">             <span class="keyword">if</span> (bean <span class="keyword">instanceof</span> FactoryBean) &#123;</span><br><span class="line">               FactoryBean&lt;?&gt; factory = (FactoryBean&lt;?&gt;) bean;</span><br><span class="line">               <span class="keyword">boolean</span> isEagerInit;</span><br><span class="line">               <span class="comment">// 判断当前 FactoryBean 是否是 SmartFactoryBean 的实现，此处忽略，直接跳过</span></span><br><span class="line">               <span class="keyword">if</span> (System.getSecurityManager() != <span class="keyword">null</span> &amp;&amp; factory <span class="keyword">instanceof</span> SmartFactoryBean) &#123;</span><br><span class="line">                  isEagerInit = AccessController.doPrivileged(</span><br><span class="line">                        (PrivilegedAction&lt;Boolean&gt;) ((SmartFactoryBean&lt;?&gt;) factory)::isEagerInit,</span><br><span class="line">                        getAccessControlContext());</span><br><span class="line">               &#125;</span><br><span class="line">               <span class="keyword">else</span> &#123;</span><br><span class="line">                  isEagerInit = (factory <span class="keyword">instanceof</span> SmartFactoryBean &amp;&amp;</span><br><span class="line">                        ((SmartFactoryBean&lt;?&gt;) factory).isEagerInit());</span><br><span class="line">               &#125;</span><br><span class="line">               <span class="keyword">if</span> (isEagerInit) &#123;</span><br><span class="line">                  getBean(beanName);</span><br><span class="line">               &#125;</span><br><span class="line">            &#125;</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 对于普通的 Bean，只要调用 getBean(beanName) 这个方法就可以进行初始化了</span></span><br><span class="line">            getBean(beanName);</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 所有的非懒加载的 singleton beans 已经完成了初始化</span></span><br><span class="line">   <span class="comment">// 如果定义的 bean 是实现了 SmartInitializingSingleton 接口的，那么在这里得到回调，忽略</span></span><br><span class="line">   <span class="keyword">for</span> (String beanName : beanNames) &#123;</span><br><span class="line">      Object singletonInstance = getSingleton(beanName);</span><br><span class="line">      <span class="keyword">if</span> (singletonInstance <span class="keyword">instanceof</span> SmartInitializingSingleton) &#123;</span><br><span class="line">         SmartInitializingSingleton smartSingleton = (SmartInitializingSingleton) singletonInstance;</span><br><span class="line">         <span class="keyword">if</span> (System.getSecurityManager() != <span class="keyword">null</span>) &#123;</span><br><span class="line">            AccessController.doPrivileged((PrivilegedAction&lt;Object&gt;) () -&gt; &#123;</span><br><span class="line">               smartSingleton.afterSingletonsInstantiated();</span><br><span class="line">               <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            &#125;, getAccessControlContext());</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">else</span> &#123;</span><br><span class="line">            smartSingleton.afterSingletonsInstantiated();</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="getBean"><a href="#getBean" class="headerlink" title="getBean"></a>getBean</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">getBean</span><span class="params">(String name)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">   <span class="keyword">return</span> doGetBean(name, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">false</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 在剖析初始化 Bean 的过程，但是 getBean 方法我们经常是用来从容器中获取 Bean 用的，注意切换思路，</span></span><br><span class="line"><span class="comment">// 已经初始化过了就从容器中直接返回，否则就先初始化再返回</span></span><br><span class="line"><span class="keyword">protected</span> &lt;T&gt; <span class="function">T <span class="title">doGetBean</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">			String name, <span class="meta">@Nullable</span> Class&lt;T&gt; requiredType, <span class="meta">@Nullable</span> Object[] args, <span class="keyword">boolean</span> typeCheckOnly)</span></span></span><br><span class="line"><span class="function">			<span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取一个 “正统的” beanName，处理两种情况，一个是前面说的 FactoryBean(前面带 ‘&amp;’)，</span></span><br><span class="line">    <span class="comment">// 一个是别名问题，因为这个方法是 getBean，获取 Bean 用的，你要是传一个别名进来，是完全可以的</span></span><br><span class="line">    String beanName = transformedBeanName(name);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 注意跟着这个，这个是返回值</span></span><br><span class="line">    Object bean;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 检查下是不是已经创建过了</span></span><br><span class="line">    Object sharedInstance = getSingleton(beanName);</span><br><span class="line">    <span class="comment">// 进来的时候都是 getBean(beanName)，所以 args 其实是 null 的，但是如果 args 不为空的时候，那么意味着调用方不是希望获取 Bean，而是创建 Bean</span></span><br><span class="line">    <span class="keyword">if</span> (sharedInstance != <span class="keyword">null</span> &amp;&amp; args == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (isSingletonCurrentlyInCreation(beanName)) &#123;</span><br><span class="line">                logger.trace(<span class="string">&quot;Returning eagerly cached instance of singleton bean &#x27;&quot;</span> + beanName +</span><br><span class="line">                             <span class="string">&quot;&#x27; that is not fully initialized yet - a consequence of a circular reference&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                logger.trace(<span class="string">&quot;Returning cached instance of singleton bean &#x27;&quot;</span> + beanName + <span class="string">&quot;&#x27;&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 如果是普通 Bean 的话，直接返回 sharedInstance，</span></span><br><span class="line">        <span class="comment">// 如果是 FactoryBean 的话，返回它创建的那个实例对象</span></span><br><span class="line">        bean = getObjectForBeanInstance(sharedInstance, name, beanName, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 当前线程已经创建过了此 beanName 的 prototype 类型的 bean，那么抛异常</span></span><br><span class="line">        <span class="keyword">if</span> (isPrototypeCurrentlyInCreation(beanName)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> BeanCurrentlyInCreationException(beanName);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 检查一下这个 BeanDefinition 在容器中是否存在</span></span><br><span class="line">        BeanFactory parentBeanFactory = getParentBeanFactory();</span><br><span class="line">        <span class="keyword">if</span> (parentBeanFactory != <span class="keyword">null</span> &amp;&amp; !containsBeanDefinition(beanName)) &#123;</span><br><span class="line">             <span class="comment">// 如果当前容器不存在这个 BeanDefinition，试试父容器中有没有</span></span><br><span class="line">            String nameToLookup = originalBeanName(name);</span><br><span class="line">            <span class="keyword">if</span> (parentBeanFactory <span class="keyword">instanceof</span> AbstractBeanFactory) &#123;</span><br><span class="line">                <span class="comment">// 递归调用父容器的doGetBean方法</span></span><br><span class="line">                <span class="keyword">return</span> ((AbstractBeanFactory) parentBeanFactory).doGetBean(</span><br><span class="line">                    nameToLookup, requiredType, args, typeCheckOnly);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (args != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> (T) parentBeanFactory.getBean(nameToLookup, args);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (requiredType != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="comment">// No args -&gt; delegate to standard getBean method.</span></span><br><span class="line">                <span class="keyword">return</span> parentBeanFactory.getBean(nameToLookup, requiredType);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> (T) parentBeanFactory.getBean(nameToLookup);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">		<span class="comment">//标记当前bean正在创建</span></span><br><span class="line">        <span class="comment">//通过synchronized锁将beanName放入Set集合，防止多线程情况下创建多个Bean</span></span><br><span class="line">        <span class="keyword">if</span> (!typeCheckOnly) &#123;</span><br><span class="line">            markBeanAsCreated(beanName);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 到这里的话，要准备创建 Bean 了，对于 singleton 的 Bean 来说，容器中还没创建过此 Bean；</span></span><br><span class="line"><span class="comment">         * 对于 prototype 的 Bean 来说，本来就是要创建一个新的 Bean。</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//根据beanName获取合并后的BeanDefinition即RootBeanDefinition</span></span><br><span class="line">            RootBeanDefinition mbd = getMergedLocalBeanDefinition(beanName);</span><br><span class="line">            checkMergedBeanDefinition(mbd, beanName, args);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 先初始化依赖的所有 Bean，这个很好理解。</span></span><br><span class="line">            <span class="comment">// 注意，这里的依赖指的是 depends-on 中定义的依赖</span></span><br><span class="line">            String[] dependsOn = mbd.getDependsOn();</span><br><span class="line">            <span class="keyword">if</span> (dependsOn != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">for</span> (String dep : dependsOn) &#123;</span><br><span class="line">                    <span class="comment">//检查是不是有循环依赖，这里的循环依赖和我们前面说的循环依赖又不一样，这里肯定是不允许出现的，不然要乱套了</span></span><br><span class="line">                    <span class="keyword">if</span> (isDependent(beanName, dep)) &#123;</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> BeanCreationException(mbd.getResourceDescription(), beanName,</span><br><span class="line">                                                        <span class="string">&quot;Circular depends-on relationship between &#x27;&quot;</span> + beanName + <span class="string">&quot;&#x27; and &#x27;&quot;</span> + dep + <span class="string">&quot;&#x27;&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">// 注册一下依赖关系</span></span><br><span class="line">                    registerDependentBean(dep, beanName);</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="comment">// 先初始化被依赖项</span></span><br><span class="line">                        getBean(dep);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">catch</span> (NoSuchBeanDefinitionException ex) &#123;</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> BeanCreationException(mbd.getResourceDescription(), beanName,</span><br><span class="line">                                                        <span class="string">&quot;&#x27;&quot;</span> + beanName + <span class="string">&quot;&#x27; depends on missing bean &#x27;&quot;</span> + dep + <span class="string">&quot;&#x27;&quot;</span>, ex);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 创建 singleton 的实例</span></span><br><span class="line">            <span class="keyword">if</span> (mbd.isSingleton()) &#123;</span><br><span class="line">                <span class="comment">// 先执行getSingleton，在getSingleton方法内部执行createBean方法</span></span><br><span class="line">                sharedInstance = getSingleton(beanName, () -&gt; &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="comment">// 执行创建 Bean</span></span><br><span class="line">                        <span class="keyword">return</span> createBean(beanName, mbd, args);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">catch</span> (BeansException ex) &#123;</span><br><span class="line">                        <span class="comment">// Explicitly remove instance from singleton cache: It might have been put there</span></span><br><span class="line">                        <span class="comment">// eagerly by the creation process, to allow for circular reference resolution.</span></span><br><span class="line">                        <span class="comment">// Also remove any beans that received a temporary reference to the bean.</span></span><br><span class="line">                        destroySingleton(beanName);</span><br><span class="line">                        <span class="keyword">throw</span> ex;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">                bean = getObjectForBeanInstance(sharedInstance, name, beanName, mbd);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 创建 prototype 的实例</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (mbd.isPrototype()) &#123;</span><br><span class="line">                <span class="comment">// It&#x27;s a prototype -&gt; create a new instance.</span></span><br><span class="line">                Object prototypeInstance = <span class="keyword">null</span>;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    beforePrototypeCreation(beanName);</span><br><span class="line">                    <span class="comment">// 执行创建 Bean</span></span><br><span class="line">                    prototypeInstance = createBean(beanName, mbd, args);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">finally</span> &#123;</span><br><span class="line">                    afterPrototypeCreation(beanName);</span><br><span class="line">                &#125;</span><br><span class="line">                bean = getObjectForBeanInstance(prototypeInstance, name, beanName, mbd);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 如果不是 singleton 和 prototype 的话，需要委托给相应的实现类来处理</span></span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                String scopeName = mbd.getScope();</span><br><span class="line">                <span class="keyword">if</span> (!StringUtils.hasLength(scopeName)) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">&quot;No scope name defined for bean ´&quot;</span> + beanName + <span class="string">&quot;&#x27;&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                Scope scope = <span class="keyword">this</span>.scopes.get(scopeName);</span><br><span class="line">                <span class="keyword">if</span> (scope == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">&quot;No Scope registered for scope name &#x27;&quot;</span> + scopeName + <span class="string">&quot;&#x27;&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Object scopedInstance = scope.get(beanName, () -&gt; &#123;</span><br><span class="line">                        beforePrototypeCreation(beanName);</span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            <span class="comment">// 执行创建 Bean</span></span><br><span class="line">                            <span class="keyword">return</span> createBean(beanName, mbd, args);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">finally</span> &#123;</span><br><span class="line">                            afterPrototypeCreation(beanName);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;);</span><br><span class="line">                    bean = getObjectForBeanInstance(scopedInstance, name, beanName, mbd);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">catch</span> (IllegalStateException ex) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> BeanCreationException(beanName,</span><br><span class="line">                                                    <span class="string">&quot;Scope &#x27;&quot;</span> + scopeName + <span class="string">&quot;&#x27; is not active for the current thread; consider &quot;</span> +</span><br><span class="line">                                                    <span class="string">&quot;defining a scoped proxy for this bean if you intend to refer to it from a singleton&quot;</span>,</span><br><span class="line">                                                    ex);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (BeansException ex) &#123;</span><br><span class="line">            cleanupAfterBeanCreationFailure(beanName);</span><br><span class="line">            <span class="keyword">throw</span> ex;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 最后，检查一下类型对不对，不对的话就抛异常，对的话就返回了</span></span><br><span class="line">    <span class="keyword">if</span> (requiredType != <span class="keyword">null</span> &amp;&amp; !requiredType.isInstance(bean)) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            T convertedBean = getTypeConverter().convertIfNecessary(bean, requiredType);</span><br><span class="line">            <span class="keyword">if</span> (convertedBean == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> BeanNotOfRequiredTypeException(name, requiredType, bean.getClass());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> convertedBean;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (TypeMismatchException ex) &#123;</span><br><span class="line">            <span class="keyword">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class="line">                logger.trace(<span class="string">&quot;Failed to convert bean &#x27;&quot;</span> + name + <span class="string">&quot;&#x27; to required type &#x27;&quot;</span> +</span><br><span class="line">                             ClassUtils.getQualifiedName(requiredType) + <span class="string">&quot;&#x27;&quot;</span>, ex);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> BeanNotOfRequiredTypeException(name, requiredType, bean.getClass());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (T) bean;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="getSingleton"><a href="#getSingleton" class="headerlink" title="getSingleton"></a>getSingleton</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">getSingleton</span><span class="params">(String beanName, ObjectFactory&lt;?&gt; singletonFactory)</span> </span>&#123;</span><br><span class="line">    Assert.notNull(beanName, <span class="string">&quot;Bean name must not be null&quot;</span>);</span><br><span class="line">    <span class="comment">// 锁住singletonObjects</span></span><br><span class="line">    <span class="keyword">synchronized</span> (<span class="keyword">this</span>.singletonObjects) &#123;</span><br><span class="line">        Object singletonObject = <span class="keyword">this</span>.singletonObjects.get(beanName);</span><br><span class="line">        <span class="keyword">if</span> (singletonObject == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.singletonsCurrentlyInDestruction) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> BeanCreationNotAllowedException(beanName,</span><br><span class="line">                                                          <span class="string">&quot;Singleton bean creation not allowed while singletons of this factory are in destruction &quot;</span> +</span><br><span class="line">                                                          <span class="string">&quot;(Do not request a bean from a BeanFactory in a destroy method implementation!)&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">                logger.debug(<span class="string">&quot;Creating shared instance of singleton bean &#x27;&quot;</span> + beanName + <span class="string">&quot;&#x27;&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 判断，并首次把beanName放入singletonsCurrentlyInCreation中</span></span><br><span class="line">            beforeSingletonCreation(beanName);</span><br><span class="line">            <span class="keyword">boolean</span> newSingleton = <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">boolean</span> recordSuppressedExceptions = (<span class="keyword">this</span>.suppressedExceptions == <span class="keyword">null</span>);</span><br><span class="line">            <span class="keyword">if</span> (recordSuppressedExceptions) &#123;</span><br><span class="line">                <span class="keyword">this</span>.suppressedExceptions = <span class="keyword">new</span> LinkedHashSet&lt;&gt;();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 调用createBean()方法</span></span><br><span class="line">                singletonObject = singletonFactory.getObject();</span><br><span class="line">                newSingleton = <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span> (IllegalStateException ex) &#123;</span><br><span class="line">                <span class="comment">// Has the singleton object implicitly appeared in the meantime -&gt;</span></span><br><span class="line">                <span class="comment">// if yes, proceed with it since the exception indicates that state.</span></span><br><span class="line">                singletonObject = <span class="keyword">this</span>.singletonObjects.get(beanName);</span><br><span class="line">                <span class="keyword">if</span> (singletonObject == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> ex;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span> (BeanCreationException ex) &#123;</span><br><span class="line">                <span class="keyword">if</span> (recordSuppressedExceptions) &#123;</span><br><span class="line">                    <span class="keyword">for</span> (Exception suppressedException : <span class="keyword">this</span>.suppressedExceptions) &#123;</span><br><span class="line">                        ex.addRelatedCause(suppressedException);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">throw</span> ex;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">finally</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (recordSuppressedExceptions) &#123;</span><br><span class="line">                    <span class="keyword">this</span>.suppressedExceptions = <span class="keyword">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line">              <span class="comment">//得到单例对象后，再讲beanName从singletonsCurrentlyInCreation中移除</span></span><br><span class="line">                afterSingletonCreation(beanName);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (newSingleton) &#123;</span><br><span class="line">                <span class="comment">// 如果是单例，执行addSingleton(beanName, singletonObject)</span></span><br><span class="line">                <span class="comment">// 添加bean到singletonObjects中</span></span><br><span class="line">                <span class="comment">// </span></span><br><span class="line">                addSingleton(beanName, singletonObject);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> singletonObject;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="createBean"><a href="#createBean" class="headerlink" title="createBean"></a>createBean</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> Object <span class="title">createBean</span><span class="params">(String beanName, RootBeanDefinition mbd, <span class="meta">@Nullable</span> Object[] args)</span></span></span><br><span class="line"><span class="function">			<span class="keyword">throws</span> BeanCreationException </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class="line">        logger.trace(<span class="string">&quot;Creating instance of bean &#x27;&quot;</span> + beanName + <span class="string">&quot;&#x27;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    RootBeanDefinition mbdToUse = mbd;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 确保 BeanDefinition 中的 Class 被加载</span></span><br><span class="line">    Class&lt;?&gt; resolvedClass = resolveBeanClass(mbd, beanName);</span><br><span class="line">    <span class="keyword">if</span> (resolvedClass != <span class="keyword">null</span> &amp;&amp; !mbd.hasBeanClass() &amp;&amp; mbd.getBeanClassName() != <span class="keyword">null</span>) &#123;</span><br><span class="line">        mbdToUse = <span class="keyword">new</span> RootBeanDefinition(mbd);</span><br><span class="line">        mbdToUse.setBeanClass(resolvedClass);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 准备方法覆写，这里又涉及到一个概念：MethodOverrides，它来自于bean定义中的&lt;lookup-method /&gt; 和 &lt;replaced-method /&gt;</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        mbdToUse.prepareMethodOverrides();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (BeanDefinitionValidationException ex) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> BeanDefinitionStoreException(mbdToUse.getResourceDescription(),</span><br><span class="line">                                               beanName, <span class="string">&quot;Validation of method overrides failed&quot;</span>, ex);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 让 BeanPostProcessor 在这一步有机会返回代理，而不是 bean 实例</span></span><br><span class="line">        <span class="comment">// InstantiationAwareBeanPostProcessor后置处理器执行postProcessBeforelnstantiation方法和 postProcessAfterlnitialization方法</span></span><br><span class="line">        Object bean = resolveBeforeInstantiation(beanName, mbdToUse);</span><br><span class="line">        <span class="keyword">if</span> (bean != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> bean;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> BeanCreationException(mbdToUse.getResourceDescription(), beanName,</span><br><span class="line">                                        <span class="string">&quot;BeanPostProcessor before instantiation of bean failed&quot;</span>, ex);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 重头戏，创建 bean</span></span><br><span class="line">        Object beanInstance = doCreateBean(beanName, mbdToUse, args);</span><br><span class="line">        <span class="keyword">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class="line">            logger.trace(<span class="string">&quot;Finished creating instance of bean &#x27;&quot;</span> + beanName + <span class="string">&quot;&#x27;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> beanInstance;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (BeanCreationException | ImplicitlyAppearedSingletonException ex) &#123;</span><br><span class="line">        <span class="comment">// A previously detected exception with proper bean creation context already,</span></span><br><span class="line">        <span class="comment">// or illegal singleton state to be communicated up to DefaultSingletonBeanRegistry.</span></span><br><span class="line">        <span class="keyword">throw</span> ex;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> BeanCreationException(</span><br><span class="line">            mbdToUse.getResourceDescription(), beanName, <span class="string">&quot;Unexpected exception during bean creation&quot;</span>, ex);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="创建-Bean"><a href="#创建-Bean" class="headerlink" title="创建 Bean"></a>创建 Bean</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> Object <span class="title">doCreateBean</span><span class="params">(String beanName, RootBeanDefinition mbd, <span class="meta">@Nullable</span> Object[] args)</span></span></span><br><span class="line"><span class="function">			<span class="keyword">throws</span> BeanCreationException </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Instantiate the bean.</span></span><br><span class="line">    BeanWrapper instanceWrapper = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (mbd.isSingleton()) &#123;</span><br><span class="line">        instanceWrapper = <span class="keyword">this</span>.factoryBeanInstanceCache.remove(beanName);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (instanceWrapper == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 说明不是 FactoryBean，这里实例化 Bean</span></span><br><span class="line">        instanceWrapper = createBeanInstance(beanName, mbd, args);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 这个就是 Bean 里面的 我们定义的类 的实例</span></span><br><span class="line">    Object bean = instanceWrapper.getWrappedInstance();</span><br><span class="line">    <span class="comment">// 类型</span></span><br><span class="line">    Class&lt;?&gt; beanType = instanceWrapper.getWrappedClass();</span><br><span class="line">    <span class="keyword">if</span> (beanType != NullBean.class) &#123;</span><br><span class="line">        mbd.resolvedTargetType = beanType;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Allow post-processors to modify the merged bean definition.</span></span><br><span class="line">    <span class="keyword">synchronized</span> (mbd.postProcessingLock) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!mbd.postProcessed) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 执行MergedBeanDefinitionPostProcessor.postProcessMergedBeanDefinition方法</span></span><br><span class="line">                applyMergedBeanDefinitionPostProcessors(mbd, beanType, beanName);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> BeanCreationException(mbd.getResourceDescription(), beanName,</span><br><span class="line">                                                <span class="string">&quot;Post-processing of merged bean definition failed&quot;</span>, ex);</span><br><span class="line">            &#125;</span><br><span class="line">            mbd.postProcessed = <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 下面这块代码是为了解决循环依赖的问题</span></span><br><span class="line">    <span class="keyword">boolean</span> earlySingletonExposure = (mbd.isSingleton() &amp;&amp; <span class="keyword">this</span>.allowCircularReferences &amp;&amp;</span><br><span class="line">                                      isSingletonCurrentlyInCreation(beanName));</span><br><span class="line">    <span class="keyword">if</span> (earlySingletonExposure) &#123;</span><br><span class="line">        <span class="keyword">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class="line">            logger.trace(<span class="string">&quot;Eagerly caching bean &#x27;&quot;</span> + beanName +</span><br><span class="line">                         <span class="string">&quot;&#x27; to allow for resolving potential circular references&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        addSingletonFactory(beanName, () -&gt; getEarlyBeanReference(beanName, mbd, bean));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Initialize the bean instance.</span></span><br><span class="line">    Object exposedObject = bean;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 进行Bean属性注入</span></span><br><span class="line">        populateBean(beanName, mbd, instanceWrapper);</span><br><span class="line">        <span class="comment">// bean 初始化完成后的各种回调</span></span><br><span class="line">        exposedObject = initializeBean(beanName, exposedObject, mbd);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">        <span class="keyword">if</span> (ex <span class="keyword">instanceof</span> BeanCreationException &amp;&amp; beanName.equals(((BeanCreationException) ex).getBeanName())) &#123;</span><br><span class="line">            <span class="keyword">throw</span> (BeanCreationException) ex;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> BeanCreationException(</span><br><span class="line">                mbd.getResourceDescription(), beanName, <span class="string">&quot;Initialization of bean failed&quot;</span>, ex);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (earlySingletonExposure) &#123;</span><br><span class="line">        Object earlySingletonReference = getSingleton(beanName, <span class="keyword">false</span>);</span><br><span class="line">        <span class="keyword">if</span> (earlySingletonReference != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (exposedObject == bean) &#123;</span><br><span class="line">                exposedObject = earlySingletonReference;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (!<span class="keyword">this</span>.allowRawInjectionDespiteWrapping &amp;&amp; hasDependentBean(beanName)) &#123;</span><br><span class="line">                String[] dependentBeans = getDependentBeans(beanName);</span><br><span class="line">                Set&lt;String&gt; actualDependentBeans = <span class="keyword">new</span> LinkedHashSet&lt;&gt;(dependentBeans.length);</span><br><span class="line">                <span class="keyword">for</span> (String dependentBean : dependentBeans) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (!removeSingletonIfCreatedForTypeCheckOnly(dependentBean)) &#123;</span><br><span class="line">                        actualDependentBeans.add(dependentBean);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (!actualDependentBeans.isEmpty()) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> BeanCurrentlyInCreationException(beanName,</span><br><span class="line">                                                               <span class="string">&quot;Bean with name &#x27;&quot;</span> + beanName + <span class="string">&quot;&#x27; has been injected into other beans [&quot;</span> +</span><br><span class="line">                                                               StringUtils.collectionToCommaDelimitedString(actualDependentBeans) +</span><br><span class="line">                                                               <span class="string">&quot;] in its raw version as part of a circular reference, but has eventually been &quot;</span> +</span><br><span class="line">                                                               <span class="string">&quot;wrapped. This means that said other beans do not use the final version of the &quot;</span> +</span><br><span class="line">                                                               <span class="string">&quot;bean. This is often the result of over-eager type matching - consider using &quot;</span> +</span><br><span class="line">                                                               <span class="string">&quot;&#x27;getBeanNamesForType&#x27; with the &#x27;allowEagerInit&#x27; flag turned off, for example.&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Register bean as disposable.</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 注册销毁方法</span></span><br><span class="line">        registerDisposableBeanIfNecessary(beanName, bean, mbd);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (BeanDefinitionValidationException ex) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> BeanCreationException(</span><br><span class="line">            mbd.getResourceDescription(), beanName, <span class="string">&quot;Invalid destruction signature&quot;</span>, ex);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> exposedObject;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>doCreateBean 中的三个细节出来说说</p>
<ol>
<li>创建 Bean 实例的 createBeanInstance 方法</li>
<li>依赖注入的 populateBean 方法</li>
<li>回调方法 initializeBean</li>
</ol>
<h4 id="创建-Bean-实例：createBeanInstance-方法"><a href="#创建-Bean-实例：createBeanInstance-方法" class="headerlink" title="创建 Bean 实例：createBeanInstance()  方法"></a>创建 Bean 实例：createBeanInstance()  方法</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> BeanWrapper <span class="title">createBeanInstance</span><span class="params">(String beanName, RootBeanDefinition mbd, <span class="meta">@Nullable</span> Object[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 确保已经加载了此 class</span></span><br><span class="line">    Class&lt;?&gt; beanClass = resolveBeanClass(mbd, beanName);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 校验类的访问权限</span></span><br><span class="line">    <span class="keyword">if</span> (beanClass != <span class="keyword">null</span> &amp;&amp; !Modifier.isPublic(beanClass.getModifiers()) &amp;&amp; !mbd.isNonPublicAccessAllowed()) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> BeanCreationException(mbd.getResourceDescription(), beanName,</span><br><span class="line">                                        <span class="string">&quot;Bean class isn&#x27;t public, and non-public access not allowed: &quot;</span> + beanClass.getName());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Supplier&lt;?&gt; instanceSupplier = mbd.getInstanceSupplier();</span><br><span class="line">    <span class="keyword">if</span> (instanceSupplier != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> obtainFromSupplier(instanceSupplier, beanName);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (mbd.getFactoryMethodName() != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 如果工厂方法不为空，采用工厂方法实例化</span></span><br><span class="line">        <span class="keyword">return</span> instantiateUsingFactoryMethod(beanName, mbd, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果不是第一次创建，就可以从以前创建过程知道是采用哪种构造方法</span></span><br><span class="line">    <span class="keyword">boolean</span> resolved = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">boolean</span> autowireNecessary = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">if</span> (args == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (mbd.constructorArgumentLock) &#123;</span><br><span class="line">            <span class="keyword">if</span> (mbd.resolvedConstructorOrFactoryMethod != <span class="keyword">null</span>) &#123;</span><br><span class="line">                resolved = <span class="keyword">true</span>;</span><br><span class="line">                autowireNecessary = mbd.constructorArgumentsResolved;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (resolved) &#123;</span><br><span class="line">        <span class="keyword">if</span> (autowireNecessary) &#123;</span><br><span class="line">            <span class="comment">// 构造函数依赖注入</span></span><br><span class="line">            <span class="keyword">return</span> autowireConstructor(beanName, mbd, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 无参构造函数</span></span><br><span class="line">            <span class="keyword">return</span> instantiateBean(beanName, mbd);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断是否采用有参构造函数</span></span><br><span class="line">    Constructor&lt;?&gt;[] ctors = determineConstructorsFromBeanPostProcessors(beanClass, beanName);</span><br><span class="line">    <span class="keyword">if</span> (ctors != <span class="keyword">null</span> || mbd.getResolvedAutowireMode() == AUTOWIRE_CONSTRUCTOR ||</span><br><span class="line">        mbd.hasConstructorArgumentValues() || !ObjectUtils.isEmpty(args)) &#123;</span><br><span class="line">        <span class="comment">// 构造函数依赖注入</span></span><br><span class="line">        <span class="keyword">return</span> autowireConstructor(beanName, mbd, ctors, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Preferred constructors for default construction?</span></span><br><span class="line">    ctors = mbd.getPreferredConstructors();</span><br><span class="line">    <span class="keyword">if</span> (ctors != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> autowireConstructor(beanName, mbd, ctors, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 调用无参构造函数</span></span><br><span class="line">    <span class="keyword">return</span> instantiateBean(beanName, mbd);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 找最简单的无参构造函数构造实例</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> BeanWrapper <span class="title">instantiateBean</span><span class="params">(String beanName, RootBeanDefinition mbd)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Object beanInstance;</span><br><span class="line">        <span class="keyword">if</span> (System.getSecurityManager() != <span class="keyword">null</span>) &#123;</span><br><span class="line">            beanInstance = AccessController.doPrivileged(</span><br><span class="line">                (PrivilegedAction&lt;Object&gt;) () -&gt; getInstantiationStrategy().instantiate(mbd, beanName, <span class="keyword">this</span>),</span><br><span class="line">                getAccessControlContext());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// （重点）实例化</span></span><br><span class="line">            beanInstance = getInstantiationStrategy().instantiate(mbd, beanName, <span class="keyword">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line">         <span class="comment">// 包装一下，返回</span></span><br><span class="line">        BeanWrapper bw = <span class="keyword">new</span> BeanWrapperImpl(beanInstance);</span><br><span class="line">        initBeanWrapper(bw);</span><br><span class="line">        <span class="keyword">return</span> bw;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> BeanCreationException(</span><br><span class="line">            mbd.getResourceDescription(), beanName, <span class="string">&quot;Instantiation of bean failed&quot;</span>, ex);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实例化过程</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">instantiate</span><span class="params">(RootBeanDefinition bd, <span class="meta">@Nullable</span> String beanName, BeanFactory owner)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 如果不存在覆写lookup-method和replaced-method，那就使用 java 反射进行实例化，否则使用 CGLIB</span></span><br><span class="line">    <span class="keyword">if</span> (!bd.hasMethodOverrides()) &#123;</span><br><span class="line">        Constructor&lt;?&gt; constructorToUse;</span><br><span class="line">        <span class="keyword">synchronized</span> (bd.constructorArgumentLock) &#123;</span><br><span class="line">            constructorToUse = (Constructor&lt;?&gt;) bd.resolvedConstructorOrFactoryMethod;</span><br><span class="line">            <span class="keyword">if</span> (constructorToUse == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">final</span> Class&lt;?&gt; clazz = bd.getBeanClass();</span><br><span class="line">                <span class="keyword">if</span> (clazz.isInterface()) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> BeanInstantiationException(clazz, <span class="string">&quot;Specified class is an interface&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (System.getSecurityManager() != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        constructorToUse = AccessController.doPrivileged(</span><br><span class="line">                            (PrivilegedExceptionAction&lt;Constructor&lt;?&gt;&gt;) clazz::getDeclaredConstructor);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span> &#123;</span><br><span class="line">                        constructorToUse = clazz.getDeclaredConstructor();</span><br><span class="line">                    &#125;</span><br><span class="line">                    bd.resolvedConstructorOrFactoryMethod = constructorToUse;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> BeanInstantiationException(clazz, <span class="string">&quot;No default constructor found&quot;</span>, ex);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 利用构造方法进行实例化</span></span><br><span class="line">        <span class="keyword">return</span> BeanUtils.instantiateClass(constructorToUse);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 存在方法覆写，利用 CGLIB 来完成实例化，需要依赖于 CGLIB 生成子类</span></span><br><span class="line">        <span class="keyword">return</span> instantiateWithMethodInjection(bd, beanName, owner);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>到这里，就算实例化完成了</p>
<h4 id="bean-属性注入：populateBean-方法"><a href="#bean-属性注入：populateBean-方法" class="headerlink" title="bean 属性注入：populateBean() 方法"></a>bean 属性注入：populateBean() 方法</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">populateBean</span><span class="params">(String beanName, RootBeanDefinition mbd, <span class="meta">@Nullable</span> BeanWrapper bw)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 对Bean进行判空判断</span></span><br><span class="line">    <span class="keyword">if</span> (bw == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (mbd.hasPropertyValues()) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> BeanCreationException(</span><br><span class="line">                mbd.getResourceDescription(), beanName, <span class="string">&quot;Cannot apply property values to null instance&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// Skip property population phase for null instance.</span></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 循环InstantiationAwareBeanPostProcessors的实现类，执行postProcessAfterInstantiation方法，判断是否终止属性注入</span></span><br><span class="line">    <span class="keyword">if</span> (!mbd.isSynthetic() &amp;&amp; hasInstantiationAwareBeanPostProcessors()) &#123;</span><br><span class="line">        <span class="keyword">for</span> (BeanPostProcessor bp : getBeanPostProcessors()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (bp <span class="keyword">instanceof</span> InstantiationAwareBeanPostProcessor) &#123;</span><br><span class="line">                InstantiationAwareBeanPostProcessor ibp = (InstantiationAwareBeanPostProcessor) bp;</span><br><span class="line">                <span class="keyword">if</span> (!ibp.postProcessAfterInstantiation(bw.getWrappedInstance(), beanName)) &#123;</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 根据BeanDefinition.propertyValues获取MutablePropertyValues实例</span></span><br><span class="line">    <span class="comment">// MutablePropertyValues实现了PropertyValues接口，提供属性的读写操作实现，同时可以通过调用构造函数实现深拷贝</span></span><br><span class="line">    PropertyValues pvs = (mbd.hasPropertyValues() ? mbd.getPropertyValues() : <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 根据Bean配置的依赖注入方式完成注入，默认是0，即不走以下逻辑，所有的依赖注入都需要在xml文件中有显式的配置</span></span><br><span class="line">    <span class="comment">// 如果设置了相关的依赖装配方式，会遍历Bean中的属性，根据类型或名称来完成相应注入，无需额外配置</span></span><br><span class="line">    <span class="keyword">int</span> resolvedAutowireMode = mbd.getResolvedAutowireMode();</span><br><span class="line">    <span class="keyword">if</span> (resolvedAutowireMode == AUTOWIRE_BY_NAME || resolvedAutowireMode == AUTOWIRE_BY_TYPE) &#123;</span><br><span class="line">        <span class="comment">// 深拷贝当前已有的配置</span></span><br><span class="line">        MutablePropertyValues newPvs = <span class="keyword">new</span> MutablePropertyValues(pvs);</span><br><span class="line">        <span class="comment">// 根据名称进行注入</span></span><br><span class="line">        <span class="keyword">if</span> (resolvedAutowireMode == AUTOWIRE_BY_NAME) &#123;</span><br><span class="line">            autowireByName(beanName, mbd, bw, newPvs);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 通过类型装配</span></span><br><span class="line">        <span class="keyword">if</span> (resolvedAutowireMode == AUTOWIRE_BY_TYPE) &#123;</span><br><span class="line">            autowireByType(beanName, mbd, bw, newPvs);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 结合注入后的配置，覆盖当前配置</span></span><br><span class="line">        pvs = newPvs;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 容器是否注册了InstantiationAwareBeanPostProcessor</span></span><br><span class="line">    <span class="keyword">boolean</span> hasInstAwareBpps = hasInstantiationAwareBeanPostProcessors();</span><br><span class="line">    <span class="comment">// 是否进行依赖检查</span></span><br><span class="line">    <span class="keyword">boolean</span> needsDepCheck = (mbd.getDependencyCheck() != AbstractBeanDefinition.DEPENDENCY_CHECK_NONE);</span><br><span class="line"></span><br><span class="line">    PropertyDescriptor[] filteredPds = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (hasInstAwareBpps) &#123;</span><br><span class="line">        <span class="keyword">if</span> (pvs == <span class="keyword">null</span>) &#123;</span><br><span class="line">            pvs = mbd.getPropertyValues();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (BeanPostProcessor bp : getBeanPostProcessors()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (bp <span class="keyword">instanceof</span> InstantiationAwareBeanPostProcessor) &#123;</span><br><span class="line">                InstantiationAwareBeanPostProcessor ibp = (InstantiationAwareBeanPostProcessor) bp;</span><br><span class="line">                <span class="comment">// 执行InstantiationAwareBeanPostProcessor.postProcessProperties方法修改Bean的属性值</span></span><br><span class="line">                PropertyValues pvsToUse = ibp.postProcessProperties(pvs, bw.getWrappedInstance(), beanName);</span><br><span class="line">                <span class="keyword">if</span> (pvsToUse == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (filteredPds == <span class="keyword">null</span>) &#123;</span><br><span class="line">                        <span class="comment">// 过滤出所有需要进行依赖检查的属性编辑器</span></span><br><span class="line">                        filteredPds = filterPropertyDescriptorsForDependencyCheck(bw, mbd.allowCaching);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">// 对采用 @Autowired、@Value 注解的依赖进行设值</span></span><br><span class="line">                    <span class="comment">// 由类AutowiredAnnotationBeanPostProcessor来处理</span></span><br><span class="line">                    pvsToUse = ibp.postProcessPropertyValues(pvs, filteredPds, bw.getWrappedInstance(), beanName);</span><br><span class="line">                    <span class="keyword">if</span> (pvsToUse == <span class="keyword">null</span>) &#123;</span><br><span class="line">                        <span class="keyword">return</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                pvs = pvsToUse;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 检查是否满足相关依赖关系，对应的depends-on属性，需要确保所有依赖的Bean先完成初始化</span></span><br><span class="line">    <span class="keyword">if</span> (needsDepCheck) &#123;</span><br><span class="line">        <span class="keyword">if</span> (filteredPds == <span class="keyword">null</span>) &#123;</span><br><span class="line">            filteredPds = filterPropertyDescriptorsForDependencyCheck(bw, mbd.allowCaching);</span><br><span class="line">        &#125;</span><br><span class="line">        checkDependencies(beanName, mbd, filteredPds, pvs);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (pvs != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 将pvs上所有的属性填充到BeanWrapper对应的Bean实例中</span></span><br><span class="line">        applyPropertyValues(beanName, mbd, bw, pvs);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="autowireByName"><a href="#autowireByName" class="headerlink" title="autowireByName"></a>autowireByName</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">autowireByName</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">			String beanName, AbstractBeanDefinition mbd, BeanWrapper bw, MutablePropertyValues pvs)</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 简单属性：基本类型及其包装类，Number,Date等</span></span><br><span class="line">    <span class="comment">// 获取Bean中所有可写的（即set方法存在)，存在于BeanDefinition里的PropertyValues，且不是简单属性的属性名</span></span><br><span class="line">    String[] propertyNames = unsatisfiedNonSimpleProperties(mbd, bw);</span><br><span class="line">    <span class="keyword">for</span> (String propertyName : propertyNames) &#123;</span><br><span class="line">        <span class="comment">// 容器中包含指定名称的Bean</span></span><br><span class="line">        <span class="keyword">if</span> (containsBean(propertyName)) &#123;</span><br><span class="line">            <span class="comment">// 调用getBean方法向IOC容器索取指定名称的Bean实例，迭代触发属性的初始化和依赖注入</span></span><br><span class="line">            Object bean = getBean(propertyName);</span><br><span class="line">            <span class="comment">// 根据名称将bean添加到pvs中</span></span><br><span class="line">            pvs.add(propertyName, bean);</span><br><span class="line">            <span class="comment">// 注册依赖关系</span></span><br><span class="line">            registerDependentBean(propertyName, beanName);</span><br><span class="line">            <span class="keyword">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class="line">                logger.trace(<span class="string">&quot;Added autowiring by name from bean name &#x27;&quot;</span> + beanName +</span><br><span class="line">                             <span class="string">&quot;&#x27; via property &#x27;&quot;</span> + propertyName + <span class="string">&quot;&#x27; to bean named &#x27;&quot;</span> + propertyName + <span class="string">&quot;&#x27;&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class="line">                logger.trace(<span class="string">&quot;Not autowiring property &#x27;&quot;</span> + propertyName + <span class="string">&quot;&#x27; of bean &#x27;&quot;</span> + beanName +</span><br><span class="line">                             <span class="string">&quot;&#x27; by name: no matching bean found&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="autowireByType"><a href="#autowireByType" class="headerlink" title="autowireByType"></a>autowireByType</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">autowireByType</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">			String beanName, AbstractBeanDefinition mbd, BeanWrapper bw, MutablePropertyValues pvs)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取用户定义的类型转换器</span></span><br><span class="line">    TypeConverter converter = getCustomTypeConverter();</span><br><span class="line">    <span class="keyword">if</span> (converter == <span class="keyword">null</span>) &#123;</span><br><span class="line">        converter = bw;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"> 	<span class="comment">// 存放解析的要注入的属性</span></span><br><span class="line">    Set&lt;String&gt; autowiredBeanNames = <span class="keyword">new</span> LinkedHashSet&lt;&gt;(<span class="number">4</span>);</span><br><span class="line">    <span class="comment">// 获取Bean中所有可写的（即set方法存在)，存在于BeanDefinition里的PropertyValues，且不是简单属性的属性名</span></span><br><span class="line">    String[] propertyNames = unsatisfiedNonSimpleProperties(mbd, bw);</span><br><span class="line">    <span class="keyword">for</span> (String propertyName : propertyNames) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 获取指定属性名称的属性描述器</span></span><br><span class="line">            PropertyDescriptor pd = bw.getPropertyDescriptor(propertyName);</span><br><span class="line">            <span class="comment">// 不对Object类型的属性进行autowiring自动依赖注入</span></span><br><span class="line">            <span class="keyword">if</span> (Object.class != pd.getPropertyType()) &#123;</span><br><span class="line">                <span class="comment">// 获取属性的setter方法</span></span><br><span class="line">                MethodParameter methodParam = BeanUtils.getWriteMethodParameter(pd);</span><br><span class="line">                <span class="comment">// 检查指定类型是否可以被转换为目标对象的类型</span></span><br><span class="line">                <span class="keyword">boolean</span> eager = !(bw.getWrappedInstance() <span class="keyword">instanceof</span> PriorityOrdered);</span><br><span class="line">                <span class="comment">// 创建一个要被注入的依赖描述</span></span><br><span class="line">                DependencyDescriptor desc = <span class="keyword">new</span> AutowireByTypeDependencyDescriptor(methodParam, eager);</span><br><span class="line">                <span class="comment">// 根据容器的Bean定义解析依赖关系，返回所有要被注入的Bean对象</span></span><br><span class="line">                Object autowiredArgument = resolveDependency(desc, beanName, autowiredBeanNames, converter);</span><br><span class="line">                <span class="keyword">if</span> (autowiredArgument != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="comment">// 根据名称将bean添加到pvs中</span></span><br><span class="line">                    pvs.add(propertyName, autowiredArgument);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">for</span> (String autowiredBeanName : autowiredBeanNames) &#123;</span><br><span class="line">                    <span class="comment">// 注册依赖关系</span></span><br><span class="line">                    registerDependentBean(autowiredBeanName, beanName);</span><br><span class="line">                    <span class="keyword">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class="line">                        logger.trace(<span class="string">&quot;Autowiring by type from bean name &#x27;&quot;</span> + beanName + <span class="string">&quot;&#x27; via property &#x27;&quot;</span> +</span><br><span class="line">                                     propertyName + <span class="string">&quot;&#x27; to bean named &#x27;&quot;</span> + autowiredBeanName + <span class="string">&quot;&#x27;&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 释放已自动注入的属性</span></span><br><span class="line">                autowiredBeanNames.clear();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (BeansException ex) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UnsatisfiedDependencyException(mbd.getResourceDescription(), beanName, propertyName, ex);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="applyPropertyValues"><a href="#applyPropertyValues" class="headerlink" title="applyPropertyValues"></a>applyPropertyValues</h5><p>xml 配置的属性进行依赖注入处理</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">applyPropertyValues</span><span class="params">(String beanName, BeanDefinition mbd, BeanWrapper bw, PropertyValues pvs)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 为空直接返回</span></span><br><span class="line">    <span class="keyword">if</span> (pvs.isEmpty()) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (System.getSecurityManager() != <span class="keyword">null</span> &amp;&amp; bw <span class="keyword">instanceof</span> BeanWrapperImpl) &#123;</span><br><span class="line">        <span class="comment">// 设置安全上下文，JDK安全机制</span></span><br><span class="line">        ((BeanWrapperImpl) bw).setSecurityContext(getAccessControlContext());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 封装属性值</span></span><br><span class="line">    MutablePropertyValues mpvs = <span class="keyword">null</span>;</span><br><span class="line">    List&lt;PropertyValue&gt; original;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (pvs <span class="keyword">instanceof</span> MutablePropertyValues) &#123;</span><br><span class="line">        mpvs = (MutablePropertyValues) pvs;</span><br><span class="line">        <span class="comment">// 如果属性值已经转换</span></span><br><span class="line">        <span class="keyword">if</span> (mpvs.isConverted()) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">//为实例化对象设置属性值</span></span><br><span class="line">                bw.setPropertyValues(mpvs);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span> (BeansException ex) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> BeanCreationException(</span><br><span class="line">                    mbd.getResourceDescription(), beanName, <span class="string">&quot;Error setting property values&quot;</span>, ex);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 获取属性值对象的原始类型值</span></span><br><span class="line">        original = mpvs.getPropertyValueList();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        original = Arrays.asList(pvs.getPropertyValues());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取用户自定义的类型转换</span></span><br><span class="line">    TypeConverter converter = getCustomTypeConverter();</span><br><span class="line">    <span class="keyword">if</span> (converter == <span class="keyword">null</span>) &#123;</span><br><span class="line">        converter = bw;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 创建一个Bean定义属性值解析器，将Bean定义中的属性值解析为Bean实例对象的实际值</span></span><br><span class="line">    BeanDefinitionValueResolver valueResolver = <span class="keyword">new</span> BeanDefinitionValueResolver(<span class="keyword">this</span>, beanName, mbd, converter);</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 为属性的解析值创建一个拷贝，将拷贝的数据注入到实例对象中</span></span><br><span class="line">    List&lt;PropertyValue&gt; deepCopy = <span class="keyword">new</span> ArrayList&lt;&gt;(original.size());</span><br><span class="line">    <span class="keyword">boolean</span> resolveNecessary = <span class="keyword">false</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 开始遍历检查original中的属性，对未被解析的先解析/已解析的直接加入deepCopy中，最后再填充到具体的Bean实例中</span></span><br><span class="line">    <span class="keyword">for</span> (PropertyValue pv : original) &#123;</span><br><span class="line">        <span class="comment">// 如果属性已经转化，直接添加</span></span><br><span class="line">        <span class="keyword">if</span> (pv.isConverted()) &#123;</span><br><span class="line">            deepCopy.add(pv);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 属性名</span></span><br><span class="line">            String propertyName = pv.getName();</span><br><span class="line">            <span class="comment">// 原始的属性值，即转换之前的属性值</span></span><br><span class="line">            Object originalValue = pv.getValue();</span><br><span class="line">            <span class="keyword">if</span> (originalValue == AutowiredPropertyMarker.INSTANCE) &#123;</span><br><span class="line">                Method writeMethod = bw.getPropertyDescriptor(propertyName).getWriteMethod();</span><br><span class="line">                <span class="keyword">if</span> (writeMethod == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;Autowire marker for property without write method: &quot;</span> + pv);</span><br><span class="line">                &#125;</span><br><span class="line">                originalValue = <span class="keyword">new</span> DependencyDescriptor(<span class="keyword">new</span> MethodParameter(writeMethod, <span class="number">0</span>), <span class="keyword">true</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 转换属性值，将引用转换为IOC容器中实例化对象引用</span></span><br><span class="line">			<span class="comment">// 对于RuntimeReference，根据beanName,通过getBean(beanName)拿到具体的对象</span></span><br><span class="line">            Object resolvedValue = valueResolver.resolveValueIfNecessary(pv, originalValue);</span><br><span class="line">            Object convertedValue = resolvedValue;</span><br><span class="line">            <span class="comment">// 判断属性值是否可以转换</span></span><br><span class="line">            <span class="keyword">boolean</span> convertible = bw.isWritableProperty(propertyName) &amp;&amp;</span><br><span class="line">                !PropertyAccessorUtils.isNestedOrIndexedProperty(propertyName);</span><br><span class="line">            <span class="keyword">if</span> (convertible) &#123;</span><br><span class="line">                <span class="comment">//使用用户自定义的类型转换器转换属性值</span></span><br><span class="line">                convertedValue = convertForProperty(resolvedValue, propertyName, bw, converter);</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 存储转换后的属性值，避免需要重复转换</span></span><br><span class="line">            <span class="keyword">if</span> (resolvedValue == originalValue) &#123;</span><br><span class="line">                <span class="keyword">if</span> (convertible) &#123;</span><br><span class="line">                    <span class="comment">// 设置属性转换之后的值</span></span><br><span class="line">                    pv.setConvertedValue(convertedValue);</span><br><span class="line">                &#125;</span><br><span class="line">                deepCopy.add(pv);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 属性是可转换的，且属性原始值是字符串类型，且属性的原始类型值不是</span></span><br><span class="line">            <span class="comment">// 动态生成的字符串，且属性的原始值不是集合或者数组类型</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (convertible &amp;&amp; originalValue <span class="keyword">instanceof</span> TypedStringValue &amp;&amp;</span><br><span class="line">                     !((TypedStringValue) originalValue).isDynamic() &amp;&amp;</span><br><span class="line">                     !(convertedValue <span class="keyword">instanceof</span> Collection || ObjectUtils.isArray(convertedValue))) &#123;</span><br><span class="line">                pv.setConvertedValue(convertedValue);</span><br><span class="line">                <span class="comment">// 重新封装属性的值</span></span><br><span class="line">                deepCopy.add(pv);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                resolveNecessary = <span class="keyword">true</span>;</span><br><span class="line">                deepCopy.add(<span class="keyword">new</span> PropertyValue(pv, convertedValue));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (mpvs != <span class="keyword">null</span> &amp;&amp; !resolveNecessary) &#123;</span><br><span class="line">        <span class="comment">// 标记属性值已经转换过</span></span><br><span class="line">        mpvs.setConverted();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 进行属性依赖注入</span></span><br><span class="line">        bw.setPropertyValues(<span class="keyword">new</span> MutablePropertyValues(deepCopy));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (BeansException ex) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> BeanCreationException(</span><br><span class="line">            mbd.getResourceDescription(), beanName, <span class="string">&quot;Error setting property values&quot;</span>, ex);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// AbstractPropertyAccessor.setPropertyValues -&gt; </span></span><br><span class="line"><span class="comment">// AbstractNestablePropertyAccessor.setPropertyValue</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">setPropertyValue</span><span class="params">(PropertyTokenHolder tokens, PropertyValue pv)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (tokens.keys != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 处理集合类型</span></span><br><span class="line">        processKeyedProperty(tokens, pv);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 处理非集合类型</span></span><br><span class="line">        processLocalProperty(tokens, pv);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">processLocalProperty</span><span class="params">(PropertyTokenHolder tokens, PropertyValue pv)</span> </span>&#123;</span><br><span class="line">    PropertyHandler ph = getLocalPropertyHandler(tokens.actualName);</span><br><span class="line">    <span class="keyword">if</span> (ph == <span class="keyword">null</span> || !ph.isWritable()) &#123;</span><br><span class="line">        <span class="keyword">if</span> (pv.isOptional()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">                logger.debug(<span class="string">&quot;Ignoring optional value for property &#x27;&quot;</span> + tokens.actualName +</span><br><span class="line">                             <span class="string">&quot;&#x27; - property not found on bean class [&quot;</span> + getRootClass().getName() + <span class="string">&quot;]&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> createNotWritablePropertyException(tokens.canonicalName);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Object oldValue = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Object originalValue = pv.getValue();</span><br><span class="line">        Object valueToApply = originalValue;</span><br><span class="line">        <span class="keyword">if</span> (!Boolean.FALSE.equals(pv.conversionNecessary)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (pv.isConverted()) &#123;</span><br><span class="line">                valueToApply = pv.getConvertedValue();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (isExtractOldValueForEditor() &amp;&amp; ph.isReadable()) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        oldValue = ph.getValue();</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (ex <span class="keyword">instanceof</span> PrivilegedActionException) &#123;</span><br><span class="line">                            ex = ((PrivilegedActionException) ex).getException();</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">                            logger.debug(<span class="string">&quot;Could not read previous value of property &#x27;&quot;</span> +</span><br><span class="line">                                         <span class="keyword">this</span>.nestedPath + tokens.canonicalName + <span class="string">&quot;&#x27;&quot;</span>, ex);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                valueToApply = convertForProperty(</span><br><span class="line">                    tokens.canonicalName, oldValue, originalValue, ph.toTypeDescriptor());</span><br><span class="line">            &#125;</span><br><span class="line">            pv.getOriginalPropertyValue().conversionNecessary = (valueToApply != originalValue);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 通过反射注入</span></span><br><span class="line">        ph.setValue(valueToApply);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (TypeMismatchException ex) &#123;</span><br><span class="line">        <span class="keyword">throw</span> ex;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (InvocationTargetException ex) &#123;</span><br><span class="line">        PropertyChangeEvent propertyChangeEvent = <span class="keyword">new</span> PropertyChangeEvent(</span><br><span class="line">            getRootInstance(), <span class="keyword">this</span>.nestedPath + tokens.canonicalName, oldValue, pv.getValue());</span><br><span class="line">        <span class="keyword">if</span> (ex.getTargetException() <span class="keyword">instanceof</span> ClassCastException) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> TypeMismatchException(propertyChangeEvent, ph.getPropertyType(), ex.getTargetException());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            Throwable cause = ex.getTargetException();</span><br><span class="line">            <span class="keyword">if</span> (cause <span class="keyword">instanceof</span> UndeclaredThrowableException) &#123;</span><br><span class="line">                <span class="comment">// May happen e.g. with Groovy-generated methods</span></span><br><span class="line">                cause = cause.getCause();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> MethodInvocationException(propertyChangeEvent, cause);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">        PropertyChangeEvent pce = <span class="keyword">new</span> PropertyChangeEvent(</span><br><span class="line">            getRootInstance(), <span class="keyword">this</span>.nestedPath + tokens.canonicalName, oldValue, pv.getValue());</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> MethodInvocationException(pce, ex);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h4 id="initializeBean"><a href="#initializeBean" class="headerlink" title="initializeBean"></a>initializeBean</h4><p>属性注入完成后，就是处理各种回调</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> Object <span class="title">initializeBean</span><span class="params">(String beanName, Object bean, <span class="meta">@Nullable</span> RootBeanDefinition mbd)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (System.getSecurityManager() != <span class="keyword">null</span>) &#123;</span><br><span class="line">        AccessController.doPrivileged((PrivilegedAction&lt;Object&gt;) () -&gt; &#123;</span><br><span class="line">            invokeAwareMethods(beanName, bean);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;, getAccessControlContext());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 如果bean实现了BeanNameAware、BeanClassLoaderAware 或 BeanFactoryAware 接口，回调</span></span><br><span class="line">        invokeAwareMethods(beanName, bean);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Object wrappedBean = bean;</span><br><span class="line">    <span class="keyword">if</span> (mbd == <span class="keyword">null</span> || !mbd.isSynthetic()) &#123;</span><br><span class="line">        <span class="comment">// BeanPostProcessor 的 postProcessBeforeInitialization 回调</span></span><br><span class="line">        <span class="comment">// 间接调用ApplicationContextAwareProcessor的postProcessBeforeInitialization方法</span></span><br><span class="line">        <span class="comment">// 如果bean实现了EnvironmentAware、EmbeddedValueResolverAware、 ResourceLoaderAware、 ApplicationEventPublisherAware、 MessageSourceAware、ApplicationContextAware接口，回调</span></span><br><span class="line">        wrappedBean = applyBeanPostProcessorsBeforeInitialization(wrappedBean, beanName);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 处理 bean 中定义的 init-method，</span></span><br><span class="line">        <span class="comment">// 如果 bean 实现了 InitializingBean 接口，调用 afterPropertiesSet() 方法</span></span><br><span class="line">        invokeInitMethods(beanName, wrappedBean, mbd);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> BeanCreationException(</span><br><span class="line">            (mbd != <span class="keyword">null</span> ? mbd.getResourceDescription() : <span class="keyword">null</span>),</span><br><span class="line">            beanName, <span class="string">&quot;Invocation of init method failed&quot;</span>, ex);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (mbd == <span class="keyword">null</span> || !mbd.isSynthetic()) &#123;</span><br><span class="line">        <span class="comment">// BeanPostProcessor 的 postProcessAfterInitialization 回调</span></span><br><span class="line">        wrappedBean = applyBeanPostProcessorsAfterInitialization(wrappedBean, beanName);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> wrappedBean;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="类-接口说明"><a href="#类-接口说明" class="headerlink" title="类/接口说明"></a>类/接口说明</h1><h2 id="1、BeanFactory接口"><a href="#1、BeanFactory接口" class="headerlink" title="1、BeanFactory接口"></a>1、BeanFactory接口</h2><p>作用：获取单个Bean</p>
<h2 id="2、ListableBeanFactory接口继承BeanFactory接口"><a href="#2、ListableBeanFactory接口继承BeanFactory接口" class="headerlink" title="2、ListableBeanFactory接口继承BeanFactory接口"></a>2、ListableBeanFactory接口继承BeanFactory接口</h2><p>作用：获取多个Bean</p>
<h2 id="3、HierarchicalBeanFactory接口继承BeanFactory接口"><a href="#3、HierarchicalBeanFactory接口继承BeanFactory接口" class="headerlink" title="3、HierarchicalBeanFactory接口继承BeanFactory接口"></a>3、HierarchicalBeanFactory接口继承BeanFactory接口</h2><p>作用：在应用中起多个 BeanFactory，然后可以将各个 BeanFactory 设置为父子关系</p>
<h2 id="4、AutowireCapableBeanFactory接口继承BeanFactory接口"><a href="#4、AutowireCapableBeanFactory接口继承BeanFactory接口" class="headerlink" title="4、AutowireCapableBeanFactory接口继承BeanFactory接口"></a>4、AutowireCapableBeanFactory接口继承BeanFactory接口</h2><p>作用：自动装配 Bean</p>
<h2 id="5、ConfigurableListableBeanFactory继承了ListableBeanFactory-AutowireCapableBeanFactory接口"><a href="#5、ConfigurableListableBeanFactory继承了ListableBeanFactory-AutowireCapableBeanFactory接口" class="headerlink" title="5、ConfigurableListableBeanFactory继承了ListableBeanFactory, AutowireCapableBeanFactory接口"></a>5、ConfigurableListableBeanFactory继承了ListableBeanFactory, AutowireCapableBeanFactory接口</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">ConfigurableListableBeanFactory</span></span></span><br><span class="line"><span class="class">		<span class="keyword">extends</span> <span class="title">ListableBeanFactory</span>, <span class="title">AutowireCapableBeanFactory</span>, <span class="title">ConfigurableBeanFactory</span></span></span><br></pre></td></tr></table></figure>

<h2 id="6、ApplicationContext接口继承了ListableBeanFactory，HierarchicalBeanFactory接口"><a href="#6、ApplicationContext接口继承了ListableBeanFactory，HierarchicalBeanFactory接口" class="headerlink" title="6、ApplicationContext接口继承了ListableBeanFactory，HierarchicalBeanFactory接口"></a>6、ApplicationContext接口继承了ListableBeanFactory，HierarchicalBeanFactory接口</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">ApplicationContext</span> <span class="keyword">extends</span> <span class="title">EnvironmentCapable</span>, <span class="title">ListableBeanFactory</span>, <span class="title">HierarchicalBeanFactory</span>,</span></span><br><span class="line"><span class="class">		<span class="title">MessageSource</span>, <span class="title">ApplicationEventPublisher</span>, <span class="title">ResourcePatternResolver</span></span></span><br></pre></td></tr></table></figure>

<p>ApplicationContext 继承自 BeanFactory，但是它不应该被理解为 BeanFactory 的实现类，而是说其内部持有一个实例化的 BeanFactory（DefaultListableBeanFactory）。以后所有的 BeanFactory 相关的操作其实是给这个实例来处理的。</p>
<h2 id="7、DefaultListableBeanFactory类"><a href="#7、DefaultListableBeanFactory类" class="headerlink" title="7、DefaultListableBeanFactory类"></a>7、DefaultListableBeanFactory类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DefaultListableBeanFactory</span> <span class="keyword">extends</span> <span class="title">AbstractAutowireCapableBeanFactory</span> <span class="keyword">implements</span> <span class="title">ConfigurableListableBeanFactory</span>, <span class="title">BeanDefinitionRegistry</span>, <span class="title">Serializable</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>通过继承AbstractAutowireCapableBeanFactory类和实现ConfigurableListableBeanFactory接口，从而实现了ListableBeanFactory、HierarchicalBeanFactory和AutowireCapableBeanFactory三个接口</p>
<p>DefaultListableBeanFactory 基本上是最牛的 BeanFactory 了，这也是为什么这边会使用这个类来实例化的原因</p>
<h2 id="8、BeanDefinition接口"><a href="#8、BeanDefinition接口" class="headerlink" title="8、BeanDefinition接口"></a>8、BeanDefinition接口</h2><p>就是spring的bean，定义的各个 Bean 其实会转换成一个个BeanDefinition存在于 Spring的BeanFactory中</p>
<p>保存了Bean 信息，比如这个 Bean 指向的是哪个类、是否是单例的、是否懒加载、这个 Bean 依赖了哪些 Bean 等等。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BeanDefinition</span> <span class="keyword">extends</span> <span class="title">AttributeAccessor</span>, <span class="title">BeanMetadataElement</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 默认只提供 sington 和 prototype 两种，</span></span><br><span class="line">    <span class="comment">// request, session, globalSession, application, websocket 这几种属于基于 web 的扩展</span></span><br><span class="line">    String SCOPE_SINGLETON = <span class="string">&quot;singleton&quot;</span>;</span><br><span class="line">    String SCOPE_PROTOTYPE = <span class="string">&quot;prototype&quot;</span>;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> ROLE_APPLICATION = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> ROLE_SUPPORT = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> ROLE_INFRASTRUCTURE = <span class="number">2</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 设置父 Bean，这里涉及到 bean 继承，不是 java 继承</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setParentName</span><span class="params">(<span class="meta">@Nullable</span> String var1)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取父 Bean</span></span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    <span class="function">String <span class="title">getParentName</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置 Bean 的类名称</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setBeanClassName</span><span class="params">(<span class="meta">@Nullable</span> String var1)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取 Bean 的类名称</span></span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    <span class="function">String <span class="title">getBeanClassName</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置 Bean 的 scope</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setScope</span><span class="params">(<span class="meta">@Nullable</span> String var1)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取 Bean 的 scope</span></span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    <span class="function">String <span class="title">getScope</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置是否懒加载</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setLazyInit</span><span class="params">(<span class="keyword">boolean</span> var1)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取是否懒加载</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isLazyInit</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置该 Bean 依赖的所有的 Bean，注意，这里的依赖不是指属性依赖(如 @Autowire 标记的)，</span></span><br><span class="line">    <span class="comment">// 是 depends-on=&quot;&quot; 属性设置的值</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setDependsOn</span><span class="params">(<span class="meta">@Nullable</span> String... var1)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    String[] getDependsOn();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置该 Bean 是否可以注入到其他 Bean 中，只对根据类型注入有效，</span></span><br><span class="line">    <span class="comment">// 如果根据名称注入，即使这边设置了 false，也是可以的</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setAutowireCandidate</span><span class="params">(<span class="keyword">boolean</span> var1)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isAutowireCandidate</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//主要的。同一接口的多个实现，如果不指定名字的话，Spring 会优先选择设置primary为true的bean</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setPrimary</span><span class="params">(<span class="keyword">boolean</span> var1)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isPrimary</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果该 Bean 采用工厂方法生成，指定工厂名称</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setFactoryBeanName</span><span class="params">(<span class="meta">@Nullable</span> String var1)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    <span class="function">String <span class="title">getFactoryBeanName</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 指定工厂类中的 工厂方法名称</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setFactoryMethodName</span><span class="params">(<span class="meta">@Nullable</span> String var1)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    <span class="function">String <span class="title">getFactoryMethodName</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">     <span class="comment">// 构造器参数</span></span><br><span class="line">    <span class="function">ConstructorArgumentValues <span class="title">getConstructorArgumentValues</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">boolean</span> <span class="title">hasConstructorArgumentValues</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> !<span class="keyword">this</span>.getConstructorArgumentValues().isEmpty();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Bean 中的属性值</span></span><br><span class="line">    <span class="function">MutablePropertyValues <span class="title">getPropertyValues</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">boolean</span> <span class="title">hasPropertyValues</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> !<span class="keyword">this</span>.getPropertyValues().isEmpty();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setInitMethodName</span><span class="params">(<span class="meta">@Nullable</span> String var1)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    <span class="function">String <span class="title">getInitMethodName</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setDestroyMethodName</span><span class="params">(<span class="meta">@Nullable</span> String var1)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    <span class="function">String <span class="title">getDestroyMethodName</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setRole</span><span class="params">(<span class="keyword">int</span> var1)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getRole</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setDescription</span><span class="params">(<span class="meta">@Nullable</span> String var1)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    <span class="function">String <span class="title">getDescription</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">ResolvableType <span class="title">getResolvableType</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 是否 singleton</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isSingleton</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 是否 prototype</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isPrototype</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果这个 Bean 原生是抽象类，那么不能实例化</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isAbstract</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    <span class="function">String <span class="title">getResourceDescription</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    <span class="function">BeanDefinition <span class="title">getOriginatingBeanDefinition</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h1><h2 id="FactoryBean"><a href="#FactoryBean" class="headerlink" title="FactoryBean"></a>FactoryBean</h2><p>适用于 Bean 的创建过程比较复杂的场景，比如数据库连接池的创建</p>
]]></content>
      <categories>
        <category>应用框架</category>
        <category>Spring家族</category>
        <category>Spring</category>
        <category>IOC</category>
      </categories>
      <tags>
        <tag>Spring</tag>
        <tag>IOC</tag>
      </tags>
  </entry>
</search>
